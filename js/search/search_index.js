var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.522,1,2.287]],["body/controllers/AppController.html",[0,1.983,1,3.71,2,1.983,3,0.302,4,0.302,5,0.262,6,3.764,7,3.315,8,4.445,9,0.719,10,1.552,11,5.34,12,2.131,13,0.025,14,0.833,15,4.445,16,1.168,17,1.454,18,0.587,19,0.893,20,3.375,21,3.764,22,4.445,23,0.302,24,0.045,25,2.489,26,2.131,27,1.514,28,4.445,29,0.02,30,0.02]],["title/modules/AppModule.html",[31,1.241,32,2.287]],["body/modules/AppModule.html",[1,3.571,2,2.091,3,0.234,4,0.234,5,0.203,13,0.025,18,0.681,19,0.692,20,3.455,21,2.917,23,0.234,24,0.035,29,0.017,30,0.017,31,1.938,32,4.548,33,1.652,34,1.781,35,2.102,36,2.102,37,1.781,38,2.983,39,1.929,40,2.917,41,2.917,42,2.917,43,3.765,44,3.19,45,3.765,46,3.455,47,2.86,48,2.102,49,2.102,50,3.446,51,3.142,52,3.446,53,2.917,54,2.569,55,3.446,56,3.446,57,3.446,58,3.446,59,2.917,60,2.917,61,1.781]],["title/injectables/AppService.html",[20,1.911,62,0.897]],["body/injectables/AppService.html",[3,0.318,4,0.318,5,0.277,9,0.758,10,1.603,11,5.439,13,0.025,14,0.877,16,1.231,17,1.502,18,0.497,19,0.941,20,3.201,23,0.318,24,0.048,27,1.595,29,0.021,30,0.021,62,1.502,63,2.089,64,3.966,65,4.684,66,4.684,67,4.684]],["title/classes/Auth.html",[24,0.035,68,2.082]],["body/classes/Auth.html",[3,0.354,4,0.354,5,0.308,13,0.023,23,0.354,24,0.053,29,0.022,30,0.022,68,3.722,69,1.9,70,4.423]],["title/controllers/AuthController.html",[0,1.522,71,2.287]],["body/controllers/AuthController.html",[0,1.75,2,1.75,3,0.266,4,0.266,5,0.232,7,2.925,9,0.634,10,1.433,12,1.881,13,0.025,14,0.735,16,1.031,18,0.639,19,0.788,23,0.266,24,0.04,25,2.196,26,1.881,27,1.336,29,0.018,30,0.018,68,2.393,71,3.426,72,3.321,73,2.21,74,4.491,75,3.922,76,3.922,77,1.741,78,1.741,79,3.922,80,1.173,81,1.031,82,1.031,83,3.811,84,3.321,85,2.629,86,2.629,87,3.321,88,2.939,89,2.925,90,2.629,91,3.922,92,3.321,93,3.811,94,2.028,95,3.922,96,3.922,97,3.922,98,2.925,99,3.922,100,3.922]],["title/modules/AuthModule.html",[31,1.241,43,2.082]],["body/modules/AuthModule.html",[2,2.036,3,0.225,4,0.225,5,0.196,13,0.025,18,0.685,19,0.666,23,0.225,24,0.034,29,0.016,30,0.016,31,1.899,33,1.589,34,1.714,35,2.022,36,2.022,37,1.714,38,2.924,39,2.924,43,4.029,46,3.415,47,2.785,48,2.022,49,2.022,51,3.06,53,2.806,54,2.472,59,2.806,60,2.806,61,1.714,71,3.5,88,3.442,89,2.472,101,2.806,102,3.315,103,2.806,104,2.806,105,3.721,106,3.315,107,3.315,108,3.315,109,4.565,110,1.714,111,3.315,112,2.472,113,3.06,114,3.315,115,3.315,116,3.315,117,3.315,118,3.315,119,2.806,120,2.472,121,3.315,122,3.315,123,3.315]],["title/injectables/AuthService.html",[62,0.897,88,1.764]],["body/injectables/AuthService.html",[3,0.18,4,0.18,5,0.156,9,0.428,10,1.091,13,0.025,14,0.864,16,1.488,17,1.637,18,0.539,19,0.532,23,0.18,24,0.027,27,1.325,29,0.014,30,0.014,62,1.022,63,1.181,73,1.793,74,2.902,77,1.994,78,1.732,80,1.38,81,1.212,82,1.212,88,2.012,112,1.975,124,2.243,125,3.295,126,1.866,127,2.649,128,2.628,129,4.613,130,5.084,131,2.649,132,0.927,133,3.891,134,3.891,135,3.033,136,2.649,137,3.891,138,2.122,139,4.305,140,5.084,141,2.179,142,4.223,143,4.305,144,3.891,145,3.906,146,2.902,147,3.295,148,5.416,149,2.649,150,3.891,151,4.794,152,3.891,153,2.058,154,2.902,155,3.891,156,3.295,157,2.179,158,2.649,159,1.975,160,2.374,161,3.44,162,1.27,163,2.649,164,1.369,165,2.243,166,2.649,167,0.902,168,2.649,169,2.243,170,2.649]],["title/classes/CreateUrlDto.html",[24,0.035,171,1.911]],["body/classes/CreateUrlDto.html",[3,0.262,4,0.262,5,0.228,9,0.624,12,1.849,13,0.025,14,0.722,17,1.481,18,0.598,23,0.262,24,0.051,29,0.018,30,0.018,69,1.402,94,1.993,132,1.133,141,2.159,171,2.83,172,4.279,173,2.875,174,2.254,175,3.779,176,3.265,177,3.387,178,2.423,179,5.053,180,3.387,181,3.768,182,5.053,183,3.856,184,4.773,185,4.204,186,3.856,187,4.279,188,2.875,189,4.279,190,2.584,191,3.265,192,2.584,193,3.768,194,3.265,195,3.856]],["title/classes/CreateUrlsTable1724011503102.html",[24,0.035,196,2.545]],["body/classes/CreateUrlsTable1724011503102.html",[3,0.226,4,0.226,5,0.196,9,0.538,10,1.283,13,0.025,14,0.857,16,1.202,18,0.352,23,0.226,24,0.034,29,0.016,30,0.016,69,1.209,73,2.373,80,1.368,81,1.202,82,1.202,132,0.919,153,2.513,157,3.418,162,2.193,167,1.132,196,3.411,197,4.428,198,2.513,199,3.604,200,2.815,201,3.066,202,3.9,203,4.552,204,3.411,205,3.411,206,3.411,207,4.821,208,3.324,209,3.411,210,3.324,211,1.483,212,3.411,213,3.066,214,3.411,215,2.815,216,2.815,217,2.479,218,2.479,219,4.574,220,2.028,221,4.574,222,2.479,223,2.815,224,2.815,225,2.704,226,2.479,227,2.228,228,3.506,229,3.066,230,2.228,231,2.228,232,2.479]],["title/classes/CreateUserDto.html",[24,0.035,233,2.082]],["body/classes/CreateUserDto.html",[3,0.222,4,0.222,5,0.193,9,0.53,12,2.171,13,0.025,14,0.848,17,1.471,18,0.55,23,0.222,24,0.046,26,2.914,29,0.016,30,0.016,69,1.192,77,2.002,78,2.122,94,1.694,132,0.91,138,1.907,141,2.536,174,2.02,176,3.834,181,4.175,185,4.382,187,4.394,188,2.443,189,4.394,190,2.196,191,2.774,192,2.196,193,3.87,194,3.834,233,2.763,234,4.394,235,2.774,236,3.276,237,5.19,238,3.276,239,3.276,240,3.276,241,4.529,242,5.599,243,3.87,244,4.529,245,3.834,246,3.834,247,3.276,248,3.834,249,3.276,250,3.276,251,3.276]],["title/modules/DatabaseModule.html",[31,1.241,44,1.764]],["body/modules/DatabaseModule.html",[3,0.33,4,0.33,5,0.287,13,0.025,18,0.62,19,0.978,23,0.33,24,0.049,29,0.021,30,0.021,31,2.127,33,2.332,38,2.724,39,2.724,44,3.024,252,4.865,253,4.677,254,4.865]],["title/classes/EmailIsRegisteredException.html",[24,0.035,255,2.082]],["body/classes/EmailIsRegisteredException.html",[3,0.302,4,0.302,5,0.262,13,0.025,14,0.833,18,0.587,19,0.893,23,0.376,24,0.056,29,0.02,30,0.02,69,1.617,126,3.024,192,2.98,255,3.376,256,3.099,257,3.315,258,2.343,259,5.103,260,4.445,261,4.686,262,2.98,263,2.489,264,2.489,265,3.764,266,3.764]],["title/classes/HttpExceptionFilter.html",[24,0.035,267,2.545]],["body/classes/HttpExceptionFilter.html",[3,0.23,4,0.23,5,0.2,9,0.549,10,1.301,13,0.025,14,0.869,16,0.892,18,0.492,19,0.682,23,0.23,24,0.035,25,1.9,26,1.627,29,0.017,30,0.017,69,1.234,80,1.388,81,1.219,82,1.219,86,3.11,126,1.627,132,0.682,164,3.076,185,3.942,201,3.11,263,2.598,267,3.46,268,4.476,269,2.874,270,5.287,271,3.544,272,3.394,273,3.394,274,3.225,275,4.64,276,5.95,277,4.476,278,5.683,279,3.394,280,4.64,281,3.394,282,3.394,283,3.46,284,2.531,285,3.394,286,2.07,287,3.394,288,3.394,289,3.394,290,3.394,291,3.394,292,3.394,293,3.394,294,3.394,295,4.238,296,2.531,297,3.394,298,3.394,299,3.394,300,3.394,301,3.394,302,3.394,303,2.874,304,3.394,305,3.394,306,3.394]],["title/interfaces/ICreateUser.html",[307,1.764,308,1.911]],["body/interfaces/ICreateUser.html",[3,0.315,4,0.315,5,0.274,13,0.024,17,1.494,23,0.417,29,0.02,30,0.02,77,1.582,78,1.582,135,2.601,167,1.582,258,2.389,307,3.178,308,3.185,309,3.114,310,3.114,311,4.584,312,2.072,313,2.601,314,3.442,315,3.464,316,2.601,317,2.402]],["title/interfaces/IPayloadUser.html",[307,1.764,317,1.764]],["body/interfaces/IPayloadUser.html",[3,0.315,4,0.315,5,0.274,13,0.024,17,1.494,23,0.417,29,0.02,30,0.02,77,1.582,78,1.582,135,2.601,167,1.582,258,2.389,307,3.178,308,2.601,309,3.114,310,3.114,311,4.584,312,2.072,313,2.601,314,3.442,315,3.464,316,2.601,317,2.94]],["title/interfaces/IUser.html",[135,1.911,307,1.764]],["body/interfaces/IUser.html",[3,0.266,4,0.266,5,0.232,9,0.634,13,0.025,17,1.682,23,0.386,29,0.018,30,0.018,77,2.051,78,2.051,82,1.343,132,1.287,135,2.862,167,2.051,174,2.28,258,1.987,307,2.939,308,2.196,309,2.629,310,2.629,311,3.811,312,2.536,313,3.372,314,3.743,315,4.491,316,3.372,317,2.028]],["title/injectables/JwtAuthGuard.html",[62,0.897,318,2.287]],["body/injectables/JwtAuthGuard.html",[3,0.263,4,0.263,5,0.229,9,0.628,10,1.423,13,0.025,14,0.951,16,1.334,18,0.538,19,0.78,23,0.263,24,0.039,27,1.729,29,0.018,30,0.018,62,1.334,63,1.732,80,1.519,81,1.334,82,1.334,110,2.007,132,0.78,138,2.12,258,1.973,286,1.732,318,3.403,319,4.218,320,2.602,321,4.298,322,4.298,323,5.076,324,4.298,325,5.079,326,3.882,327,3.287,328,5.076,329,3.882,330,5.656,331,4.298,332,2.895,333,3.287,334,2.368]],["title/classes/JwtStrategy.html",[24,0.035,113,2.287]],["body/classes/JwtStrategy.html",[3,0.269,4,0.269,5,0.234,9,0.641,10,1.443,13,0.025,14,0.964,16,1.041,18,0.606,23,0.269,24,0.04,27,1.35,29,0.018,30,0.018,69,1.442,73,2.221,77,1.35,80,1.186,81,1.041,82,1.041,110,2.049,113,3.449,120,2.956,126,2.739,132,0.796,146,2.956,153,2.295,159,2.956,165,3.356,167,1.35,258,2,317,2.049,335,3.356,336,4.356,337,4.356,338,3.964,339,5.145,340,3.964,341,3.356,342,3.964,343,3.356,344,2.956,345,3.964,346,3.356,347,3.964,348,3.964,349,3.964,350,2.956,351,3.964,352,3.964,353,3.964]],["title/classes/LinkUserToUrl1724098604809.html",[24,0.035,354,2.545]],["body/classes/LinkUserToUrl1724098604809.html",[3,0.242,4,0.242,5,0.21,9,0.577,10,1.345,13,0.025,14,0.899,16,1.26,18,0.378,23,0.242,24,0.036,29,0.017,30,0.017,69,1.297,73,2.423,80,1.435,81,1.26,82,1.26,132,0.964,138,1.847,153,2.587,157,1.996,162,2.3,199,2.927,201,3.215,202,4.043,203,4.648,204,3.577,205,3.577,206,3.577,207,4.892,209,3.577,211,1.59,212,2.658,213,3.215,217,2.658,218,2.658,232,2.658,354,3.577,355,4.59,356,4.59,357,3.018,358,3.565,359,3.565,360,3.565,361,3.018,362,4.797,363,4.797,364,3.565,365,3.565,366,3.565,367,2.658,368,3.565,369,3.565]],["title/injectables/LocalAuthGuard.html",[62,0.897,90,2.287]],["body/injectables/LocalAuthGuard.html",[3,0.33,4,0.33,5,0.287,13,0.025,18,0.62,19,0.978,23,0.33,24,0.049,29,0.021,30,0.021,62,1.537,63,2.17,90,3.92,110,2.515,258,2.273,320,3.261,332,3.628,370,4.119,371,5.849]],["title/injectables/LocalStrategy.html",[62,0.897,105,2.082]],["body/injectables/LocalStrategy.html",[3,0.24,4,0.24,5,0.209,9,0.573,10,1.339,13,0.025,14,0.895,16,0.931,17,1.635,18,0.613,19,0.712,23,0.24,24,0.036,25,1.984,27,1.207,29,0.017,30,0.017,61,1.831,62,1.255,63,1.58,73,2.101,77,1.97,78,2.057,80,1.429,81,1.255,82,1.255,83,2.642,88,3.217,89,2.642,105,2.914,110,1.831,126,1.698,132,0.96,138,1.841,153,2.131,162,1.698,164,1.831,258,1.857,286,1.58,331,4.044,334,2.161,336,4.044,337,4.044,341,2.999,343,2.999,344,2.642,346,2.999,372,2.999,373,3.542,374,3.542,375,4.777,376,3.542,377,2.999,378,3.542,379,3.542,380,3.542,381,3.542]],["title/injectables/OptionalAuthGuard.html",[62,0.897,382,2.287]],["body/injectables/OptionalAuthGuard.html",[3,0.296,4,0.296,5,0.257,9,0.705,10,1.533,13,0.025,14,0.817,16,1.145,18,0.58,19,0.876,23,0.296,24,0.044,27,1.485,29,0.02,30,0.02,62,1.437,63,1.945,80,1.304,81,1.145,82,1.145,110,2.254,132,0.876,258,2.125,320,2.922,321,4.63,322,4.63,324,4.63,325,5.303,327,3.691,332,3.251,333,3.691,382,3.665,383,4.077,384,4.36]],["title/classes/URLNotFoundException.html",[24,0.035,264,1.911]],["body/classes/URLNotFoundException.html",[3,0.302,4,0.302,5,0.262,13,0.025,14,0.833,18,0.587,19,0.893,23,0.376,24,0.056,29,0.02,30,0.02,69,1.617,126,3.024,192,2.98,255,2.712,256,3.099,257,3.315,258,2.343,259,4.686,261,5.103,262,2.98,263,2.489,264,3.099,265,3.764,266,3.764,385,4.445]],["title/classes/UpdateUrlDto.html",[24,0.035,386,2.082]],["body/classes/UpdateUrlDto.html",[3,0.33,4,0.33,5,0.287,13,0.025,18,0.62,23,0.33,24,0.049,29,0.021,30,0.021,69,1.769,94,2.515,171,2.724,173,3.628,198,2.17,258,2.273,386,3.568,387,4.119,388,5.849,389,4.865,390,3.628]],["title/entities/Url.html",[178,1.636,391,1.911]],["body/entities/Url.html",[3,0.186,4,0.186,5,0.162,9,0.646,12,2.908,13,0.025,14,1.136,17,1.359,18,0.291,23,0.186,24,0.028,29,0.014,30,0.014,61,3.06,81,1.65,132,1.293,167,1.604,174,1.782,175,3.156,178,1.915,211,1.224,218,2.979,220,3.155,222,3.511,223,3.382,224,3.382,225,2.673,227,2.677,228,3.844,229,3.466,230,2.677,231,2.677,243,2.047,312,2.558,313,2.637,314,3.211,316,2.637,391,1.537,392,1.84,393,2.324,394,3.987,395,3.156,396,3.511,397,3.994,398,2.745,399,3.987,400,2.745,401,4.378,402,2.745,403,2.745,404,3.382,405,2.745,406,3.987,407,2.745,408,2.745,409,2.745,410,2.745,411,3.994,412,2.745,413,4.652,414,4.378,415,2.745,416,2.745]],["title/controllers/UrlsController.html",[0,1.522,417,2.287]],["body/controllers/UrlsController.html",[0,1.331,2,0.836,3,0.127,4,0.127,5,0.111,9,0.303,10,0.837,12,2.221,13,0.025,14,0.868,16,1.217,17,1.115,18,0.602,19,0.377,23,0.127,24,0.019,25,1.049,26,0.898,27,1.681,29,0.011,30,0.011,73,1.919,80,1.386,81,1.217,82,1.217,83,4.466,84,2.527,85,2.493,86,2.001,87,1.587,92,2.527,93,3.164,94,0.969,98,2.774,132,1.08,138,0.638,141,3.009,159,1.397,160,1.143,161,1.397,162,1.431,164,1.543,167,1.831,171,3.009,177,2.844,178,2.779,180,2.844,198,1.331,220,1.821,256,1.049,263,2.083,264,2.083,271,1.256,274,1.821,283,3.164,284,1.397,286,1.331,295,3.164,296,1.397,312,2.471,317,1.543,318,1.256,319,1.397,334,1.821,367,1.397,382,1.256,383,1.397,386,3.279,390,2.226,396,2.774,417,2.001,418,1.587,419,2.527,420,4.179,421,2.985,422,3.72,423,3.922,424,1.587,425,1.874,426,1.874,427,1.874,428,4.633,429,1.874,430,1.874,431,2.985,432,1.874,433,2.985,434,1.874,435,1.874,436,1.874,437,1.874,438,1.874,439,1.874,440,1.874,441,1.874,442,1.874,443,2.527,444,2.985,445,1.874,446,2.985,447,2.985,448,1.874,449,1.874,450,1.874,451,1.874,452,1.874,453,2.774,454,1.587,455,1.587,456,2.527,457,3.922,458,1.671,459,1.587,460,1.256,461,1.397,462,1.587,463,1.874,464,1.874,465,1.874,466,1.874,467,1.874,468,1.874,469,1.874,470,1.874,471,1.874,472,1.587,473,1.874,474,1.874,475,1.397,476,1.874,477,1.874,478,1.874,479,1.587,480,3.72,481,1.874,482,1.874,483,1.874,484,1.874,485,1.874,486,1.874,487,1.874,488,1.874,489,1.874]],["title/modules/UrlsModule.html",[31,1.241,45,2.082]],["body/modules/UrlsModule.html",[2,2.3,3,0.27,4,0.27,5,0.235,13,0.025,18,0.665,19,0.799,23,0.27,24,0.04,29,0.019,30,0.019,31,2.081,33,1.907,34,2.056,35,2.427,36,2.427,37,2.056,38,3.204,39,2.227,44,3.323,45,4.046,47,3.146,48,2.427,49,2.427,51,3.457,417,3.836,458,3.599,459,3.368,490,3.368,491,3.977,492,3.368,493,3.977,494,3.977,495,3.846,496,3.977,497,3.368]],["title/injectables/UrlsService.html",[62,0.897,458,1.911]],["body/injectables/UrlsService.html",[3,0.06,4,0.06,5,0.053,9,0.144,10,0.446,13,0.026,14,0.857,16,1.433,17,1.118,18,0.382,19,0.179,23,0.06,24,0.009,26,0.427,27,1.605,29,0.006,30,0.006,61,1.112,62,0.418,63,0.398,73,2.248,80,1.273,81,1.118,82,1.118,126,0.762,132,0.855,138,1.312,141,2.157,142,3.174,143,3.054,151,3.262,153,2.462,154,1.948,156,1.346,157,0.89,160,1.594,161,3.412,162,2.466,164,2.884,167,1.97,171,2.478,174,0.709,175,2.418,177,2.726,178,3.009,180,1.751,198,0.959,199,2.029,211,0.398,214,1.948,220,3.725,225,0.822,226,1.604,243,2.69,246,1.346,256,0.499,263,1.463,264,0.89,271,1.065,274,1.594,286,1.718,296,0.665,303,1.346,312,2.668,314,0.499,316,1.862,334,0.97,350,1.948,386,2.597,390,1.185,394,0.755,395,0.597,396,3.766,419,1.346,423,1.346,424,1.346,458,0.89,460,0.597,461,0.665,462,0.755,475,1.185,479,0.755,498,0.755,499,2.151,500,1.589,501,1.589,502,2.612,503,1.589,504,1.589,505,1.589,506,2.151,507,0.891,508,2.212,509,1.589,510,1.589,511,0.891,512,0.891,513,2.612,514,3.326,515,2.998,516,2.539,517,1.185,518,2.612,519,1.346,520,0.891,521,0.755,522,0.891,523,1.589,524,3.874,525,3.326,526,0.891,527,2.612,528,2.612,529,3.326,530,1.589,531,2.612,532,1.589,533,1.589,534,1.589,535,1.589,536,2.212,537,2.212,538,1.589,539,0.891,540,2.612,541,2.612,542,2.612,543,1.346,544,1.589,545,1.185,546,2.612,547,1.589,548,1.589,549,1.589,550,0.891,551,1.589,552,0.891,553,1.589,554,2.998,555,1.589,556,1.589,557,0.891,558,0.891,559,0.891,560,1.589,561,0.891,562,1.589,563,2.151,564,2.151,565,1.589,566,1.589,567,0.891,568,1.589,569,1.589,570,0.891,571,0.891,572,1.589,573,3.326,574,3.326,575,2.612,576,1.589,577,0.665,578,0.665,579,0.665,580,0.891,581,3.607,582,1.589,583,0.891,584,0.891,585,0.891,586,3.326,587,2.151,588,2.816,589,2.612,590,1.589,591,1.589,592,1.589,593,1.589,594,1.589,595,1.589,596,1.589,597,0.891,598,0.891,599,0.891,600,2.151,601,0.891,602,1.589,603,2.151,604,0.891,605,0.891,606,1.589,607,0.891,608,0.755,609,1.589,610,0.891,611,0.891,612,0.891,613,1.589,614,0.891,615,0.891,616,0.891,617,0.891,618,0.891,619,0.891,620,0.891,621,0.891]],["title/entities/User.html",[138,1.162,391,1.911]],["body/entities/User.html",[3,0.219,4,0.219,5,0.19,9,0.521,12,2.898,13,0.025,14,1.132,17,1.46,18,0.341,23,0.219,24,0.033,29,0.016,30,0.016,61,2.314,77,1.752,78,1.752,81,1.588,132,1.29,138,1.524,167,1.752,174,1.996,211,1.437,225,2.873,227,3,228,4.052,229,3.725,230,3,231,3,312,1.996,313,2.88,314,3.385,316,2.88,391,1.803,392,2.159,395,3.447,399,4.354,401,3.789,406,4.354,413,4.945,414,4.706,622,2.727,623,3.22,624,3.22,625,3.22,626,3.22,627,3.22,628,3.22,629,3.22]],["title/classes/Users1724086805338.html",[24,0.035,630,2.545]],["body/classes/Users1724086805338.html",[3,0.235,4,0.235,5,0.205,9,0.561,10,1.32,13,0.025,14,0.882,16,1.237,18,0.368,23,0.235,24,0.035,29,0.017,30,0.017,69,1.261,73,2.403,77,1.181,78,1.181,80,1.408,81,1.237,82,1.237,132,0.946,153,2.557,157,3.21,162,2.257,167,1.181,198,1.546,201,3.155,202,3.986,203,4.61,204,3.51,205,3.51,206,3.51,207,4.864,209,3.51,211,1.546,212,3.51,213,3.155,214,3.51,215,2.935,216,2.935,217,2.585,222,2.585,225,2.434,227,2.324,228,3.583,229,3.155,230,2.324,231,2.324,232,2.585,630,3.51,631,4.526,632,2.935,633,3.467,634,3.467,635,3.51,636,4.707]],["title/controllers/UsersController.html",[0,1.522,637,2.287]],["body/controllers/UsersController.html",[0,1.658,2,1.658,3,0.252,4,0.252,5,0.219,7,2.772,9,0.601,10,1.383,12,1.782,13,0.025,14,0.696,16,0.976,18,0.625,19,0.747,23,0.252,24,0.038,25,2.081,26,1.782,27,1.266,29,0.018,30,0.018,80,1.112,81,0.976,82,0.976,85,3.306,93,3.678,94,1.922,98,2.772,128,2.862,132,0.991,138,1.266,160,2.267,198,2.2,233,3.927,274,3.009,286,1.658,295,2.772,443,4.176,453,2.772,455,3.147,456,4.176,457,4.176,460,2.491,635,2.772,637,3.306,638,3.147,639,3.147,640,3.717,641,4.933,642,3.717,643,3.717,644,3.717,645,3.147,646,3.147,647,3.717,648,3.717,649,3.717,650,3.717,651,3.717]],["title/modules/UsersModule.html",[31,1.241,46,1.911]],["body/modules/UsersModule.html",[2,2.244,3,0.26,4,0.26,5,0.226,13,0.025,18,0.657,19,0.77,23,0.26,24,0.039,29,0.018,30,0.018,31,2.044,33,1.836,34,1.98,35,2.336,36,2.336,37,1.98,38,3.146,39,3.146,44,3.289,46,3.726,47,3.069,48,2.336,49,2.336,51,3.372,128,3.522,497,3.243,637,3.766,645,3.243,652,3.243,653,3.83,654,3.243,655,3.243,656,3.83,657,3.83,658,3.752,659,3.83]],["title/injectables/UsersService.html",[62,0.897,128,1.764]],["body/injectables/UsersService.html",[3,0.175,4,0.175,5,0.152,9,0.417,10,1.069,13,0.026,14,0.94,16,1.002,17,1.193,18,0.632,19,0.518,23,0.175,24,0.026,26,1.235,27,1.546,29,0.014,30,0.014,62,1.002,63,1.149,73,2.179,77,1.91,78,1.91,80,1.358,81,1.193,82,1.193,125,3.228,126,1.828,128,1.971,132,0.912,138,1.709,147,3.228,153,2.238,157,1.443,160,3.061,162,2.688,164,2.999,167,0.878,174,1.701,198,1.701,211,1.149,225,1.332,233,3.42,255,2.326,256,1.443,263,2.135,271,1.727,274,3.061,286,2.025,308,1.443,313,1.443,334,2.326,460,1.727,461,1.921,475,1.921,508,4.248,521,2.181,545,1.921,577,1.921,639,3.228,646,2.181,660,2.181,661,2.576,662,3.813,663,3.813,664,2.576,665,2.576,666,3.813,667,1.921,668,2.576,669,2.576,670,1.921,671,1.921,672,2.576,673,2.576,674,2.576,675,3.813,676,3.813,677,3.813,678,2.181,679,2.576,680,2.576,681,2.576,682,2.576,683,2.576,684,2.576,685,2.576,686,3.813,687,2.181,688,2.576]],["title/coverage.html",[689,3.943]],["body/coverage.html",[0,2.06,1,1.467,5,0.129,6,1.853,13,0.025,20,1.225,24,0.062,29,0.012,30,0.012,37,1.131,62,1.489,64,1.853,68,1.335,70,1.853,71,1.467,72,1.853,88,1.131,90,1.467,105,1.335,113,1.467,124,1.853,128,1.131,132,0.44,135,1.225,138,1.148,171,1.225,172,1.853,173,2.514,178,1.616,190,1.467,196,1.632,197,1.853,198,0.976,199,1.335,200,1.853,213,1.467,226,5.196,233,1.335,234,1.853,235,1.853,253,1.632,255,1.335,256,1.887,257,2.514,262,1.467,264,1.225,267,1.632,268,1.853,269,1.853,286,0.976,307,2.125,308,1.225,310,2.756,317,1.131,318,1.467,319,1.632,320,2.756,335,1.853,354,1.632,355,1.853,356,1.853,357,1.853,370,1.853,372,1.853,382,1.467,383,1.632,386,1.335,387,1.853,391,1.887,393,2.854,417,1.467,418,1.853,458,1.225,495,1.632,498,1.853,524,1.853,578,1.632,579,1.632,622,1.853,630,1.632,631,1.853,632,1.853,637,1.467,638,1.853,658,1.632,660,1.853,667,1.632,670,1.632,671,1.632,689,1.853,690,1.853,691,2.189,692,5.667,693,2.189,694,2.189,695,6.701,696,5.667,697,4.223,698,6.338,699,1.853,700,1.853,701,1.853,702,2.854,703,1.853,704,2.854,705,2.854,706,1.853,707,1.853,708,1.853,709,3.066,710,4.111,711,1.853,712,1.853,713,2.189,714,1.853,715,2.189,716,2.189,717,2.189,718,1.853,719,2.189,720,2.189,721,3.066,722,1.853,723,2.189]],["title/dependencies.html",[34,2.122,724,2.413]],["body/dependencies.html",[13,0.025,19,0.828,24,0.054,29,0.019,30,0.019,34,2.131,54,3.074,94,2.131,110,2.131,112,3.074,146,3.074,188,3.074,211,1.839,284,3.074,344,4.34,377,3.49,725,4.928,726,4.122,727,4.122,728,4.122,729,4.122,730,4.122,731,4.122,732,4.122,733,4.122,734,4.122,735,4.122,736,4.122,737,4.122,738,4.122,739,4.122,740,4.122,741,4.122,742,4.122,743,4.122,744,4.122,745,4.122,746,3.49,747,3.49,748,4.122,749,3.49,750,4.122,751,4.122,752,4.122,753,3.49]],["title/miscellaneous/functions.html",[754,1.91,755,3.475]],["body/miscellaneous/functions.html",[9,0.733,13,0.024,16,1.472,17,1.746,29,0.02,30,0.02,37,3.144,78,1.908,80,1.676,81,1.472,82,1.472,132,1.126,153,2.499,670,4.178,671,4.178,678,3.839,687,3.839,709,3.381,721,3.381,754,3.039,755,3.839,756,3.839,757,4.744,758,5.603]],["title/index.html",[9,0.461,759,2.85,760,2.85]],["body/index.html",[13,0.024,17,1.547,29,0.013,30,0.013,31,1.612,68,1.51,74,1.846,77,0.843,78,0.843,82,0.65,85,2.971,86,2.971,139,3.753,145,2.096,167,1.675,169,4.165,175,2.971,177,2.481,178,2.938,180,1.659,181,2.76,198,1.104,199,2.704,211,1.104,220,3.212,283,3.305,312,1.651,361,4.458,367,1.846,391,1.386,395,2.481,420,3.134,453,4.12,454,3.134,517,1.846,536,3.134,537,2.096,543,2.096,588,3.134,608,2.096,635,1.846,690,4.165,725,2.096,746,2.096,747,2.096,749,2.096,753,2.096,761,3.701,762,2.475,763,3.701,764,2.475,765,3.701,766,2.475,767,2.475,768,3.701,769,3.701,770,2.475,771,2.475,772,2.475,773,5.265,774,3.701,775,2.475,776,4.432,777,2.475,778,1.846,779,2.475,780,2.475,781,3.701,782,2.475,783,2.475,784,2.475,785,2.475,786,2.475,787,2.475,788,2.475,789,2.475,790,2.475,791,2.475,792,2.475,793,2.475,794,3.701,795,2.475,796,4.432,797,2.475,798,3.701,799,3.701,800,2.475,801,2.475,802,2.475,803,2.096,804,2.475,805,2.475,806,2.475,807,2.475,808,4.432,809,4.432,810,4.432,811,4.919,812,6.019,813,2.475,814,3.701,815,2.475,816,2.475,817,3.701,818,4.432,819,2.475,820,2.475,821,2.475,822,2.475,823,2.475,824,2.475,825,2.475,826,2.475,827,2.475,828,2.475,829,2.475,830,2.475,831,2.475,832,2.475,833,2.475,834,2.475,835,2.475,836,2.475,837,2.475,838,2.475,839,2.475,840,2.096,841,2.475,842,2.475,843,2.475,844,2.475,845,2.475,846,2.475,847,2.475,848,2.475,849,2.475,850,2.475,851,2.475,852,2.475]],["title/modules.html",[33,2.233]],["body/modules.html",[13,0.021,29,0.021,30,0.021,32,3.275,33,2.342,43,2.981,44,2.526,45,2.981,46,2.736,853,6.516,854,6.516,855,6.516,856,6.664,857,4.886,858,4.886]],["title/overview.html",[859,3.943]],["body/overview.html",[2,1.57,13,0.025,20,3.017,29,0.017,30,0.017,31,1.28,32,4.507,33,1.688,34,1.82,35,2.148,36,2.148,37,1.82,38,1.971,39,1.971,40,2.981,41,2.981,42,2.981,43,4.036,44,3.116,45,3.873,46,3.664,47,2.902,48,2.148,49,2.148,63,1.57,69,1.28,88,3.283,101,2.981,103,2.981,104,2.981,105,3.287,128,3.283,245,2.981,309,2.36,392,2.36,458,3.017,490,2.981,492,2.981,652,2.981,654,2.981,655,2.981,859,2.981,860,3.52,861,3.52,862,3.52,863,3.52,864,3.52]],["title/properties.html",[174,1.831,724,2.413]],["body/properties.html",[13,0.025,29,0.022,30,0.022,141,2.911,174,2.319,519,4.402,865,5.199,866,5.199,867,5.199,868,5.199]],["title/miscellaneous/variables.html",[754,1.91,778,3.061]],["body/miscellaneous/variables.html",[9,0.366,13,0.025,17,1.542,27,0.771,29,0.012,30,0.012,61,1.788,73,0.88,77,0.771,78,1.178,119,1.916,120,1.687,132,1.292,138,0.771,142,3.13,154,1.687,164,1.17,178,2.012,184,1.916,190,2.318,193,3.981,225,3.298,248,1.916,253,2.579,262,2.318,277,2.928,286,1.543,312,1.543,350,2.579,392,2.318,404,1.916,472,1.916,495,2.579,516,1.916,517,2.579,545,4.757,577,3.13,578,2.579,579,3.505,658,2.579,667,3.505,697,1.916,699,4.52,700,2.928,701,1.916,702,3.979,703,1.916,704,1.916,705,3.554,706,2.928,707,2.928,708,1.916,709,1.687,711,2.928,712,2.928,714,1.916,718,1.916,721,1.687,722,2.928,754,1.517,756,2.928,757,1.916,778,1.687,803,1.916,840,2.928,869,5.063,870,3.458,871,2.263,872,2.263,873,2.263,874,2.263,875,2.263,876,2.263,877,2.263,878,3.458,879,2.263,880,3.458,881,2.263,882,2.263,883,3.458,884,2.263,885,3.458,886,2.263,887,2.263,888,3.458,889,3.458,890,2.263,891,2.263,892,2.263,893,4.699,894,4.197,895,4.197,896,5.338,897,2.263,898,2.263,899,2.263,900,2.263,901,2.263,902,2.263,903,2.263,904,2.263,905,2.263,906,2.263,907,2.263,908,2.263,909,2.263,910,2.263,911,3.458,912,2.263]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"classes/URLNotFoundException.html":{},"classes/UpdateUrlDto.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":226,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"injectables/UrlsService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":865,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":740,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":750,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":753,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["0.5.1",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":743,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":695,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":692,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":696,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":720,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":715,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":719,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":713,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":563,"title":{},"body":{"injectables/UrlsService.html":{}}}],["1.0.0",{"_index":745,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":404,"title":{},"body":{"entities/Url.html":{},"miscellaneous/variables.html":{}}}],["10.0.0",{"_index":725,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["10.0.2",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":731,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":728,"title":{},"body":{"dependencies.html":{}}}],["10/13",{"_index":717,"title":{},"body":{"coverage.html":{}}}],["10m",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{}}}],["12",{"_index":863,"title":{},"body":{"overview.html":{}}}],["16",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["16.4.5",{"_index":742,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":862,"title":{},"body":{"overview.html":{}}}],["2/4",{"_index":694,"title":{},"body":{"coverage.html":{}}}],["20.x",{"_index":769,"title":{},"body":{"index.html":{}}}],["200",{"_index":431,"title":{},"body":{"controllers/UrlsController.html":{}}}],["201",{"_index":443,"title":{},"body":{"controllers/UrlsController.html":{},"controllers/UsersController.html":{}}}],["3",{"_index":864,"title":{},"body":{"overview.html":{}}}],["3.2.3",{"_index":726,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":861,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":744,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":446,"title":{},"body":{"controllers/UrlsController.html":{}}}],["404",{"_index":433,"title":{},"body":{"controllers/UrlsController.html":{}}}],["5",{"_index":860,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":693,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":546,"title":{},"body":{"injectables/UrlsService.html":{}}}],["7.4.0",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["76",{"_index":716,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["8.12.0",{"_index":747,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["8000",{"_index":905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["__dirname",{"_index":889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_jwtservice",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{}}}],["_urlrepository",{"_index":510,"title":{},"body":{"injectables/UrlsService.html":{}}}],["_urlsservice",{"_index":465,"title":{},"body":{"controllers/UrlsController.html":{}}}],["_userrepository",{"_index":663,"title":{},"body":{"injectables/UsersService.html":{}}}],["_usersservice",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["abcd1234",{"_index":250,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["abcd1234'})@isnotempty({message",{"_index":239,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789",{"_index":876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["access_token",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["add",{"_index":361,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{},"index.html":{}}}],["address",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["already",{"_index":516,"title":{},"body":{"injectables/UrlsService.html":{},"miscellaneous/variables.html":{}}}],["alter",{"_index":360,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{}}}],["api",{"_index":819,"title":{},"body":{"index.html":{}}}],["api_domain=http://localhost",{"_index":780,"title":{},"body":{"index.html":{}}}],["apibody",{"_index":456,"title":{},"body":{"controllers/UrlsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UrlsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":429,"title":{},"body":{"controllers/UrlsController.html":{}}}],["apiproperty",{"_index":189,"title":{},"body":{"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{}}}],["apiproperty({description",{"_index":176,"title":{},"body":{"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{}}}],["apiresponse",{"_index":457,"title":{},"body":{"controllers/UrlsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":455,"title":{},"body":{"controllers/UrlsController.html":{},"controllers/UsersController.html":{}}}],["apitags('urls",{"_index":463,"title":{},"body":{"controllers/UrlsController.html":{}}}],["apitags('users",{"_index":647,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":8,"title":{},"body":{"controllers/AppController.html":{}}}],["app.controller",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_port=3001",{"_index":779,"title":{},"body":{"index.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":763,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":32,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":20,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":278,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["associated",{"_index":528,"title":{},"body":{"injectables/UrlsService.html":{}}}],["async",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalStrategy.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"classes/Users1724086805338.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":68,"title":{"classes/Auth.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"coverage.html":{},"index.html":{}}}],["auth.controller",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UrlsController.html":{}}}],["auth.guard.ts",{"_index":320,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:10",{"_index":326,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:14",{"_index":329,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:6",{"_index":384,"title":{},"body":{"injectables/OptionalAuthGuard.html":{}}}],["auth.service",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":71,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":332,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalAuthGuard.html":{}}}],["authguard('jwt",{"_index":321,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalAuthGuard.html":{}}}],["authguard('local",{"_index":371,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":43,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":868,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":811,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":88,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["autor",{"_index":852,"title":{},"body":{"index.html":{}}}],["available",{"_index":858,"title":{},"body":{"modules.html":{}}}],["await",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalStrategy.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"classes/Users1724086805338.html":{},"injectables/UsersService.html":{}}}],["backend",{"_index":762,"title":{},"body":{"index.html":{}}}],["balancer",{"_index":851,"title":{},"body":{"index.html":{}}}],["base62",{"_index":544,"title":{},"body":{"injectables/UrlsService.html":{}}}],["base62_characters",{"_index":578,"title":{},"body":{"injectables/UrlsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["bearer",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["between",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["body",{"_index":453,"title":{},"body":{"controllers/UrlsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["bootstrap",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["break",{"_index":608,"title":{},"body":{"injectables/UrlsService.html":{},"index.html":{}}}],["breake",{"_index":846,"title":{},"body":{"index.html":{}}}],["browse",{"_index":856,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":853,"title":{},"body":{"modules.html":{}}}],["cache",{"_index":837,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":322,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalAuthGuard.html":{}}}],["canactivate(context",{"_index":324,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalAuthGuard.html":{}}}],["catch",{"_index":271,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"injectables/UsersService.html":{}}}],["catch(exception",{"_index":275,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":285,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["characters",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UrlsService.html":{}}}],["check",{"_index":559,"title":{},"body":{"injectables/UrlsService.html":{}}}],["checks",{"_index":558,"title":{},"body":{"injectables/UrlsService.html":{}}}],["circuit",{"_index":845,"title":{},"body":{"index.html":{}}}],["class",{"_index":24,"title":{"classes/Auth.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/URLNotFoundException.html":{},"classes/UpdateUrlDto.html":{},"classes/Users1724086805338.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"classes/URLNotFoundException.html":{},"classes/UpdateUrlDto.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":69,"title":{},"body":{"classes/Auth.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/URLNotFoundException.html":{},"classes/UpdateUrlDto.html":{},"classes/Users1724086805338.html":{},"overview.html":{}}}],["click",{"_index":536,"title":{},"body":{"injectables/UrlsService.html":{},"index.html":{}}}],["click_count",{"_index":224,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"entities/Url.html":{}}}],["clickcount",{"_index":394,"title":{},"body":{"entities/Url.html":{},"injectables/UrlsService.html":{}}}],["clone",{"_index":791,"title":{},"body":{"index.html":{}}}],["clone:example",{"_index":789,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":839,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_urlsmodule",{"_index":490,"title":{},"body":{"modules/UrlsModule.html":{},"overview.html":{}}}],["cluster_urlsmodule_imports",{"_index":491,"title":{},"body":{"modules/UrlsModule.html":{}}}],["cluster_urlsmodule_providers",{"_index":492,"title":{},"body":{"modules/UrlsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":652,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":655,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":653,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":654,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":413,"title":{},"body":{"entities/Url.html":{},"entities/User.html":{}}}],["column({length",{"_index":403,"title":{},"body":{"entities/Url.html":{}}}],["column({name",{"_index":397,"title":{},"body":{"entities/Url.html":{}}}],["column({type",{"_index":410,"title":{},"body":{"entities/Url.html":{}}}],["common/constants/constants",{"_index":580,"title":{},"body":{"injectables/UrlsService.html":{}}}],["common/constants/validation",{"_index":191,"title":{},"body":{"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{}}}],["comparepassword",{"_index":670,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["comparepassword(password",{"_index":687,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["complete",{"_index":832,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":818,"title":{},"body":{"index.html":{}}}],["compose",{"_index":787,"title":{},"body":{"index.html":{}}}],["config",{"_index":706,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["configmodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configservice",{"_index":895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('database_host",{"_index":897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('database_name",{"_index":899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('database_password",{"_index":902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('database_port",{"_index":898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('database_schema",{"_index":900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('database_user",{"_index":901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conflictexception",{"_index":259,"title":{},"body":{"classes/EmailIsRegisteredException.html":{},"classes/URLNotFoundException.html":{}}}],["console.log(process.env.jwt_secret",{"_index":345,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["const",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalStrategy.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constraint",{"_index":362,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{}}}],["constructor",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/URLNotFoundException.html":{},"injectables/UrlsService.html":{},"injectables/UsersService.html":{}}}],["constructor(_urlrepository",{"_index":507,"title":{},"body":{"injectables/UrlsService.html":{}}}],["constructor(_userrepository",{"_index":661,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(_usersservice",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(authservice",{"_index":373,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(logger",{"_index":272,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["constructor(private",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalStrategy.html":{},"controllers/UrlsController.html":{},"controllers/UsersController.html":{}}}],["containing",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UrlsService.html":{}}}],["context",{"_index":327,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalAuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UrlsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UrlsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('/app",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["controller('auth",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":648,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["count",{"_index":537,"title":{},"body":{"injectables/UrlsService.html":{},"index.html":{}}}],["coverage",{"_index":689,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":198,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/UpdateUrlDto.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["create(@body",{"_index":650,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(createuserdto",{"_index":639,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(undefined",{"_index":511,"title":{},"body":{"injectables/UrlsService.html":{}}}],["createbyuser",{"_index":499,"title":{},"body":{"injectables/UrlsService.html":{}}}],["createbyuser(userid",{"_index":520,"title":{},"body":{"injectables/UrlsService.html":{}}}],["created_at",{"_index":227,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"entities/Url.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{}}}],["createdat",{"_index":313,"title":{},"body":{"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"entities/Url.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["createdatecolumn",{"_index":414,"title":{},"body":{"entities/Url.html":{},"entities/User.html":{}}}],["createdatecolumn({type",{"_index":399,"title":{},"body":{"entities/Url.html":{},"entities/User.html":{}}}],["creates",{"_index":513,"title":{},"body":{"injectables/UrlsService.html":{}}}],["createurldto",{"_index":171,"title":{"classes/CreateUrlDto.html":{}},"body":{"classes/CreateUrlDto.html":{},"classes/UpdateUrlDto.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"coverage.html":{}}}],["createurldto})@apiresponse({status",{"_index":442,"title":{},"body":{"controllers/UrlsController.html":{}}}],["createurlstable1724011503102",{"_index":196,"title":{"classes/CreateUrlsTable1724011503102.html":{}},"body":{"classes/CreateUrlsTable1724011503102.html":{},"coverage.html":{}}}],["createuserdto",{"_index":233,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto})@apiresponse({status",{"_index":643,"title":{},"body":{"controllers/UsersController.html":{}}}],["creating",{"_index":585,"title":{},"body":{"injectables/UrlsService.html":{}}}],["credentials",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["ctx",{"_index":288,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":291,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":290,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["currently",{"_index":553,"title":{},"body":{"injectables/UrlsService.html":{}}}],["customizable",{"_index":848,"title":{},"body":{"index.html":{}}}],["data",{"_index":574,"title":{},"body":{"injectables/UrlsService.html":{}}}],["data_source",{"_index":699,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":517,"title":{},"body":{"injectables/UrlsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["database.providers",{"_index":254,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["database_host",{"_index":781,"title":{},"body":{"index.html":{}}}],["database_name",{"_index":783,"title":{},"body":{"index.html":{}}}],["database_password",{"_index":785,"title":{},"body":{"index.html":{}}}],["database_port=5432",{"_index":782,"title":{},"body":{"index.html":{}}}],["database_schema=public",{"_index":786,"title":{},"body":{"index.html":{}}}],["database_user",{"_index":784,"title":{},"body":{"index.html":{}}}],["databasemodule",{"_index":44,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseproviders",{"_index":253,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasource(config",{"_index":892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasource.getrepository(url",{"_index":909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasource.getrepository(user",{"_index":910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasource.initialize",{"_index":903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasourceoptions",{"_index":877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":314,"title":{},"body":{"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"entities/Url.html":{},"injectables/UrlsService.html":{},"entities/User.html":{}}}],["date().toisostring",{"_index":304,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["db",{"_index":788,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":225,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"entities/Url.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":548,"title":{},"body":{"injectables/UrlsService.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"classes/URLNotFoundException.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":367,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{},"controllers/UrlsController.html":{},"index.html":{}}}],["delete('url/:id",{"_index":484,"title":{},"body":{"controllers/UrlsController.html":{}}}],["deleted",{"_index":531,"title":{},"body":{"injectables/UrlsService.html":{}}}],["deleted_at",{"_index":231,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"entities/Url.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{}}}],["deletedat",{"_index":316,"title":{},"body":{"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"entities/Url.html":{},"injectables/UrlsService.html":{},"entities/User.html":{}}}],["dependencies",{"_index":34,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependencies:example",{"_index":795,"title":{},"body":{"index.html":{}}}],["deploy",{"_index":838,"title":{},"body":{"index.html":{}}}],["description",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"properties.html":{}}}],["desired",{"_index":547,"title":{},"body":{"injectables/UrlsService.html":{}}}],["detailed",{"_index":533,"title":{},"body":{"injectables/UrlsService.html":{}}}],["details",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["doc",{"_index":820,"title":{},"body":{"index.html":{}}}],["doc/json",{"_index":821,"title":{},"body":{"index.html":{}}}],["docker",{"_index":776,"title":{},"body":{"index.html":{}}}],["docs",{"_index":827,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":690,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["domain_default",{"_index":711,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["don't",{"_index":805,"title":{},"body":{"index.html":{}}}],["dotenv",{"_index":741,"title":{},"body":{"dependencies.html":{}}}],["down",{"_index":204,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/Users1724086805338.html":{}}}],["down(queryrunner",{"_index":206,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/Users1724086805338.html":{}}}],["drop",{"_index":232,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/Users1724086805338.html":{}}}],["dto/create",{"_index":460,"title":{},"body":{"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":462,"title":{},"body":{"controllers/UrlsController.html":{},"injectables/UrlsService.html":{}}}],["email",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"classes/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["email_is_registered",{"_index":907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emailisregisteredexception",{"_index":255,"title":{"classes/EmailIsRegisteredException.html":{}},"body":{"classes/EmailIsRegisteredException.html":{},"classes/URLNotFoundException.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["encriptedpassword",{"_index":758,"title":{},"body":{"miscellaneous/functions.html":{}}}],["entities",{"_index":392,"title":{},"body":{"entities/Url.html":{},"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/url.entity",{"_index":583,"title":{},"body":{"injectables/UrlsService.html":{}}}],["entities/url.providers",{"_index":496,"title":{},"body":{"modules/UrlsModule.html":{}}}],["entities/user.entity",{"_index":669,"title":{},"body":{"injectables/UsersService.html":{}}}],["entities/user.providers",{"_index":659,"title":{},"body":{"modules/UsersModule.html":{}}}],["entity",{"_index":391,"title":{"entities/Url.html":{},"entities/User.html":{}},"body":{"entities/Url.html":{},"entities/User.html":{},"coverage.html":{},"index.html":{}}}],["entity('urls",{"_index":416,"title":{},"body":{"entities/Url.html":{}}}],["entity('users",{"_index":629,"title":{},"body":{"entities/User.html":{}}}],["entity.{js,ts",{"_index":890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entitynotfounderror",{"_index":582,"title":{},"body":{"injectables/UrlsService.html":{}}}],["env",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{}}}],["envfilepath",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{}}}],["environment",{"_index":777,"title":{},"body":{"index.html":{}}}],["er",{"_index":830,"title":{},"body":{"index.html":{}}}],["err",{"_index":330,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":263,"title":{},"body":{"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"classes/URLNotFoundException.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"injectables/UsersService.html":{}}}],["error_messages",{"_index":262,"title":{},"body":{"classes/EmailIsRegisteredException.html":{},"classes/URLNotFoundException.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":461,"title":{},"body":{"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"injectables/UsersService.html":{}}}],["errors.ts",{"_index":257,"title":{},"body":{"classes/EmailIsRegisteredException.html":{},"classes/URLNotFoundException.html":{},"coverage.html":{}}}],["errors.ts:10",{"_index":260,"title":{},"body":{"classes/EmailIsRegisteredException.html":{}}}],["errors.ts:4",{"_index":385,"title":{},"body":{"classes/URLNotFoundException.html":{}}}],["example",{"_index":181,"title":{},"body":{"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{},"index.html":{}}}],["example@example.com",{"_index":249,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["example@example.com'})@isnotempty({message",{"_index":236,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["exception",{"_index":280,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":269,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:12",{"_index":273,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:15",{"_index":279,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse()['message",{"_index":292,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":297,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":270,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["execute",{"_index":802,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":325,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalAuthGuard.html":{}}}],["existing",{"_index":518,"title":{},"body":{"injectables/UrlsService.html":{}}}],["exists",{"_index":214,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"injectables/UrlsService.html":{},"classes/Users1724086805338.html":{}}}],["experiment",{"_index":849,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"classes/URLNotFoundException.html":{},"classes/UpdateUrlDto.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":284,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/UrlsController.html":{},"dependencies.html":{}}}],["extends",{"_index":258,"title":{},"body":{"classes/EmailIsRegisteredException.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"classes/URLNotFoundException.html":{},"classes/UpdateUrlDto.html":{}}}],["extractjwt",{"_index":342,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":348,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["false",{"_index":350,"title":{},"body":{"classes/JwtStrategy.html":{},"injectables/UrlsService.html":{},"miscellaneous/variables.html":{}}}],["features",{"_index":772,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"classes/URLNotFoundException.html":{},"classes/UpdateUrlDto.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findbyuserid",{"_index":419,"title":{},"body":{"controllers/UrlsController.html":{},"injectables/UrlsService.html":{}}}],["findbyuserid(@param('id",{"_index":482,"title":{},"body":{"controllers/UrlsController.html":{}}}],["findbyuserid(userid",{"_index":424,"title":{},"body":{"controllers/UrlsController.html":{},"injectables/UrlsService.html":{}}}],["fk_user_url",{"_index":363,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{}}}],["folder",{"_index":828,"title":{},"body":{"index.html":{}}}],["foreign",{"_index":364,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{}}}],["found",{"_index":472,"title":{},"body":{"controllers/UrlsController.html":{},"miscellaneous/variables.html":{}}}],["found.'})@get(':hash",{"_index":434,"title":{},"body":{"controllers/UrlsController.html":{}}}],["function",{"_index":710,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":755,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["future",{"_index":833,"title":{},"body":{"index.html":{}}}],["generate",{"_index":816,"title":{},"body":{"index.html":{}}}],["generated",{"_index":825,"title":{},"body":{"index.html":{}}}],["generatehash",{"_index":500,"title":{},"body":{"injectables/UrlsService.html":{}}}],["generatehash(length",{"_index":538,"title":{},"body":{"injectables/UrlsService.html":{}}}],["generatehashpassword",{"_index":671,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["generatehashpassword(password",{"_index":678,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["generates",{"_index":540,"title":{},"body":{"injectables/UrlsService.html":{}}}],["get(':hash",{"_index":473,"title":{},"body":{"controllers/UrlsController.html":{}}}],["get('url/user/:id",{"_index":481,"title":{},"body":{"controllers/UrlsController.html":{}}}],["gethello",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getoriginalurlbyhash",{"_index":501,"title":{},"body":{"injectables/UrlsService.html":{}}}],["getoriginalurlbyhash(hash",{"_index":549,"title":{},"body":{"injectables/UrlsService.html":{}}}],["getting",{"_index":759,"title":{"index.html":{}},"body":{}}],["getvalidhash",{"_index":502,"title":{},"body":{"injectables/UrlsService.html":{}}}],["git",{"_index":790,"title":{},"body":{"index.html":{}}}],["given",{"_index":515,"title":{},"body":{"injectables/UrlsService.html":{}}}],["graph",{"_index":857,"title":{},"body":{"modules.html":{}}}],["guards/local",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["handler",{"_index":612,"title":{},"body":{"injectables/UrlsService.html":{}}}],["handler(url",{"_index":617,"title":{},"body":{"injectables/UrlsService.html":{}}}],["handlerequest",{"_index":323,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":328,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["hash",{"_index":220,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"index.html":{}}}],["hash.length",{"_index":596,"title":{},"body":{"injectables/UrlsService.html":{}}}],["hashexists",{"_index":609,"title":{},"body":{"injectables/UrlsService.html":{}}}],["hashinuse",{"_index":503,"title":{},"body":{"injectables/UrlsService.html":{}}}],["hashinuse(hash",{"_index":556,"title":{},"body":{"injectables/UrlsService.html":{}}}],["hashpassword",{"_index":677,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashvalid",{"_index":603,"title":{},"body":{"injectables/UrlsService.html":{}}}],["hashvalid.length",{"_index":604,"title":{},"body":{"injectables/UrlsService.html":{}}}],["haven't",{"_index":530,"title":{},"body":{"injectables/UrlsService.html":{}}}],["headers",{"_index":810,"title":{},"body":{"index.html":{}}}],["hello",{"_index":66,"title":{},"body":{"injectables/AppService.html":{}}}],["host",{"_index":277,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":289,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["http://localhost",{"_index":904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpexception",{"_index":276,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":267,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://github.com/jonlima/url",{"_index":792,"title":{},"body":{"index.html":{}}}],["https://google.com/very/long/url",{"_index":182,"title":{},"body":{"classes/CreateUrlDto.html":{}}}],["https://jonlima.github.io/url",{"_index":823,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":282,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":298,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["icreateuser",{"_index":308,"title":{"interfaces/ICreateUser.html":{}},"body":{"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["id",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUrlsTable1724011503102.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"classes/JwtStrategy.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["identifier",{"_index":524,"title":{},"body":{"injectables/UrlsService.html":{},"coverage.html":{}}}],["ignoreexpiration",{"_index":349,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["implements",{"_index":201,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/HttpExceptionFilter.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/Users1724086805338.html":{}}}],["import",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"classes/URLNotFoundException.html":{},"classes/UpdateUrlDto.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{}}}],["improvements",{"_index":835,"title":{},"body":{"index.html":{}}}],["including",{"_index":535,"title":{},"body":{"injectables/UrlsService.html":{}}}],["increaseclickcount",{"_index":504,"title":{},"body":{"injectables/UrlsService.html":{}}}],["increaseclickcount(urlid",{"_index":560,"title":{},"body":{"injectables/UrlsService.html":{}}}],["incremented",{"_index":565,"title":{},"body":{"injectables/UrlsService.html":{}}}],["increments",{"_index":562,"title":{},"body":{"injectables/UrlsService.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index('urls_hash_index",{"_index":415,"title":{},"body":{"entities/Url.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"classes/URLNotFoundException.html":{},"classes/UpdateUrlDto.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":534,"title":{},"body":{"injectables/UrlsService.html":{}}}],["inject",{"_index":577,"title":{},"body":{"injectables/UrlsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["inject(urls_repository",{"_index":584,"title":{},"body":{"injectables/UrlsService.html":{}}}],["inject(users_repository",{"_index":674,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectable",{"_index":62,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"injectables/UrlsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"injectables/UrlsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":63,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"injectables/UrlsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["install",{"_index":794,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":296,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{}}}],["int",{"_index":219,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{}}}],["integer",{"_index":411,"title":{},"body":{"entities/Url.html":{}}}],["interface",{"_index":307,"title":{"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{}},"body":{"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"coverage.html":{}}}],["interfaces",{"_index":309,"title":{},"body":{"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"overview.html":{}}}],["interfaces/user.interface",{"_index":673,"title":{},"body":{"injectables/UsersService.html":{}}}],["invalid",{"_index":447,"title":{},"body":{"controllers/UrlsController.html":{}}}],["ipayloaduser",{"_index":317,"title":{"interfaces/IPayloadUser.html":{}},"body":{"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"classes/JwtStrategy.html":{},"controllers/UrlsController.html":{},"coverage.html":{}}}],["isemail",{"_index":237,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["isinuse",{"_index":606,"title":{},"body":{"injectables/UrlsService.html":{}}}],["isnotempty",{"_index":187,"title":{},"body":{"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{}}}],["isnull",{"_index":581,"title":{},"body":{"injectables/UrlsService.html":{}}}],["isregisteredemail",{"_index":675,"title":{},"body":{"injectables/UsersService.html":{}}}],["isstring",{"_index":248,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["isstring({message",{"_index":240,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":184,"title":{},"body":{"classes/CreateUrlDto.html":{},"miscellaneous/variables.html":{}}}],["isvalid",{"_index":686,"title":{},"body":{"injectables/UsersService.html":{}}}],["item",{"_index":613,"title":{},"body":{"injectables/UrlsService.html":{}}}],["item['url",{"_index":615,"title":{},"body":{"injectables/UrlsService.html":{}}}],["iuser",{"_index":135,"title":{"interfaces/IUser.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"coverage.html":{}}}],["json.stringify(message",{"_index":300,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["jwt",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":318,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/UrlsController.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":700,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":347,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["jwtmodule",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":113,"title":{"classes/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"classes/JwtStrategy.html":{},"coverage.html":{}}}],["key",{"_index":217,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/Users1724086805338.html":{}}}],["legend",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Url.html":{},"injectables/UrlsService.html":{}}}],["length(8",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":866,"title":{},"body":{"properties.html":{}}}],["link",{"_index":356,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{},"coverage.html":{}}}],["linkusertourl1724098604809",{"_index":354,"title":{"classes/LinkUserToUrl1724098604809.html":{}},"body":{"classes/LinkUserToUrl1724098604809.html":{},"coverage.html":{}}}],["list",{"_index":532,"title":{},"body":{"injectables/UrlsService.html":{}}}],["load",{"_index":850,"title":{},"body":{"index.html":{}}}],["local",{"_index":377,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":90,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":105,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logger",{"_index":274,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["logger('urlsservice",{"_index":576,"title":{},"body":{"injectables/UrlsService.html":{}}}],["logger(httpexceptionfilter.name",{"_index":287,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["logger(urlscontroller.name",{"_index":464,"title":{},"body":{"controllers/UrlsController.html":{}}}],["logger(userscontroller.name",{"_index":649,"title":{},"body":{"controllers/UsersController.html":{}}}],["logger(usersservice.name",{"_index":666,"title":{},"body":{"injectables/UsersService.html":{}}}],["logging",{"_index":840,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["login(@request",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["logs",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{}}}],["marks",{"_index":568,"title":{},"body":{"injectables/UrlsService.html":{}}}],["matching",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"classes/URLNotFoundException.html":{},"classes/UpdateUrlDto.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":185,"title":{},"body":{"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{}}}],["messages",{"_index":192,"title":{},"body":{"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailIsRegisteredException.html":{},"classes/URLNotFoundException.html":{}}}],["messages.ts",{"_index":702,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":749,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["method",{"_index":809,"title":{},"body":{"index.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["migrationinterface",{"_index":202,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/Users1724086805338.html":{}}}],["migrations",{"_index":803,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["migrations/*.{js,ts",{"_index":891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":754,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":801,"title":{},"body":{"index.html":{}}}],["model",{"_index":831,"title":{},"body":{"index.html":{}}}],["module",{"_index":31,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":33,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["monitoring",{"_index":841,"title":{},"body":{"index.html":{}}}],["name",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["needs",{"_index":179,"title":{},"body":{"classes/CreateUrlDto.html":{}}}],["nestjs",{"_index":770,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"classes/URLNotFoundException.html":{},"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"injectables/UrlsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":729,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUrlDto.html":{},"controllers/UrlsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":286,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newurl",{"_index":591,"title":{},"body":{"injectables/UrlsService.html":{}}}],["newuser",{"_index":679,"title":{},"body":{"injectables/UsersService.html":{}}}],["nodejs",{"_index":768,"title":{},"body":{"index.html":{}}}],["none",{"_index":812,"title":{},"body":{"index.html":{}}}],["note",{"_index":799,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":261,"title":{},"body":{"classes/EmailIsRegisteredException.html":{},"classes/URLNotFoundException.html":{}}}],["now",{"_index":229,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"entities/Url.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{}}}],["npm",{"_index":796,"title":{},"body":{"index.html":{}}}],["null",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/UrlsService.html":{},"classes/Users1724086805338.html":{},"injectables/UsersService.html":{}}}],["nullable",{"_index":401,"title":{},"body":{"entities/Url.html":{},"entities/User.html":{}}}],["number",{"_index":312,"title":{},"body":{"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["number(process.env.database_port",{"_index":881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UrlsService.html":{},"miscellaneous/variables.html":{}}}],["occurred",{"_index":294,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["one",{"_index":523,"title":{},"body":{"injectables/UrlsService.html":{}}}],["online",{"_index":822,"title":{},"body":{"index.html":{}}}],["optional",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["optionalauthguard",{"_index":382,"title":{"injectables/OptionalAuthGuard.html":{}},"body":{"injectables/OptionalAuthGuard.html":{},"controllers/UrlsController.html":{},"coverage.html":{}}}],["original",{"_index":177,"title":{},"body":{"classes/CreateUrlDto.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"index.html":{}}}],["original_url",{"_index":223,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"entities/Url.html":{}}}],["originalurl",{"_index":175,"title":{},"body":{"classes/CreateUrlDto.html":{},"entities/Url.html":{},"injectables/UrlsService.html":{},"index.html":{}}}],["originalurl\",\"clickcount",{"_index":814,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UrlsService.html":{}}}],["out",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":859,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":724,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pagination",{"_index":847,"title":{},"body":{"index.html":{}}}],["param",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{}}}],["param('id",{"_index":488,"title":{},"body":{"controllers/UrlsController.html":{}}}],["parameters",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["part",{"_index":551,"title":{},"body":{"injectables/UrlsService.html":{}}}],["partialtype",{"_index":389,"title":{},"body":{"classes/UpdateUrlDto.html":{}}}],["partialtype(createurldto",{"_index":388,"title":{},"body":{"classes/UpdateUrlDto.html":{}}}],["pass",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":344,"title":{},"body":{"classes/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":341,"title":{},"body":{"classes/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":336,"title":{},"body":{"classes/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":380,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["password",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["passwordfield",{"_index":379,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["path",{"_index":305,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["payload",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtStrategy.html":{}}}],["payload.email",{"_index":353,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["payload.id",{"_index":352,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["pg",{"_index":746,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["pick",{"_index":311,"title":{},"body":{"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{}}}],["plan",{"_index":843,"title":{},"body":{"index.html":{}}}],["please",{"_index":912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["port",{"_index":880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["port_default",{"_index":712,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UrlsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["post('/login",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apioperation({summary",{"_index":640,"title":{},"body":{"controllers/UsersController.html":{}}}],["postgres",{"_index":878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["postgresql",{"_index":771,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["prerequisites",{"_index":775,"title":{},"body":{"index.html":{}}}],["primary",{"_index":216,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/Users1724086805338.html":{}}}],["primarygeneratedcolumn",{"_index":406,"title":{},"body":{"entities/Url.html":{},"entities/User.html":{}}}],["private",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process.env.api_domain}:${process.env.app_port}/${hash",{"_index":589,"title":{},"body":{"injectables/UrlsService.html":{}}}],["process.env.api_domain}:${process.env.app_port}/${item.hash",{"_index":614,"title":{},"body":{"injectables/UrlsService.html":{}}}],["process.env.database_host",{"_index":879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.database_name",{"_index":882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.database_password",{"_index":887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.database_schema",{"_index":884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.database_user",{"_index":886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.jwt_secret",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{},"classes/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["project",{"_index":774,"title":{},"body":{"index.html":{}}}],["promise",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalStrategy.html":{},"injectables/UrlsService.html":{},"classes/Users1724086805338.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":174,"title":{"properties.html":{}},"body":{"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"entities/Url.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["property",{"_index":193,"title":{},"body":{"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["provide",{"_index":893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":467,"title":{},"body":{"controllers/UrlsController.html":{}}}],["provided.'})@post",{"_index":448,"title":{},"body":{"controllers/UrlsController.html":{}}}],["providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["provides",{"_index":764,"title":{},"body":{"index.html":{}}}],["public",{"_index":203,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/Users1724086805338.html":{}}}],["put",{"_index":454,"title":{},"body":{"controllers/UrlsController.html":{},"index.html":{}}}],["put('url/:id",{"_index":487,"title":{},"body":{"controllers/UrlsController.html":{}}}],["queryrunner",{"_index":207,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/Users1724086805338.html":{}}}],["queryrunner.query",{"_index":212,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/Users1724086805338.html":{}}}],["queryrunner.query(`alter",{"_index":369,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{}}}],["random",{"_index":541,"title":{},"body":{"injectables/UrlsService.html":{}}}],["readonly",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["redirect",{"_index":420,"title":{},"body":{"controllers/UrlsController.html":{},"index.html":{}}}],["redirect(@param('hash",{"_index":474,"title":{},"body":{"controllers/UrlsController.html":{}}}],["redirect(hash",{"_index":427,"title":{},"body":{"controllers/UrlsController.html":{}}}],["references",{"_index":365,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{}}}],["reflect",{"_index":748,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":641,"title":{},"body":{"controllers/UsersController.html":{}}}],["registered",{"_index":908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["relationship",{"_index":829,"title":{},"body":{"index.html":{}}}],["remove",{"_index":421,"title":{},"body":{"controllers/UrlsController.html":{}}}],["remove(@param('id",{"_index":485,"title":{},"body":{"controllers/UrlsController.html":{}}}],["remove(id",{"_index":436,"title":{},"body":{"controllers/UrlsController.html":{}}}],["removebyuserid",{"_index":505,"title":{},"body":{"injectables/UrlsService.html":{}}}],["removebyuserid(userid",{"_index":566,"title":{},"body":{"injectables/UrlsService.html":{}}}],["removed",{"_index":569,"title":{},"body":{"injectables/UrlsService.html":{}}}],["repository",{"_index":508,"title":{},"body":{"injectables/UrlsService.html":{},"injectables/UsersService.html":{}}}],["req",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"controllers/UrlsController.html":{}}}],["req.user",{"_index":468,"title":{},"body":{"controllers/UrlsController.html":{}}}],["req.user?.id",{"_index":469,"title":{},"body":{"controllers/UrlsController.html":{}}}],["request",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/UrlsController.html":{},"index.html":{}}}],["request.url",{"_index":306,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["required",{"_index":911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res",{"_index":428,"title":{},"body":{"controllers/UrlsController.html":{}}}],["res.redirect(result.url",{"_index":478,"title":{},"body":{"controllers/UrlsController.html":{}}}],["reset",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":842,"title":{},"body":{"index.html":{}}}],["response",{"_index":283,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/UrlsController.html":{},"index.html":{}}}],["response.status(status).json",{"_index":301,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["result",{"_index":476,"title":{},"body":{"controllers/UrlsController.html":{}}}],["results",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"classes/URLNotFoundException.html":{},"classes/UpdateUrlDto.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":527,"title":{},"body":{"injectables/UrlsService.html":{}}}],["return",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["route",{"_index":808,"title":{},"body":{"index.html":{}}}],["routes",{"_index":807,"title":{},"body":{"index.html":{}}}],["run",{"_index":773,"title":{},"body":{"index.html":{}}}],["run:example",{"_index":797,"title":{},"body":{"index.html":{}}}],["running",{"_index":800,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":751,"title":{},"body":{"dependencies.html":{}}}],["salt_rounds",{"_index":722,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["saved",{"_index":826,"title":{},"body":{"index.html":{}}}],["saveduser",{"_index":681,"title":{},"body":{"injectables/UsersService.html":{}}}],["saveduser.createdat",{"_index":685,"title":{},"body":{"injectables/UsersService.html":{}}}],["saveduser.email",{"_index":684,"title":{},"body":{"injectables/UsersService.html":{}}}],["saveduser.id",{"_index":683,"title":{},"body":{"injectables/UsersService.html":{}}}],["schema",{"_index":883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scope",{"_index":834,"title":{},"body":{"index.html":{}}}],["secret",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":351,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["select",{"_index":611,"title":{},"body":{"injectables/UrlsService.html":{}}}],["serial",{"_index":215,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/Users1724086805338.html":{}}}],["service",{"_index":766,"title":{},"body":{"index.html":{}}}],["services",{"_index":836,"title":{},"body":{"index.html":{}}}],["set",{"_index":368,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{}}}],["short",{"_index":514,"title":{},"body":{"injectables/UrlsService.html":{}}}],["shorten",{"_index":422,"title":{},"body":{"controllers/UrlsController.html":{}}}],["shorten(createurldto",{"_index":439,"title":{},"body":{"controllers/UrlsController.html":{}}}],["shortene",{"_index":824,"title":{},"body":{"index.html":{}}}],["shortened",{"_index":180,"title":{},"body":{"classes/CreateUrlDto.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"index.html":{}}}],["shortener",{"_index":761,"title":{},"body":{"index.html":{}}}],["shortener.git",{"_index":793,"title":{},"body":{"index.html":{}}}],["shortening",{"_index":765,"title":{},"body":{"index.html":{}}}],["shorturl",{"_index":588,"title":{},"body":{"injectables/UrlsService.html":{},"index.html":{}}}],["signoptions",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"classes/URLNotFoundException.html":{},"classes/UpdateUrlDto.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["source.ts",{"_index":705,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["specific",{"_index":529,"title":{},"body":{"injectables/UrlsService.html":{}}}],["specified",{"_index":542,"title":{},"body":{"injectables/UrlsService.html":{}}}],["src/.../constants.ts",{"_index":869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../data",{"_index":870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.providers.ts",{"_index":871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../error",{"_index":872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":756,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../password.utils.ts",{"_index":757,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../url.providers.ts",{"_index":873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.providers.ts",{"_index":874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../validation",{"_index":875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":64,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":65,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:13",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:19",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:28",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:7",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/entities/auth.entity.ts",{"_index":70,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":319,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/UrlsController.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":370,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/optional",{"_index":383,"title":{},"body":{"injectables/OptionalAuthGuard.html":{},"controllers/UrlsController.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":335,"title":{},"body":{"classes/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:15",{"_index":340,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:5",{"_index":338,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":372,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:16",{"_index":376,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:7",{"_index":374,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/common/constants/constants",{"_index":668,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/common/constants/constants.ts",{"_index":697,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/constants/validation",{"_index":701,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/errors/custom",{"_index":256,"title":{},"body":{"classes/EmailIsRegisteredException.html":{},"classes/URLNotFoundException.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/common/errors/error",{"_index":703,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/filters/http",{"_index":268,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/database/data",{"_index":704,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/database.module",{"_index":497,"title":{},"body":{"modules/UrlsModule.html":{},"modules/UsersModule.html":{}}}],["src/database/database.module.ts",{"_index":252,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/database.providers.ts",{"_index":708,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/1724011503102",{"_index":197,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"coverage.html":{}}}],["src/database/migrations/1724086805338",{"_index":631,"title":{},"body":{"classes/Users1724086805338.html":{},"coverage.html":{}}}],["src/database/migrations/1724098604809",{"_index":355,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":709,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/urls/dto/create",{"_index":172,"title":{},"body":{"classes/CreateUrlDto.html":{},"coverage.html":{}}}],["src/urls/dto/update",{"_index":387,"title":{},"body":{"classes/UpdateUrlDto.html":{},"coverage.html":{}}}],["src/urls/entities/url.entity.ts",{"_index":393,"title":{},"body":{"entities/Url.html":{},"coverage.html":{}}}],["src/urls/entities/url.entity.ts:13",{"_index":407,"title":{},"body":{"entities/Url.html":{}}}],["src/urls/entities/url.entity.ts:16",{"_index":412,"title":{},"body":{"entities/Url.html":{}}}],["src/urls/entities/url.entity.ts:19",{"_index":405,"title":{},"body":{"entities/Url.html":{}}}],["src/urls/entities/url.entity.ts:22",{"_index":408,"title":{},"body":{"entities/Url.html":{}}}],["src/urls/entities/url.entity.ts:25",{"_index":398,"title":{},"body":{"entities/Url.html":{}}}],["src/urls/entities/url.entity.ts:32",{"_index":400,"title":{},"body":{"entities/Url.html":{}}}],["src/urls/entities/url.entity.ts:39",{"_index":409,"title":{},"body":{"entities/Url.html":{}}}],["src/urls/entities/url.entity.ts:46",{"_index":402,"title":{},"body":{"entities/Url.html":{}}}],["src/urls/entities/url.providers.ts",{"_index":714,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/urls/urls.controller.ts",{"_index":418,"title":{},"body":{"controllers/UrlsController.html":{},"coverage.html":{}}}],["src/urls/urls.controller.ts:42",{"_index":449,"title":{},"body":{"controllers/UrlsController.html":{}}}],["src/urls/urls.controller.ts:58",{"_index":435,"title":{},"body":{"controllers/UrlsController.html":{}}}],["src/urls/urls.controller.ts:75",{"_index":426,"title":{},"body":{"controllers/UrlsController.html":{}}}],["src/urls/urls.controller.ts:81",{"_index":438,"title":{},"body":{"controllers/UrlsController.html":{}}}],["src/urls/urls.controller.ts:88",{"_index":452,"title":{},"body":{"controllers/UrlsController.html":{}}}],["src/urls/urls.module.ts",{"_index":493,"title":{},"body":{"modules/UrlsModule.html":{}}}],["src/urls/urls.service.ts",{"_index":498,"title":{},"body":{"injectables/UrlsService.html":{},"coverage.html":{}}}],["src/urls/urls.service.ts:107",{"_index":552,"title":{},"body":{"injectables/UrlsService.html":{}}}],["src/urls/urls.service.ts:128",{"_index":539,"title":{},"body":{"injectables/UrlsService.html":{}}}],["src/urls/urls.service.ts:14",{"_index":509,"title":{},"body":{"injectables/UrlsService.html":{}}}],["src/urls/urls.service.ts:147",{"_index":557,"title":{},"body":{"injectables/UrlsService.html":{}}}],["src/urls/urls.service.ts:162",{"_index":526,"title":{},"body":{"injectables/UrlsService.html":{}}}],["src/urls/urls.service.ts:185",{"_index":522,"title":{},"body":{"injectables/UrlsService.html":{}}}],["src/urls/urls.service.ts:223",{"_index":567,"title":{},"body":{"injectables/UrlsService.html":{}}}],["src/urls/urls.service.ts:239",{"_index":571,"title":{},"body":{"injectables/UrlsService.html":{}}}],["src/urls/urls.service.ts:28",{"_index":512,"title":{},"body":{"injectables/UrlsService.html":{}}}],["src/urls/urls.service.ts:65",{"_index":550,"title":{},"body":{"injectables/UrlsService.html":{}}}],["src/urls/urls.service.ts:89",{"_index":561,"title":{},"body":{"injectables/UrlsService.html":{}}}],["src/users/dto/create",{"_index":234,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":622,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:11",{"_index":626,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:14",{"_index":625,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:17",{"_index":627,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:24",{"_index":623,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:31",{"_index":628,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:38",{"_index":624,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.providers.ts",{"_index":718,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/interfaces/user.interface",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"controllers/UrlsController.html":{}}}],["src/users/interfaces/user.interface.ts",{"_index":310,"title":{},"body":{"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"coverage.html":{}}}],["src/users/users.controller.ts",{"_index":638,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:17",{"_index":644,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":656,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/users.service.ts",{"_index":660,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:15",{"_index":662,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:22",{"_index":664,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:50",{"_index":665,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/password.utils",{"_index":672,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/password.utils.ts",{"_index":721,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["stack",{"_index":767,"title":{},"body":{"index.html":{}}}],["start:docker",{"_index":798,"title":{},"body":{"index.html":{}}}],["started",{"_index":760,"title":{"index.html":{}},"body":{}}],["statements",{"_index":691,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":295,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/UrlsController.html":{},"controllers/UsersController.html":{}}}],["statuscode",{"_index":302,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["strategies/jwt.strategy",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":343,"title":{},"body":{"classes/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["string})@apiresponse({status",{"_index":445,"title":{},"body":{"controllers/UrlsController.html":{}}}],["string})@isnotempty({message",{"_index":183,"title":{},"body":{"classes/CreateUrlDto.html":{}}}],["successfully",{"_index":444,"title":{},"body":{"controllers/UrlsController.html":{}}}],["summary",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UrlsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":346,"title":{},"body":{"classes/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super(error_messages.email_is_registered",{"_index":266,"title":{},"body":{"classes/EmailIsRegisteredException.html":{},"classes/URLNotFoundException.html":{}}}],["super(error_messages.url_not_found",{"_index":265,"title":{},"body":{"classes/EmailIsRegisteredException.html":{},"classes/URLNotFoundException.html":{}}}],["super.canactivate(context",{"_index":333,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalAuthGuard.html":{}}}],["support",{"_index":854,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":855,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":817,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":213,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/Users1724086805338.html":{},"coverage.html":{}}}],["table.ts",{"_index":200,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"coverage.html":{}}}],["table.ts:19",{"_index":208,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{}}}],["table.ts:4",{"_index":210,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{}}}],["tables",{"_index":804,"title":{},"body":{"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["this._jwtservice.sign(payload",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["this._urlrepository.create",{"_index":592,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this._urlrepository.find",{"_index":610,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this._urlrepository.findone",{"_index":587,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this._urlrepository.findoneorfail",{"_index":600,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this._urlrepository.findoneorfail(where",{"_index":597,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this._urlrepository.preload",{"_index":620,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this._urlrepository.save(newurl",{"_index":594,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this._urlrepository.save(updatebody",{"_index":621,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this._urlrepository.save(url",{"_index":602,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this._urlsservice.create(createurldto",{"_index":471,"title":{},"body":{"controllers/UrlsController.html":{}}}],["this._urlsservice.createbyuser(userid",{"_index":470,"title":{},"body":{"controllers/UrlsController.html":{}}}],["this._urlsservice.findbyuserid(userid",{"_index":483,"title":{},"body":{"controllers/UrlsController.html":{}}}],["this._urlsservice.getoriginalurlbyhash(hash",{"_index":477,"title":{},"body":{"controllers/UrlsController.html":{}}}],["this._urlsservice.removebyuserid(req.user.id",{"_index":486,"title":{},"body":{"controllers/UrlsController.html":{}}}],["this._urlsservice.updatebyuserid(req.user.id",{"_index":489,"title":{},"body":{"controllers/UrlsController.html":{}}}],["this._userrepository.create",{"_index":680,"title":{},"body":{"injectables/UsersService.html":{}}}],["this._userrepository.findone",{"_index":676,"title":{},"body":{"injectables/UsersService.html":{}}}],["this._userrepository.save(newuser",{"_index":682,"title":{},"body":{"injectables/UsersService.html":{}}}],["this._usersservice.validateuser(email",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.appservice.gethello",{"_index":28,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(req.user",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":381,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.generatehash",{"_index":605,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this.getvalidhash",{"_index":590,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this.hashinuse(hash",{"_index":607,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this.increaseclickcount(url.id",{"_index":598,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this.logger.error",{"_index":299,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["this.logger.error(error",{"_index":479,"title":{},"body":{"controllers/UrlsController.html":{},"injectables/UrlsService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":651,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":334,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"injectables/UsersService.html":{}}}],["timestamp",{"_index":303,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/UrlsService.html":{}}}],["timestamptz",{"_index":228,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"entities/Url.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{}}}],["token",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["tracking",{"_index":844,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":575,"title":{},"body":{"injectables/UrlsService.html":{}}}],["transformer",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"entities/Url.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":475,"title":{},"body":{"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"injectables/UsersService.html":{}}}],["type",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":211,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"entities/Url.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormdatasource",{"_index":707,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":331,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":521,"title":{},"body":{"injectables/UrlsService.html":{},"injectables/UsersService.html":{}}}],["unexpected",{"_index":293,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["unique",{"_index":222,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"entities/Url.html":{},"classes/Users1724086805338.html":{}}}],["unknown",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UrlsController.html":{}}}],["unlicensed",{"_index":867,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":555,"title":{},"body":{"injectables/UrlsService.html":{}}}],["up",{"_index":205,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/Users1724086805338.html":{}}}],["up(queryrunner",{"_index":209,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/Users1724086805338.html":{}}}],["update",{"_index":423,"title":{},"body":{"controllers/UrlsController.html":{},"injectables/UrlsService.html":{}}}],["update(id",{"_index":450,"title":{},"body":{"controllers/UrlsController.html":{}}}],["updateat",{"_index":315,"title":{},"body":{"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{}}}],["updatebody",{"_index":619,"title":{},"body":{"injectables/UrlsService.html":{}}}],["updatebyuserid",{"_index":506,"title":{},"body":{"injectables/UrlsService.html":{}}}],["updatebyuserid(userid",{"_index":570,"title":{},"body":{"injectables/UrlsService.html":{}}}],["updated",{"_index":573,"title":{},"body":{"injectables/UrlsService.html":{}}}],["updated_at",{"_index":230,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"entities/Url.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{}}}],["updatedat",{"_index":395,"title":{},"body":{"entities/Url.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"index.html":{}}}],["updates",{"_index":572,"title":{},"body":{"injectables/UrlsService.html":{}}}],["updateurldto",{"_index":386,"title":{"classes/UpdateUrlDto.html":{}},"body":{"classes/UpdateUrlDto.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"coverage.html":{}}}],["url",{"_index":178,"title":{"entities/Url.html":{}},"body":{"classes/CreateUrlDto.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["url's",{"_index":525,"title":{},"body":{"injectables/UrlsService.html":{}}}],["url'})@apibody({type",{"_index":441,"title":{},"body":{"controllers/UrlsController.html":{}}}],["url'})@apiresponse({status",{"_index":430,"title":{},"body":{"controllers/UrlsController.html":{}}}],["url.'})@apiresponse({status",{"_index":432,"title":{},"body":{"controllers/UrlsController.html":{}}}],["url.clickcount",{"_index":601,"title":{},"body":{"injectables/UrlsService.html":{}}}],["url.deletedat",{"_index":618,"title":{},"body":{"injectables/UrlsService.html":{}}}],["url.dto",{"_index":390,"title":{},"body":{"classes/UpdateUrlDto.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{}}}],["url.dto.ts",{"_index":173,"title":{},"body":{"classes/CreateUrlDto.html":{},"classes/UpdateUrlDto.html":{},"coverage.html":{}}}],["url.dto.ts:15",{"_index":186,"title":{},"body":{"classes/CreateUrlDto.html":{}}}],["url.originalurl",{"_index":599,"title":{},"body":{"injectables/UrlsService.html":{}}}],["url.ts",{"_index":357,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{},"coverage.html":{}}}],["url.ts:10",{"_index":358,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{}}}],["url.ts:4",{"_index":359,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{}}}],["url/:id",{"_index":815,"title":{},"body":{"index.html":{}}}],["url/user/:id",{"_index":813,"title":{},"body":{"index.html":{}}}],["url_not_found",{"_index":906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urlexists",{"_index":586,"title":{},"body":{"injectables/UrlsService.html":{}}}],["urlid",{"_index":564,"title":{},"body":{"injectables/UrlsService.html":{}}}],["urlnotfoundexception",{"_index":264,"title":{"classes/URLNotFoundException.html":{}},"body":{"classes/EmailIsRegisteredException.html":{},"classes/URLNotFoundException.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"coverage.html":{}}}],["urlproviders",{"_index":495,"title":{},"body":{"modules/UrlsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["urls",{"_index":199,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/UrlsService.html":{},"coverage.html":{},"index.html":{}}}],["urls.controller",{"_index":494,"title":{},"body":{"modules/UrlsModule.html":{}}}],["urls.foreach((url",{"_index":616,"title":{},"body":{"injectables/UrlsService.html":{}}}],["urls.service",{"_index":459,"title":{},"body":{"controllers/UrlsController.html":{},"modules/UrlsModule.html":{}}}],["urls/urls.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["urls_repository",{"_index":579,"title":{},"body":{"injectables/UrlsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["urlsaved",{"_index":593,"title":{},"body":{"injectables/UrlsService.html":{}}}],["urlsaved.id",{"_index":595,"title":{},"body":{"injectables/UrlsService.html":{}}}],["urlscontroller",{"_index":417,"title":{"controllers/UrlsController.html":{}},"body":{"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"coverage.html":{}}}],["urlsmodule",{"_index":45,"title":{"modules/UrlsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UrlsModule.html":{},"modules.html":{},"overview.html":{}}}],["urlsservice",{"_index":458,"title":{"injectables/UrlsService.html":{}},"body":{"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"injectables/UrlsService.html":{},"coverage.html":{},"overview.html":{}}}],["use",{"_index":554,"title":{},"body":{"injectables/UrlsService.html":{}}}],["usefactory",{"_index":894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UrlsController.html":{}}}],["useguards(jwtauthguard",{"_index":480,"title":{},"body":{"controllers/UrlsController.html":{}}}],["useguards(jwtauthguard)@delete('url/:id",{"_index":437,"title":{},"body":{"controllers/UrlsController.html":{}}}],["useguards(jwtauthguard)@get('url/user/:id",{"_index":425,"title":{},"body":{"controllers/UrlsController.html":{}}}],["useguards(jwtauthguard)@put('url/:id')@apioperation({summary",{"_index":451,"title":{},"body":{"controllers/UrlsController.html":{}}}],["useguards(localauthguard",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('/login')@apioperation({summary",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(optionalauthguard",{"_index":466,"title":{},"body":{"controllers/UrlsController.html":{}}}],["useguards(optionalauthguard)@post()@apioperation({summary",{"_index":440,"title":{},"body":{"controllers/UrlsController.html":{}}}],["user",{"_index":138,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalStrategy.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UrlsService.html":{}}}],["user'})@apibody({type",{"_index":642,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.dto",{"_index":646,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":235,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":238,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:23",{"_index":247,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":688,"title":{},"body":{"injectables/UsersService.html":{}}}],["user_id",{"_index":218,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"entities/Url.html":{}}}],["userid",{"_index":396,"title":{},"body":{"entities/Url.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{}}}],["username",{"_index":885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usernamefield",{"_index":378,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userproviders",{"_index":658,"title":{},"body":{"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":635,"title":{},"body":{"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["users\"(\"id",{"_index":366,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{}}}],["users.controller",{"_index":657,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":645,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users.ts",{"_index":632,"title":{},"body":{"classes/Users1724086805338.html":{},"coverage.html":{}}}],["users.ts:17",{"_index":633,"title":{},"body":{"classes/Users1724086805338.html":{}}}],["users.ts:4",{"_index":634,"title":{},"body":{"classes/Users1724086805338.html":{}}}],["users/users.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["users1724086805338",{"_index":630,"title":{"classes/Users1724086805338.html":{}},"body":{"classes/Users1724086805338.html":{},"coverage.html":{}}}],["users_repository",{"_index":667,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":637,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":46,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":128,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":543,"title":{},"body":{"injectables/UrlsService.html":{},"index.html":{}}}],["valid",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UrlsService.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":337,"title":{},"body":{"classes/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":339,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["validate(req",{"_index":375,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validates",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["validateuser(email",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["validationmessages",{"_index":190,"title":{},"body":{"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["validationmessages.isstring(property",{"_index":251,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validationmessages.isurl(property",{"_index":195,"title":{},"body":{"classes/CreateUrlDto.html":{}}}],["validationmessages.required(property",{"_index":194,"title":{},"body":{"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{}}}],["validator",{"_index":188,"title":{},"body":{"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":545,"title":{},"body":{"injectables/UrlsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":221,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{}}}],["varchar(255",{"_index":636,"title":{},"body":{"classes/Users1724086805338.html":{}}}],["variable",{"_index":698,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":778,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":519,"title":{},"body":{"injectables/UrlsService.html":{},"properties.html":{}}}],["void",{"_index":281,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["world",{"_index":67,"title":{},"body":{"injectables/AppService.html":{}}}],["worry",{"_index":806,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /app\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller('/app')\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nUrlsModule\n\nUrlsModule\n\nAppModule -->\n\nUrlsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            UrlsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { UrlsModule } from './urls/urls.module';\nimport { DatabaseModule } from './database/database.module';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [\n    DatabaseModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    UrlsModule,\n    UsersModule,\n    AuthModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/auth.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Auth {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('/login')@ApiOperation({summary: 'Login (email, password)'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Request, UseGuards } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\nimport { ApiOperation } from '@nestjs/swagger';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @UseGuards(LocalAuthGuard)\n  @Post('/login')\n  @ApiOperation({ summary: 'Login (email, password)' })\n  async login(@Request() req) {\n    return this.authService.login(req.user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from 'src/users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    ConfigModule.forRoot({ isGlobal: true, envFilePath: '.env' }),\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: '10m' },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_usersService: UsersService, _jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Logs in a user and returns an access token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user object containing user details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { access_token: string; }\n\n                        \n                            \n                                \nAn object containing the JWT access token.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:19\n                        \n                    \n\n\n            \n                \n                        Validates a user's email and password.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user's email address.\n\n\n                                            \n                                        \n                                        \n                                                pass\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user's password.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe user object if valid credentials; otherwise null.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/users.service';\nimport { IUser } from 'src/users/interfaces/user.interface';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private _usersService: UsersService,\n    private _jwtService: JwtService,\n  ) {}\n\n  /**\n   * Validates a user's email and password.\n   * @param {string} email - The user's email address.\n   * @param {string} pass - The user's password.\n   * @returns {Promise} - The user object if valid credentials; otherwise null.\n   */\n  async validateUser(email: string, pass: string): Promise {\n    return await this._usersService.validateUser(email, pass);\n  }\n\n  /**\n   * Logs in a user and returns an access token.\n   * @param {IUser} user - The user object containing user details.\n   * @returns {{ access_token: string }} - An object containing the JWT access token.\n   */\n  login(user: IUser) {\n    const payload = { email: user.email, id: user.id };\n    return {\n      access_token: `Bearer ${this._jwtService.sign(payload)}`,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUrlDto.html":{"url":"classes/CreateUrlDto.html","title":"class - CreateUrlDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUrlDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/urls/dto/create-url.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                originalUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        originalUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The original URL that needs to be shortened', example: 'https://google.com/very/long/url', type: String})@IsNotEmpty({message:  => })@IsUrl({}, {message:  => })\n                        \n                    \n                \n                    \n                        \n                                Defined in src/urls/dto/create-url.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsUrl } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { ValidationMessages } from '../../common/constants/validation-messages';\n\nexport class CreateUrlDto {\n  @ApiProperty({\n    description: 'The original URL that needs to be shortened',\n    example: 'https://google.com/very/long/url',\n    type: String,\n  })\n  @IsNotEmpty({\n    message: ({ property }) => ValidationMessages.required(property),\n  })\n  @IsUrl({}, { message: ({ property }) => ValidationMessages.isUrl(property) })\n  originalUrl: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUrlsTable1724011503102.html":{"url":"classes/CreateUrlsTable1724011503102.html","title":"class - CreateUrlsTable1724011503102","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUrlsTable1724011503102\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1724011503102-create-urls-table.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1724011503102-create-urls-table.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1724011503102-create-urls-table.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class CreateUrlsTable1724011503102 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`\n            CREATE TABLE IF NOT EXISTS urls (\n                id SERIAL PRIMARY KEY,\n                user_id INT NULL, \n                hash VARCHAR UNIQUE NOT NULL,\n                original_url VARCHAR NOT NULL,\n                click_count INT NOT NULL DEFAULT 0,\n                created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n                updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n                deleted_at TIMESTAMPTZ\n            )\n        `);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`\n            DROP TABLE IF EXISTS \"urls\"; \n        `);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email to user', example: 'example@example.com'})@IsNotEmpty({message:  => })@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Password to user', example: 'abcd1234'})@IsNotEmpty({message:  => })@IsString({message:  => })@Length(8, 16, {message: 'Password length should be between 8 and 16 characters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsEmail, IsString, Length } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { ValidationMessages } from '../../common/constants/validation-messages';\n\nexport class CreateUserDto {\n  @ApiProperty({ description: 'Email to user', example: 'example@example.com' })\n  @IsNotEmpty({\n    message: ({ property }) => ValidationMessages.required(property),\n  })\n  @IsEmail()\n  readonly email: string;\n\n  @ApiProperty({ description: 'Password to user', example: 'abcd1234' })\n  @IsNotEmpty({\n    message: ({ property }) => ValidationMessages.required(property),\n  })\n  @IsString({\n    message: ({ property }) => ValidationMessages.isString(property),\n  })\n  @Length(8, 16, {\n    message: 'Password length should be between 8 and 16 characters',\n  })\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { databaseProviders } from './database.providers';\n\n@Module({\n  providers: [...databaseProviders],\n  exports: [...databaseProviders],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailIsRegisteredException.html":{"url":"classes/EmailIsRegisteredException.html","title":"class - EmailIsRegisteredException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailIsRegisteredException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors/custom-errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ConflictException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/errors/custom-errors.ts:10\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ConflictException, NotFoundException } from '@nestjs/common';\nimport { ERROR_MESSAGES } from './error-messages';\n\nexport class URLNotFoundException extends NotFoundException {\n  constructor() {\n    super(ERROR_MESSAGES.URL_NOT_FOUND);\n  }\n}\n\nexport class EmailIsRegisteredException extends ConflictException {\n  constructor() {\n    super(ERROR_MESSAGES.EMAIL_IS_REGISTERED);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger)\n                    \n                \n                        \n                            \n                                Defined in src/common/filters/http-exception.filter.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/http-exception.filter.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  constructor(private readonly logger = new Logger(HttpExceptionFilter.name)) {}\n\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const message =\n      exception.getResponse()['message'] || 'Unexpected error occurred';\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    this.logger.error(\n      `Status: ${status}, Error Message: ${JSON.stringify(message)}`,\n    );\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      message,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICreateUser.html":{"url":"interfaces/ICreateUser.html","title":"interface - ICreateUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICreateUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/user.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Pick\n            \n\n\n\n\n    \n\n\n    \n        export interface IUser {\n  id?: number;\n  email: string;\n  password: string;\n  createdAt: Date;\n  updateAt: Date;\n  deletedAt: Date;\n}\n\nexport interface ICreateUser\n  extends Pick {}\n\nexport interface IPayloadUser extends Pick {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPayloadUser.html":{"url":"interfaces/IPayloadUser.html","title":"interface - IPayloadUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPayloadUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/user.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Pick\n            \n\n\n\n\n    \n\n\n    \n        export interface IUser {\n  id?: number;\n  email: string;\n  password: string;\n  createdAt: Date;\n  updateAt: Date;\n  deletedAt: Date;\n}\n\nexport interface ICreateUser\n  extends Pick {}\n\nexport interface IPayloadUser extends Pick {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUser.html":{"url":"interfaces/IUser.html","title":"interface - IUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/user.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            deletedAt\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            updateAt\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deletedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deletedAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IUser {\n  id?: number;\n  email: string;\n  password: string;\n  createdAt: Date;\n  updateAt: Date;\n  deletedAt: Date;\n}\n\nexport interface ICreateUser\n  extends Pick {}\n\nexport interface IPayloadUser extends Pick {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/jwt-auth.guard.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/jwt-auth.guard.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  canActivate(context: ExecutionContext) {\n    return super.canActivate(context);\n  }\n\n  handleRequest(err, user) {\n    if (err || !user) {\n      throw err || new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtStrategy.html":{"url":"classes/JwtStrategy.html","title":"class - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:5\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt.strategy.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { IPayloadUser } from 'src/users/interfaces/user.interface';\n\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    console.log(process.env.JWT_SECRET);\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  async validate(payload: any): Promise {\n    return { id: payload.id, email: payload.email };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LinkUserToUrl1724098604809.html":{"url":"classes/LinkUserToUrl1724098604809.html","title":"class - LinkUserToUrl1724098604809","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LinkUserToUrl1724098604809\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1724098604809-link-user-to-url.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1724098604809-link-user-to-url.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1724098604809-link-user-to-url.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class LinkUserToUrl1724098604809 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `ALTER TABLE \"urls\" ADD CONSTRAINT \"FK_user_url\" FOREIGN KEY (\"user_id\") REFERENCES \"users\"(\"id\") ON DELETE SET NULL`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`ALTER TABLE \"urls\" DROP CONSTRAINT \"FK_user_url\"`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard('local')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(req: any, email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/local.strategy.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({\n      usernameField: 'email',\n      passwordField: 'password',\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(req: any, email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OptionalAuthGuard.html":{"url":"injectables/OptionalAuthGuard.html","title":"injectable - OptionalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OptionalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/optional-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/optional-auth.guard.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class OptionalAuthGuard extends AuthGuard('jwt') {\n  canActivate(context: ExecutionContext) {\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/URLNotFoundException.html":{"url":"classes/URLNotFoundException.html","title":"class - URLNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  URLNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors/custom-errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/errors/custom-errors.ts:4\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ConflictException, NotFoundException } from '@nestjs/common';\nimport { ERROR_MESSAGES } from './error-messages';\n\nexport class URLNotFoundException extends NotFoundException {\n  constructor() {\n    super(ERROR_MESSAGES.URL_NOT_FOUND);\n  }\n}\n\nexport class EmailIsRegisteredException extends ConflictException {\n  constructor() {\n    super(ERROR_MESSAGES.EMAIL_IS_REGISTERED);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUrlDto.html":{"url":"classes/UpdateUrlDto.html","title":"class - UpdateUrlDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUrlDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/urls/dto/update-url.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUrlDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUrlDto } from './create-url.dto';\n\nexport class UpdateUrlDto extends PartialType(CreateUrlDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Url.html":{"url":"entities/Url.html","title":"entity - Url","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Url\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/urls/entities/url.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                clickCount\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                hash\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                originalUrl\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        clickCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'click_count'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/urls/entities/url.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamptz', name: 'created_at', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/urls/entities/url.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamptz', name: 'deleted_at', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/urls/entities/url.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 10, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/urls/entities/url.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/urls/entities/url.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        originalUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'original_url'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/urls/entities/url.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamptz', name: 'updated_at', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/urls/entities/url.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'integer', nullable: true, name: 'user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/urls/entities/url.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  Index,\n} from 'typeorm';\n\n@Index('urls_hash_index', ['hash'], { unique: true })\n@Entity('urls')\nexport class Url {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'integer', nullable: true, name: 'user_id' })\n  userId: number;\n\n  @Column({ length: 10, unique: true })\n  hash: string;\n\n  @Column({ name: 'original_url' })\n  originalUrl: string;\n\n  @Column({ name: 'click_count' })\n  clickCount: number;\n\n  @CreateDateColumn({\n    type: 'timestamptz',\n    name: 'created_at',\n    default: () => 'now()',\n  })\n  createdAt: Date;\n\n  @CreateDateColumn({\n    type: 'timestamptz',\n    name: 'updated_at',\n    default: () => 'now()',\n  })\n  updatedAt: Date;\n\n  @CreateDateColumn({\n    type: 'timestamptz',\n    name: 'deleted_at',\n    nullable: true,\n  })\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UrlsController.html":{"url":"controllers/UrlsController.html","title":"controller - UrlsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UrlsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/urls/urls.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                findByUserId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                redirect\n                            \n                            \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                shorten\n                            \n                            \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUserId(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('url/user/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/urls/urls.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        redirect\n                        \n                    \n                \n            \n            \n                \n                        \n                    redirect(hash: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Redirect to the original URL'})@ApiResponse({status: 200, description: 'Redirect to the original URL.'})@ApiResponse({status: 404, description: 'URL not found.'})@Get(':hash')\n                \n            \n\n                    \n                        \n                            Defined in src/urls/urls.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                hash\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete('url/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/urls/urls.controller.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        shorten\n                        \n                    \n                \n            \n            \n                \n                        \n                    shorten(createUrlDto: CreateUrlDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(OptionalAuthGuard)@Post()@ApiOperation({summary: 'Create a shortened URL'})@ApiBody({type: CreateUrlDto})@ApiResponse({status: 201, description: 'The URL has been successfully shortened.', type: String})@ApiResponse({status: 400, description: 'Invalid URL provided.'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/urls/urls.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUrlDto\n                                            \n                                                            CreateUrlDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateUrlDto: UpdateUrlDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Put('url/:id')@ApiOperation({summary: 'Update url by id'})\n                \n            \n\n                    \n                        \n                            Defined in src/urls/urls.controller.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUrlDto\n                                            \n                                                            UpdateUrlDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Logger,\n  Res,\n  UseGuards,\n  Req,\n  Delete,\n  Put,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody, ApiResponse } from '@nestjs/swagger';\nimport { UrlsService } from './urls.service';\nimport { CreateUrlDto } from './dto/create-url.dto';\nimport { URLNotFoundException } from 'src/common/errors/custom-errors';\nimport { Response, Request } from 'express';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\nimport { OptionalAuthGuard } from 'src/auth/guards/optional-auth.guard';\nimport { IPayloadUser } from 'src/users/interfaces/user.interface';\nimport { UpdateUrlDto } from './dto/update-url.dto';\n\n@ApiTags('URLs')\n@Controller('')\nexport class UrlsController {\n  private logger = new Logger(UrlsController.name);\n\n  constructor(private readonly _urlsService: UrlsService) {}\n\n  @UseGuards(OptionalAuthGuard)\n  @Post()\n  @ApiOperation({ summary: 'Create a shortened URL' })\n  @ApiBody({ type: CreateUrlDto })\n  @ApiResponse({\n    status: 201,\n    description: 'The URL has been successfully shortened.',\n    type: String,\n  })\n  @ApiResponse({ status: 400, description: 'Invalid URL provided.' })\n  @Post()\n  shorten(\n    @Body() createUrlDto: CreateUrlDto,\n    @Req() req: Request & { user?: IPayloadUser },\n  ) {\n    if (req.user) {\n      const userId = req.user?.id;\n      return this._urlsService.createByUser(userId, createUrlDto);\n    } else {\n      return this._urlsService.create(createUrlDto);\n    }\n  }\n\n  @ApiOperation({ summary: 'Redirect to the original URL' })\n  @ApiResponse({ status: 200, description: 'Redirect to the original URL.' })\n  @ApiResponse({ status: 404, description: 'URL not found.' })\n  @Get(':hash')\n  async redirect(@Param('hash') hash: string, @Res() res: Response) {\n    try {\n      const result = await this._urlsService.getOriginalUrlByHash(hash);\n      return res.redirect(result.url);\n    } catch (error) {\n      this.logger.error(error);\n\n      if (error instanceof URLNotFoundException) {\n        throw new URLNotFoundException();\n      }\n\n      throw error;\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('url/user/:id')\n  async findByUserId(@Param('id') userId: number) {\n    return await this._urlsService.findByUserId(userId);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete('url/:id')\n  remove(@Param('id') id: number, @Req() req) {\n    return this._urlsService.removeByUserId(req.user.id, id);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Put('url/:id')\n  @ApiOperation({ summary: 'Update url by id' })\n  update(\n    @Param('id') id: number,\n    @Body() updateUrlDto: UpdateUrlDto,\n    @Req() req,\n  ) {\n    return this._urlsService.updateByUserId(req.user.id, id, updateUrlDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UrlsModule.html":{"url":"modules/UrlsModule.html","title":"module - UrlsModule","body":"\n                   \n\n\n\n\n    Modules\n    UrlsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UrlsModule\n\n\n\ncluster_UrlsModule_imports\n\n\n\ncluster_UrlsModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nUrlsModule\n\nUrlsModule\n\nUrlsModule -->\n\nDatabaseModule->UrlsModule\n\n\n\n\n\nUrlsService\n\nUrlsService\n\nUrlsModule -->\n\nUrlsService->UrlsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/urls/urls.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UrlsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UrlsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UrlsService } from './urls.service';\nimport { UrlsController } from './urls.controller';\nimport { urlProviders } from './entities/url.providers';\nimport { DatabaseModule } from 'src/database/database.module';\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [UrlsController],\n  providers: [...urlProviders, UrlsService],\n})\nexport class UrlsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UrlsService.html":{"url":"injectables/UrlsService.html","title":"injectable - UrlsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UrlsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/urls/urls.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createByUser\n                            \n                            \n                                    Async\n                                findByUserId\n                            \n                            \n                                generateHash\n                            \n                            \n                                    Async\n                                getOriginalUrlByHash\n                            \n                            \n                                    Async\n                                getValidHash\n                            \n                            \n                                    Async\n                                hashInUse\n                            \n                            \n                                    Async\n                                increaseClickCount\n                            \n                            \n                                    Async\n                                removeByUserId\n                            \n                            \n                                    Async\n                                updateByUserId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_urlRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/urls/urls.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _urlRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(undefined: CreateUrlDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/urls/urls.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Creates a short URL from a given original URL. If the URL already exists in the database,\nit returns the existing shortened version.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            CreateUrlDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nAn object containing the ID and the shortened URL.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createByUser(userId: number, undefined: CreateUrlDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/urls/urls.service.ts:185\n                        \n                    \n\n\n            \n                \n                        Creates a new URL for a user. If the URL already exists, it returns the existing one.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user's identifier.\n\n\n                                            \n                                        \n                                        \n                                            \n                                                            CreateUrlDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe new URL's ID and short URL.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUserId(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/urls/urls.service.ts:162\n                        \n                    \n\n\n            \n                \n                        Retrieves all URLs associated with a specific user that haven't been deleted.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user's identifier.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nA list of URLs with detailed information including ID, hash, original URL, click count, and update timestamp.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateHash\n                        \n                    \n                \n            \n            \n                \ngenerateHash(length: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/urls/urls.service.ts:128\n                        \n                    \n\n\n            \n                \n                        Generates a random hash of a specified length using base62 characters.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                length\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    6\n                                            \n\n                                            \n                                                    \nThe desired length of the hash. Defaults to 6 if not specified.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nA random hash.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOriginalUrlByHash\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOriginalUrlByHash(hash: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/urls/urls.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Retrieves the original URL associated with a given hash.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                hash\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe hash part of the short URL.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nAn object containing the original URL.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getValidHash\n                        \n                    \n                \n            \n            \n                \n                        \n                    getValidHash()\n                \n            \n\n\n                    \n                        \n                            Defined in src/urls/urls.service.ts:107\n                        \n                    \n\n\n            \n                \n                        Generates a valid hash that is not currently in use.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nA valid unused hash.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hashInUse\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashInUse(hash: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/urls/urls.service.ts:147\n                        \n                    \n\n\n            \n                \n                        Checks if a given hash is already in use.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                hash\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe hash to check.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nTrue if the hash is in use, otherwise false.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        increaseClickCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    increaseClickCount(urlId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/urls/urls.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Increments the click count of a URL by 1.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                urlId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the URL to be incremented.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeByUserId(userId: number, id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/urls/urls.service.ts:223\n                        \n                    \n\n\n            \n                \n                        Marks a URL as deleted for a specific user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user's identifier.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe URL's identifier to be removed.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateByUserId(userId: number, id: number, updateUrlDto: UpdateUrlDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/urls/urls.service.ts:239\n                        \n                    \n\n\n            \n                \n                        Updates a URL for a specific user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user's identifier.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe URL's identifier to be updated.\n\n\n                                            \n                                        \n                                        \n                                                updateUrlDto\n                                            \n                                                            UpdateUrlDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData Transfer Object containing the updated URL data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe updated URL object.\n\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('UrlsService')\n                    \n                \n                    \n                        \n                                Defined in src/urls/urls.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger } from '@nestjs/common';\nimport { CreateUrlDto } from './dto/create-url.dto';\nimport {\n  BASE62_CHARACTERS,\n  URLS_REPOSITORY,\n} from '../common/constants/constants';\nimport { Repository, IsNull, EntityNotFoundError } from 'typeorm';\nimport { Url } from './entities/url.entity';\nimport { URLNotFoundException } from 'src/common/errors/custom-errors';\nimport { UpdateUrlDto } from './dto/update-url.dto';\n\n@Injectable()\nexport class UrlsService {\n  private logger = new Logger('UrlsService');\n\n  constructor(\n    @Inject(URLS_REPOSITORY)\n    private readonly _urlRepository: Repository,\n  ) {}\n\n  /**\n   * Creates a short URL from a given original URL. If the URL already exists in the database,\n   * it returns the existing shortened version.\n   *\n   * @param {CreateUrlDto} createUrlDto - Data Transfer Object for creating a URL.\n   * @returns {Promise} - An object containing the ID and the shortened URL.\n   */\n  async create({\n    originalUrl,\n  }: CreateUrlDto): Promise {\n    const urlExists = await this._urlRepository.findOne({\n      where: {\n        originalUrl,\n        userId: IsNull(),\n        deletedAt: IsNull(),\n      },\n    });\n\n    if (urlExists) {\n      const { id, hash } = urlExists;\n      return {\n        id,\n        shortUrl: `${process.env.API_DOMAIN}:${process.env.APP_PORT}/${hash}`,\n      };\n    }\n\n    const hash = await this.getValidHash();\n    const newUrl = this._urlRepository.create({\n      originalUrl,\n      hash,\n    });\n\n    const urlSaved = await this._urlRepository.save(newUrl);\n    const shortUrl = `${process.env.API_DOMAIN}:${process.env.APP_PORT}/${hash}`;\n\n    return { shortUrl, id: urlSaved.id };\n  }\n\n  /**\n   * Retrieves the original URL associated with a given hash.\n   *\n   * @param {string} hash - The hash part of the short URL.\n   * @returns {Promise} - An object containing the original URL.\n   */\n  async getOriginalUrlByHash(hash: string): Promise {\n    try {\n      if (!hash || hash.length === 0) return null;\n\n      const where = { where: { hash, deletedAt: IsNull() } };\n      const url = await this._urlRepository.findOneOrFail(where);\n\n      this.increaseClickCount(url.id);\n\n      return { url: url.originalUrl };\n    } catch (error) {\n      if (error instanceof EntityNotFoundError) {\n        throw new URLNotFoundException();\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Increments the click count of a URL by 1.\n   *\n   * @param {number} urlId - The ID of the URL to be incremented.\n   */\n  async increaseClickCount(urlId: number): Promise {\n    try {\n      const url = await this._urlRepository.findOneOrFail({\n        where: { id: urlId },\n      });\n\n      url.clickCount += 1;\n      await this._urlRepository.save(url);\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  /**\n   * Generates a valid hash that is not currently in use.\n   *\n   * @returns {Promise} - A valid unused hash.\n   */\n  async getValidHash(): Promise {\n    let hashValid = '';\n\n    while (hashValid.length === 0) {\n      const hash = this.generateHash();\n      const isInUse = await this.hashInUse(hash);\n      if (!isInUse) {\n        hashValid = hash;\n        break;\n      }\n    }\n\n    return hashValid;\n  }\n\n  /**\n   * Generates a random hash of a specified length using base62 characters.\n   *\n   * @param {number} length - The desired length of the hash. Defaults to 6 if not specified.\n   * @returns {string} - A random hash.\n   */\n  generateHash(length: number = 6): string {\n    if (length } - True if the hash is in use, otherwise false.\n   */\n  async hashInUse(hash: string): Promise {\n    if (!hash || hash.length === 0) return false;\n\n    const hashExists = await this._urlRepository.findOne({ where: { hash } });\n\n    if (hashExists) return true;\n\n    return false;\n  }\n\n  /**\n   * Retrieves all URLs associated with a specific user that haven't been deleted.\n   * @param {number} userId - The user's identifier.\n   * @returns {Promise} - A list of URLs with detailed information including ID, hash, original URL, click count, and update timestamp.\n   */\n  async findByUserId(userId: number): Promise {\n    const urls = await this._urlRepository.find({\n      where: { userId, deletedAt: null },\n      select: ['id', 'hash', 'originalUrl', 'clickCount', 'updatedAt'],\n    });\n\n    const handler = (item) => {\n      const url = `${process.env.API_DOMAIN}:${process.env.APP_PORT}/${item.hash}`;\n      item['url'] = url;\n      return item;\n    };\n\n    urls.forEach((url) => handler(url));\n\n    return urls;\n  }\n\n  /**\n   * Creates a new URL for a user. If the URL already exists, it returns the existing one.\n   * @param {number} userId - The user's identifier.\n   * @param {CreateUrlDto} createUrlDto - Data Transfer Object containing the original URL.\n   * @returns {Promise} - The new URL's ID and short URL.\n   */\n  async createByUser(\n    userId: number,\n    { originalUrl }: CreateUrlDto,\n  ): Promise {\n    const urlExists = await this._urlRepository.findOne({\n      where: {\n        originalUrl,\n        userId,\n        deletedAt: IsNull(),\n      },\n    });\n\n    if (urlExists) {\n      const { id, hash } = urlExists;\n      return {\n        id,\n        shortUrl: `${process.env.API_DOMAIN}:${process.env.APP_PORT}/${hash}`,\n      };\n    }\n\n    const hash = await this.getValidHash();\n    const newUrl = this._urlRepository.create({\n      originalUrl,\n      hash,\n      userId,\n    });\n\n    const urlSaved = await this._urlRepository.save(newUrl);\n    const shortUrl = `${process.env.API_DOMAIN}:${process.env.APP_PORT}/${hash}`;\n\n    return { shortUrl, id: urlSaved.id };\n  }\n\n  /**\n   * Marks a URL as deleted for a specific user.\n   * @param {number} userId - The user's identifier.\n   * @param {number} id - The URL's identifier to be removed.\n   */\n  async removeByUserId(userId: number, id: number) {\n    const url = await this._urlRepository.findOneOrFail({\n      where: { deletedAt: IsNull(), id, userId },\n    });\n\n    url.deletedAt = new Date();\n    await this._urlRepository.save(url);\n  }\n\n  /**\n   * Updates a URL for a specific user.\n   * @param {number} userId - The user's identifier.\n   * @param {number} id - The URL's identifier to be updated.\n   * @param {UpdateUrlDto} updateUrlDto - Data Transfer Object containing the updated URL data.\n   * @returns {Promise} - The updated URL object.\n   */\n  async updateByUserId(\n    userId: number,\n    id: number,\n    updateUrlDto: UpdateUrlDto,\n  ): Promise {\n    await this._urlRepository.findOneOrFail({\n      where: { id, userId, deletedAt: IsNull() },\n    });\n\n    const updateBody = await this._urlRepository.preload({\n      id,\n      ...updateUrlDto,\n    });\n\n    return await this._urlRepository.save(updateBody);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamptz', name: 'created_at', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamptz', name: 'deleted_at', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamptz', name: 'updated_at', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n} from 'typeorm';\n\n@Entity('users')\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  email: string;\n\n  @Column()\n  password: string;\n\n  @CreateDateColumn({\n    type: 'timestamptz',\n    name: 'created_at',\n    default: () => 'now()',\n  })\n  createdAt: Date;\n\n  @CreateDateColumn({\n    type: 'timestamptz',\n    name: 'updated_at',\n    default: () => 'now()',\n  })\n  updatedAt: Date;\n\n  @CreateDateColumn({\n    type: 'timestamptz',\n    name: 'deleted_at',\n    nullable: true,\n  })\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Users1724086805338.html":{"url":"classes/Users1724086805338.html","title":"class - Users1724086805338","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Users1724086805338\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1724086805338-users.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1724086805338-users.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1724086805338-users.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class Users1724086805338 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`\n            CREATE TABLE IF NOT EXISTS users (\n                id SERIAL PRIMARY KEY,\n                email VARCHAR(255) NOT null unique,\n                password VARCHAR(255) NOT NULL,\n                created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n                updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n                deleted_at TIMESTAMPTZ\n            );\n        `);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`\n            DROP TABLE IF EXISTS \"users\"; \n        `);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Register a user'})@ApiBody({type: CreateUserDto})@ApiResponse({status: 201})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Logger } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody, ApiResponse } from '@nestjs/swagger';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\n\n@ApiTags('Users')\n@Controller('users')\nexport class UsersController {\n  private logger = new Logger(UsersController.name);\n\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Register a user' })\n  @ApiBody({ type: CreateUserDto })\n  @ApiResponse({ status: 201 })\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nDatabaseModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { userProviders } from './entities/user.providers';\nimport { DatabaseModule } from 'src/database/database.module';\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [UsersController],\n  providers: [UsersService, ...userProviders],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(email: string, password)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(UsersService.name)\n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { USERS_REPOSITORY } from 'src/common/constants/constants';\nimport { Repository } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { EmailIsRegisteredException } from 'src/common/errors/custom-errors';\nimport {\n  comparePassword,\n  generateHashPassword,\n} from 'src/utils/password.utils';\nimport { ICreateUser } from './interfaces/user.interface';\n\n@Injectable()\nexport class UsersService {\n  private logger = new Logger(UsersService.name);\n\n  constructor(\n    @Inject(USERS_REPOSITORY)\n    private readonly _userRepository: Repository,\n  ) {}\n\n  async create(createUserDto: CreateUserDto): Promise {\n    try {\n      const { email, password } = createUserDto;\n      const isRegisteredEmail = await this._userRepository.findOne({\n        where: { email },\n      });\n\n      if (isRegisteredEmail) throw new EmailIsRegisteredException();\n\n      const hashPassword = await generateHashPassword(password);\n\n      const newUser = await this._userRepository.create({\n        email,\n        password: hashPassword,\n      });\n\n      const savedUser = await this._userRepository.save(newUser);\n\n      return {\n        id: savedUser.id,\n        email: savedUser.email,\n        createdAt: savedUser.createdAt,\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async validateUser(email: string, password): Promise {\n    const user = await this._userRepository.findOne({\n      where: { email },\n    });\n\n    if (user) {\n      const isValid = await comparePassword(password, user.password);\n      if (isValid) return { ...user, password: undefined };\n    }\n\n    return null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/auth/entities/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/optional-auth.guard.ts\n            \n            injectable\n            OptionalAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            class\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/constants/constants.ts\n            \n            variable\n            BASE62_CHARACTERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/constants/constants.ts\n            \n            variable\n            DATA_SOURCE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/constants/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/constants/constants.ts\n            \n            variable\n            URLS_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/constants/constants.ts\n            \n            variable\n            USERS_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/constants/validation-messages.ts\n            \n            variable\n            ValidationMessages\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/errors/custom-errors.ts\n            \n            class\n            EmailIsRegisteredException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/errors/custom-errors.ts\n            \n            class\n            URLNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/errors/error-messages.ts\n            \n            variable\n            ERROR_MESSAGES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/data-source.ts\n            \n            variable\n            config\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/data-source.ts\n            \n            variable\n            TypeormDataSource\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/database.providers.ts\n            \n            variable\n            databaseProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1724011503102-create-urls-table.ts\n            \n            class\n            CreateUrlsTable1724011503102\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1724086805338-users.ts\n            \n            class\n            Users1724086805338\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1724098604809-link-user-to-url.ts\n            \n            class\n            LinkUserToUrl1724098604809\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            DOMAIN_DEFAULT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            PORT_DEFAULT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/urls/dto/create-url.dto.ts\n            \n            class\n            CreateUrlDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/urls/dto/update-url.dto.ts\n            \n            class\n            UpdateUrlDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/urls/entities/url.entity.ts\n            \n            entity\n            Url\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/urls/entities/url.entity.ts\n            \n            class\n            Url\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/urls/entities/url.providers.ts\n            \n            variable\n            urlProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/urls/urls.controller.ts\n            \n            controller\n            UrlsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/urls/urls.service.ts\n            \n            injectable\n            UrlsService\n            \n                76 %\n                (10/13)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.providers.ts\n            \n            variable\n            userProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/interfaces/user.interface.ts\n            \n            interface\n            ICreateUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/interfaces/user.interface.ts\n            \n            interface\n            IPayloadUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/interfaces/user.interface.ts\n            \n            interface\n            IUser\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/password.utils.ts\n            \n            function\n            comparePassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/password.utils.ts\n            \n            function\n            generateHashPassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/password.utils.ts\n            \n            variable\n            SALT_ROUNDS\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            dotenv : ^16.4.5\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.12.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            comparePassword   (src/.../password.utils.ts)\n                        \n                        \n                            generateHashPassword   (src/.../password.utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/password.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        comparePassword\n                        \n                    \n                \n            \n            \n                \ncomparePassword(password: string, encriptedPassword: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encriptedPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateHashPassword\n                        \n                    \n                \n            \n            \n                \ngenerateHashPassword(password: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nurl-shortener\n\nAbout\nURL Shortener is a backend application that provides a URL shortening service.\n\n\nStack\n\nNodeJS: 20.x\nNestJs: ^10.0.0\nTypeOrm: ^0.3.20\nPostgreSQL: ^8.12.0\n\nFeatures\n\nURL shortening\nClick count on shortened URLs\n\nHow to Run the Project\nPrerequisites\n\nNodeJS: 20.x\nDocker\n\nEnvironment variables\nExample :APP_PORT=3001\nAPI_DOMAIN=http://localhost\nDATABASE_HOST=\nDATABASE_PORT=5432\nDATABASE_NAME=\nDATABASE_USER=\nDATABASE_PASSWORD=\nDATABASE_SCHEMA=public\nWhen using docker-compose, put db-pg in DATABASE_HOST\n\nRun in Docker\n\nClone:Example :git clone https://github.com/jonlima/url-shortener.git\nInstall the dependencies:Example :npm install\nRun:Example :npm run start:docker\n\n\n[!NOTE]  \nWhen running in start:docker mode, the application will execute the migrations and create the tables, so don't worry about the database.\n\nRoutes\nURLs Module\n\n\n\nRoute\nMethod\nRequest Body\nResponse Body\nHeaders\n\n\n\n\n/\nPOST\n{ \"originalUrl\": \"string\" }\n{ \"id\": \"number\", \"shortUrl\": \"string\" }\nAuthorization: Bearer  (optional)\n\n\n/:hash\nGET\nNone\nRedirect to original URL\nNone\n\n\n/url/user/:id\nGET\nNone\n[{\"id\", \"hash\", \"originalUrl\",\"clickCount\", \"updatedAt\", \"url\" }]\nAuthorization: Bearer \n\n\n/url/:id\nDELETE\nNone\nNone\nAuthorization: Bearer \n\n\n/:hash\nPUT\n{\"originalUrl\": \"string\"}\n{\"id\", \"hash\", \"originalUrl\",\"clickCount\", \"updatedAt\", \"url\" }\nAuthorization: Bearer \n\n\n\nAuth Module\n\n\n\nRoute\nMethod\nRequest Body\nResponse Body\nHeaders\n\n\n\n\n/login\nPOST\n{ \"email\": \"string\", \"password\": \"string\" }\n{ \"access_token\": \"string\" }\nNone\n\n\n\nUsers Module\n\n\n\nRoute\nMethod\nRequest Body\nResponse Body\nHeaders\n\n\n\n\n/\nPOST\n{ \"originalUrl\": \"string\" }\n{ \"id\": \"number\", \"shortUrl\": \"string\" }\nNone\n\n\n/:hash\nGET\nNone\nRedirect to original URL\nNone\n\n\n\nDocumentation\nHow to access and generate project documentation (Swagger and Compodoc).\n\nAccess the API documentation (Swagger) at: /doc or /doc/json\nOnline access (https://jonlima.github.io/url-shortene)\n\nCompodoc:\nRun\nExample :npm run compodoc\n[!NOTE]\nThe generated documentation will be saved in the docs folder\n\nEntity-Relationship (ER) model (Complete)\n\n\nFuture Scope\n\n\nImprovements\n\nBreak into services\nAdd cache\nDeploy on a cloud\nLogging and Monitoring\nAdd resources: Plan, URL Metadata, Click Tracking\nAdd circuit breake\nAdd pagination\nCustomizable URL\nExperiment with URLs\nAdd load balancer\n\nAutor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UrlsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UrlsModule\n\n\n\ncluster_UrlsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nUrlsModule\n\nUrlsModule\n\nUrlsModule -->\n\nDatabaseModule->UrlsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nDatabaseModule->UsersModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nUrlsModule->AppModule\n\n\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nUrlsService\n\nUrlsService\n\nUrlsModule -->\n\nUrlsService->UrlsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BASE62_CHARACTERS   (src/.../constants.ts)\n                        \n                        \n                            config   (src/.../data-source.ts)\n                        \n                        \n                            DATA_SOURCE   (src/.../constants.ts)\n                        \n                        \n                            databaseProviders   (src/.../database.providers.ts)\n                        \n                        \n                            DOMAIN_DEFAULT   (src/.../main.ts)\n                        \n                        \n                            ERROR_MESSAGES   (src/.../error-messages.ts)\n                        \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            PORT_DEFAULT   (src/.../main.ts)\n                        \n                        \n                            SALT_ROUNDS   (src/.../password.utils.ts)\n                        \n                        \n                            TypeormDataSource   (src/.../data-source.ts)\n                        \n                        \n                            urlProviders   (src/.../url.providers.ts)\n                        \n                        \n                            URLS_REPOSITORY   (src/.../constants.ts)\n                        \n                        \n                            userProviders   (src/.../user.providers.ts)\n                        \n                        \n                            USERS_REPOSITORY   (src/.../constants.ts)\n                        \n                        \n                            ValidationMessages   (src/.../validation-messages.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/constants/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BASE62_CHARACTERS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATA_SOURCE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'DATA_SOURCE'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env.JWT_SECRET,\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        URLS_REPOSITORY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'URLS_REPOSITORY'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USERS_REPOSITORY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_REPOSITORY'\n                    \n                \n\n\n        \n    \n\n    src/database/data-source.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DataSourceOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'postgres',\n  host: process.env.DATABASE_HOST,\n  port: Number(process.env.DATABASE_PORT),\n  database: process.env.DATABASE_NAME,\n  schema: process.env.DATABASE_SCHEMA,\n  username: process.env.DATABASE_USER,\n  password: process.env.DATABASE_PASSWORD,\n  synchronize: false,\n  logging: true,\n  entities: [__dirname + '/../**/*.entity.{js,ts}'],\n  migrations: [__dirname + '/migrations/*.{js,ts}'],\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TypeormDataSource\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DataSource(config)\n                    \n                \n\n\n        \n    \n\n    src/database/database.providers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        databaseProviders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    provide: DATA_SOURCE,\n    useFactory: async (configService: ConfigService) => {\n      const dataSource = new DataSource({\n        type: 'postgres',\n        host: configService.get('DATABASE_HOST'),\n        port: configService.get('DATABASE_PORT'),\n        database: configService.get('DATABASE_NAME'),\n        schema: configService.get('DATABASE_SCHEMA'),\n        username: configService.get('DATABASE_USER'),\n        password: configService.get('DATABASE_PASSWORD'),\n        synchronize: false,\n        logging: true,\n        entities: [Url, User],\n      });\n\n      return dataSource.initialize();\n    },\n    inject: [ConfigService],\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DOMAIN_DEFAULT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'http://localhost'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PORT_DEFAULT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 8000\n                    \n                \n\n\n        \n    \n\n    src/common/errors/error-messages.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ERROR_MESSAGES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  URL_NOT_FOUND: 'URL not found',\n  EMAIL_IS_REGISTERED: 'Email is Already Registered',\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/password.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SALT_ROUNDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n\n\n        \n    \n\n    src/urls/entities/url.providers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        urlProviders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    provide: URLS_REPOSITORY,\n    useFactory: (dataSource: DataSource) => dataSource.getRepository(Url),\n    inject: [DATA_SOURCE],\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/users/entities/user.providers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userProviders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    provide: USERS_REPOSITORY,\n    useFactory: (dataSource: DataSource) => dataSource.getRepository(User),\n    inject: [DATA_SOURCE],\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/common/constants/validation-messages.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ValidationMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  required: (property: string) => `${property} is required.`,\n  isUrl: (property: string) => `Please provide a valid URL for ${property}.`,\n  isString: (property: string) => `${property} should be a string`,\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
