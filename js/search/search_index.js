var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.522,1,2.287]],["body/controllers/AppController.html",[0,1.975,1,3.7,2,1.975,3,0.3,4,0.3,5,0.261,6,3.748,7,3.301,8,4.427,9,0.716,10,1.548,11,5.333,12,2.123,13,0.025,14,0.829,15,4.427,16,1.163,17,1.45,18,0.585,19,0.89,20,3.368,21,3.748,22,4.427,23,0.3,24,0.045,25,2.479,26,2.123,27,1.508,28,4.427,29,0.02,30,0.02]],["title/modules/AppModule.html",[31,1.241,32,2.287]],["body/modules/AppModule.html",[1,3.558,2,2.08,3,0.232,4,0.232,5,0.202,13,0.025,18,0.68,19,0.687,20,3.448,21,2.896,23,0.232,24,0.035,29,0.017,30,0.017,31,1.93,32,4.543,33,1.64,34,1.768,35,2.086,36,2.086,37,1.768,38,2.972,39,1.915,40,2.896,41,2.896,42,2.896,43,3.756,44,3.183,45,3.756,46,3.448,47,2.845,48,2.086,49,2.086,50,3.42,51,3.126,52,3.42,53,2.896,54,2.55,55,3.42,56,3.42,57,3.42,58,3.42,59,2.896,60,2.896,61,1.768]],["title/injectables/AppService.html",[20,1.911,62,0.897]],["body/injectables/AppService.html",[3,0.317,4,0.317,5,0.276,9,0.755,10,1.599,11,5.433,13,0.025,14,0.874,16,1.227,17,1.499,18,0.495,19,0.938,20,3.194,23,0.317,24,0.047,27,1.59,29,0.021,30,0.021,62,1.499,63,2.083,64,3.953,65,4.669,66,4.669,67,4.669]],["title/classes/Auth.html",[24,0.035,68,2.287]],["body/classes/Auth.html",[3,0.354,4,0.354,5,0.308,13,0.023,23,0.354,24,0.053,29,0.022,30,0.022,68,4.086,69,1.897,70,4.416]],["title/controllers/AuthController.html",[0,1.522,71,2.287]],["body/controllers/AuthController.html",[0,1.739,2,1.739,3,0.265,4,0.265,5,0.23,7,2.908,9,0.631,10,1.427,12,1.87,13,0.025,14,0.73,16,1.025,18,0.637,19,0.784,23,0.265,24,0.04,25,2.184,26,1.87,27,1.328,29,0.018,30,0.018,68,2.614,71,3.412,72,3.302,73,2.203,74,5.088,75,3.899,76,3.899,77,1.852,78,1.852,79,3.899,80,1.167,81,1.025,82,1.093,83,3.796,84,3.302,85,2.614,86,2.614,87,3.302,88,2.931,89,2.908,90,2.614,91,3.899,92,3.302,93,3.796,94,2.016,95,3.899,96,3.899,97,3.899,98,2.908,99,3.899,100,3.899]],["title/modules/AuthModule.html",[31,1.241,43,2.082]],["body/modules/AuthModule.html",[2,2.025,3,0.223,4,0.223,5,0.194,13,0.025,18,0.684,19,0.661,23,0.223,24,0.033,29,0.016,30,0.016,31,1.891,33,1.577,34,1.7,35,2.006,36,2.006,37,1.7,38,2.912,39,2.912,43,4.023,46,3.407,47,2.77,48,2.006,49,2.006,51,3.043,53,2.784,54,2.452,59,2.784,60,2.784,61,1.7,71,3.486,88,3.438,89,2.452,101,2.784,102,3.288,103,2.784,104,2.784,105,3.712,106,3.288,107,3.288,108,3.288,109,4.54,110,1.7,111,3.288,112,2.452,113,3.043,114,3.288,115,3.288,116,3.288,117,3.288,118,3.288,119,2.784,120,2.452,121,3.288,122,3.288,123,3.288]],["title/injectables/AuthService.html",[62,0.897,88,1.764]],["body/injectables/AuthService.html",[3,0.178,4,0.178,5,0.155,9,0.424,10,1.083,13,0.025,14,0.859,16,1.482,17,1.633,18,0.536,19,0.527,23,0.178,24,0.027,27,1.316,29,0.014,30,0.014,62,1.015,63,1.17,73,1.783,74,3.27,77,2.122,78,1.84,80,1.372,81,1.205,82,1.286,88,1.997,112,1.955,124,2.22,125,3.27,126,1.852,127,2.622,128,2.616,129,4.586,130,5.059,131,2.622,132,0.921,133,3.862,134,3.862,135,3.02,136,2.622,137,3.862,138,2.117,139,4.284,140,5.059,141,2.163,142,4.207,143,4.284,144,3.862,145,4.586,146,2.88,147,3.27,148,5.393,149,2.622,150,3.862,151,4.777,152,3.862,153,2.045,154,2.88,155,3.862,156,3.27,157,2.163,158,2.622,159,1.955,160,2.356,161,3.42,162,1.257,163,2.622,164,1.356,165,2.22,166,2.622,167,0.893,168,2.622,169,2.622,170,2.622]],["title/classes/CreateUrlDto.html",[24,0.035,171,1.911]],["body/classes/CreateUrlDto.html",[3,0.26,4,0.26,5,0.226,9,0.62,12,1.837,13,0.025,14,0.718,17,1.477,18,0.596,23,0.26,24,0.051,29,0.018,30,0.018,69,1.394,94,1.981,132,1.129,141,2.146,171,2.818,172,4.262,173,2.858,174,2.245,175,3.767,176,3.245,177,3.374,178,2.413,179,5.033,180,3.374,181,3.753,182,5.033,183,3.832,184,4.759,185,4.191,186,3.832,187,4.262,188,2.858,189,4.262,190,2.569,191,3.245,192,2.569,193,3.753,194,3.245,195,3.832]],["title/classes/CreateUrlsTable1724011503102.html",[24,0.035,196,2.545]],["body/classes/CreateUrlsTable1724011503102.html",[3,0.224,4,0.224,5,0.195,9,0.534,10,1.276,13,0.025,14,0.852,16,1.195,18,0.35,23,0.224,24,0.034,29,0.016,30,0.016,69,1.2,73,2.367,80,1.361,81,1.195,82,1.276,132,0.914,153,2.504,157,3.41,162,2.181,167,1.123,196,3.393,197,4.41,198,2.504,199,3.594,200,2.793,201,3.05,202,3.884,203,4.541,204,3.393,205,3.393,206,3.393,207,4.813,208,3.298,209,3.393,210,3.298,211,1.471,212,3.393,213,3.05,214,3.393,215,2.793,216,2.793,217,2.46,218,2.46,219,4.55,220,2.012,221,4.55,222,2.46,223,2.793,224,2.793,225,2.693,226,2.46,227,2.211,228,3.491,229,3.05,230,2.211,231,2.211,232,2.46]],["title/classes/CreateUserDto.html",[24,0.035,233,2.082]],["body/classes/CreateUserDto.html",[3,0.221,4,0.221,5,0.192,9,0.526,12,2.159,13,0.025,14,0.844,17,1.466,18,0.548,23,0.221,24,0.046,26,2.906,29,0.016,30,0.016,69,1.182,77,2.131,78,2.261,94,1.68,132,0.905,138,1.9,141,2.522,174,2.009,176,3.813,181,4.161,185,4.37,187,4.376,188,2.424,189,4.376,190,2.179,191,2.752,192,2.179,193,3.854,194,3.813,233,2.748,234,4.376,235,2.752,236,3.25,237,5.168,238,3.25,239,3.25,240,3.25,241,4.504,242,5.579,243,3.854,244,4.504,245,3.813,246,3.813,247,3.25,248,3.813,249,3.25,250,3.25,251,3.25]],["title/modules/DatabaseModule.html",[31,1.241,44,1.764]],["body/modules/DatabaseModule.html",[3,0.329,4,0.329,5,0.286,13,0.025,18,0.619,19,0.975,23,0.329,24,0.049,29,0.021,30,0.021,31,2.124,33,2.326,38,2.717,39,2.717,44,3.019,252,4.852,253,4.671,254,4.852]],["title/classes/EmailIsRegisteredException.html",[24,0.035,255,2.082]],["body/classes/EmailIsRegisteredException.html",[3,0.3,4,0.3,5,0.261,13,0.025,14,0.829,18,0.585,19,0.89,23,0.375,24,0.056,29,0.02,30,0.02,69,1.61,126,3.02,192,2.968,255,3.368,256,3.091,257,3.301,258,2.338,259,5.093,260,4.427,261,4.674,262,2.968,263,2.479,264,2.479,265,3.748,266,3.748]],["title/classes/HttpExceptionFilter.html",[24,0.035,267,2.545]],["body/classes/HttpExceptionFilter.html",[3,0.229,4,0.229,5,0.199,9,0.545,10,1.294,13,0.025,14,0.865,16,0.885,18,0.489,19,0.677,23,0.229,24,0.034,25,1.886,26,1.615,29,0.017,30,0.017,69,1.225,80,1.381,81,1.213,82,1.294,86,3.094,126,1.615,132,0.677,164,3.068,185,3.927,201,3.094,263,2.585,267,3.442,268,4.459,269,2.852,270,5.266,271,3.53,272,3.368,273,3.368,274,3.213,275,4.616,276,5.934,277,4.459,278,5.665,279,3.368,280,4.616,281,3.368,282,3.368,283,3.442,284,2.512,285,3.368,286,2.059,287,3.368,288,3.368,289,3.368,290,3.368,291,3.368,292,3.368,293,3.368,294,3.368,295,4.224,296,2.512,297,3.368,298,3.368,299,3.368,300,3.368,301,3.368,302,3.368,303,2.852,304,3.368,305,3.368,306,3.368]],["title/interfaces/ICreateUser.html",[307,1.764,308,1.911]],["body/interfaces/ICreateUser.html",[3,0.314,4,0.314,5,0.273,13,0.024,17,1.491,23,0.416,29,0.02,30,0.02,77,1.684,78,1.684,135,2.592,167,1.577,258,2.386,307,3.173,308,3.178,309,3.103,310,3.103,311,4.577,312,2.065,313,2.592,314,3.437,315,3.453,316,2.592,317,2.394]],["title/interfaces/IPayloadUser.html",[307,1.764,317,1.764]],["body/interfaces/IPayloadUser.html",[3,0.314,4,0.314,5,0.273,13,0.024,17,1.491,23,0.416,29,0.02,30,0.02,77,1.684,78,1.684,135,2.592,167,1.577,258,2.386,307,3.173,308,2.592,309,3.103,310,3.103,311,4.577,312,2.065,313,2.592,314,3.437,315,3.453,316,2.592,317,2.934]],["title/interfaces/IUser.html",[135,1.911,307,1.764]],["body/interfaces/IUser.html",[3,0.265,4,0.265,5,0.23,9,0.631,13,0.025,17,1.68,23,0.385,29,0.018,30,0.018,77,2.185,78,2.185,82,1.427,132,1.285,135,2.851,167,2.047,174,2.271,258,1.979,307,2.931,308,2.184,309,2.614,310,2.614,311,3.796,312,2.528,313,3.365,314,3.739,315,4.481,316,3.365,317,2.016]],["title/injectables/JwtAuthGuard.html",[62,0.897,318,2.287]],["body/injectables/JwtAuthGuard.html",[3,0.262,4,0.262,5,0.228,9,0.624,10,1.418,13,0.025,14,0.947,16,1.328,18,0.536,19,0.775,23,0.262,24,0.039,27,1.722,29,0.018,30,0.018,62,1.328,63,1.721,80,1.513,81,1.328,82,1.418,110,1.995,132,0.775,138,2.116,258,1.965,286,1.721,318,3.389,319,4.206,320,2.587,321,4.281,322,4.281,323,5.056,324,4.281,325,5.067,326,3.859,327,3.267,328,5.056,329,3.859,330,5.64,331,4.281,332,2.878,333,3.267,334,2.354]],["title/classes/JwtStrategy.html",[24,0.035,113,2.287]],["body/classes/JwtStrategy.html",[3,0.267,4,0.267,5,0.233,9,0.637,10,1.437,13,0.025,14,0.96,16,1.035,18,0.604,23,0.267,24,0.04,27,1.342,29,0.018,30,0.018,69,1.433,73,2.215,77,1.433,80,1.179,81,1.035,82,1.105,110,2.037,113,3.436,120,2.939,126,2.732,132,0.792,146,2.939,153,2.287,159,2.939,165,3.337,167,1.342,258,1.993,317,2.037,335,3.337,336,4.34,337,4.34,338,3.941,339,5.126,340,3.941,341,3.337,342,3.941,343,3.337,344,2.939,345,3.941,346,3.337,347,3.941,348,3.941,349,3.941,350,2.939,351,3.941,352,3.941,353,3.941]],["title/classes/LinkUserToUrl1724098604809.html",[24,0.035,354,2.545]],["body/classes/LinkUserToUrl1724098604809.html",[3,0.24,4,0.24,5,0.209,9,0.573,10,1.339,13,0.025,14,0.894,16,1.254,18,0.375,23,0.24,24,0.036,29,0.017,30,0.017,69,1.287,73,2.418,80,1.428,81,1.254,82,1.339,132,0.959,138,1.84,153,2.579,157,1.982,162,2.289,199,2.913,201,3.2,202,4.029,203,4.639,204,3.56,205,3.56,206,3.56,207,4.885,209,3.56,211,1.579,212,2.64,213,3.2,217,2.64,218,2.64,232,2.64,354,3.56,355,4.574,356,4.574,357,2.997,358,3.54,359,3.54,360,3.54,361,3.54,362,4.774,363,4.774,364,3.54,365,3.54,366,3.54,367,2.997,368,3.54,369,3.54]],["title/injectables/LocalAuthGuard.html",[62,0.897,90,2.287]],["body/injectables/LocalAuthGuard.html",[3,0.329,4,0.329,5,0.286,13,0.025,18,0.619,19,0.975,23,0.329,24,0.049,29,0.021,30,0.021,62,1.534,63,2.164,90,3.914,110,2.509,258,2.27,320,3.252,332,3.618,370,4.108,371,5.839]],["title/injectables/LocalStrategy.html",[62,0.897,105,2.082]],["body/injectables/LocalStrategy.html",[3,0.239,4,0.239,5,0.208,9,0.569,10,1.333,13,0.025,14,0.89,16,0.924,17,1.631,18,0.611,19,0.707,23,0.239,24,0.036,25,1.969,27,1.198,29,0.017,30,0.017,61,1.818,62,1.249,63,1.569,73,2.093,77,2.098,78,2.191,80,1.422,81,1.249,82,1.333,83,2.623,88,3.21,89,2.623,105,2.9,110,1.818,126,1.686,132,0.955,138,1.834,153,2.12,162,1.686,164,1.818,258,1.848,286,1.569,331,4.025,334,2.146,336,4.025,337,4.025,341,2.978,343,2.978,344,2.623,346,2.978,372,2.978,373,3.517,374,3.517,375,4.754,376,3.517,377,2.978,378,3.517,379,3.517,380,3.517,381,3.517]],["title/injectables/OptionalAuthGuard.html",[62,0.897,382,2.287]],["body/injectables/OptionalAuthGuard.html",[3,0.295,4,0.295,5,0.256,9,0.702,10,1.529,13,0.025,14,0.813,16,1.14,18,0.578,19,0.872,23,0.295,24,0.044,27,1.479,29,0.02,30,0.02,62,1.433,63,1.936,80,1.299,81,1.14,82,1.217,110,2.244,132,0.872,258,2.12,320,2.91,321,4.617,322,4.617,324,4.617,325,5.295,327,3.675,332,3.237,333,3.675,382,3.655,383,4.066,384,4.341]],["title/classes/URLNotFoundException.html",[24,0.035,264,1.911]],["body/classes/URLNotFoundException.html",[3,0.3,4,0.3,5,0.261,13,0.025,14,0.829,18,0.585,19,0.89,23,0.375,24,0.056,29,0.02,30,0.02,69,1.61,126,3.02,192,2.968,255,2.701,256,3.091,257,3.301,258,2.338,259,4.674,261,5.093,262,2.968,263,2.479,264,3.091,265,3.748,266,3.748,385,4.427]],["title/classes/UpdateUrlDto.html",[24,0.035,386,2.082]],["body/classes/UpdateUrlDto.html",[3,0.329,4,0.329,5,0.286,13,0.025,18,0.619,23,0.329,24,0.049,29,0.021,30,0.021,69,1.765,94,2.509,171,2.717,173,3.618,198,2.164,258,2.27,386,3.562,387,4.108,388,5.839,389,4.852,390,3.618]],["title/entities/Url.html",[178,1.636,391,1.911]],["body/entities/Url.html",[3,0.184,4,0.184,5,0.16,9,0.641,12,2.9,13,0.025,14,1.133,17,1.352,18,0.288,23,0.184,24,0.028,29,0.014,30,0.014,61,3.05,81,1.647,132,1.291,167,1.595,174,1.769,175,3.138,178,1.901,211,1.212,218,2.957,220,3.14,222,3.492,223,3.358,224,3.358,225,2.661,227,2.658,228,3.83,229,3.45,230,2.658,231,2.658,243,2.027,312,2.549,313,2.622,314,3.2,316,2.622,391,1.522,392,1.822,393,2.301,394,3.964,395,3.492,396,3.492,397,3.966,398,2.718,399,3.964,400,2.718,401,4.358,402,2.718,403,2.718,404,3.358,405,2.718,406,3.964,407,2.718,408,2.718,409,2.718,410,2.718,411,3.966,412,2.718,413,4.634,414,4.358,415,2.718,416,2.718]],["title/controllers/UrlsController.html",[0,1.522,417,2.287]],["body/controllers/UrlsController.html",[0,1.318,2,0.825,3,0.126,4,0.126,5,0.109,9,0.299,10,0.828,12,2.207,13,0.025,14,0.862,16,1.209,17,1.107,18,0.6,19,0.372,23,0.126,24,0.019,25,1.036,26,0.887,27,1.672,29,0.011,30,0.011,73,1.908,80,1.377,81,1.209,82,1.291,83,4.452,84,2.502,85,2.472,86,1.98,87,1.566,92,2.502,93,3.141,94,0.956,98,2.751,132,1.075,138,0.63,141,2.996,159,1.38,160,1.129,161,1.38,162,1.417,164,1.527,167,1.822,171,2.996,177,2.823,178,2.769,180,2.823,198,1.318,220,1.802,256,1.036,263,2.065,264,2.065,271,1.24,274,1.802,283,3.141,284,1.38,286,1.318,295,3.141,296,1.38,312,2.46,317,1.527,318,1.24,319,1.38,334,1.802,367,1.566,382,1.24,383,1.38,386,3.264,390,2.203,396,2.751,417,1.98,418,1.566,419,2.502,420,4.155,421,2.954,422,3.688,423,3.898,424,1.566,425,1.85,426,1.85,427,1.85,428,4.603,429,1.85,430,1.85,431,2.954,432,1.85,433,2.954,434,1.85,435,1.85,436,1.85,437,1.85,438,1.85,439,1.85,440,1.85,441,1.85,442,1.85,443,2.502,444,2.954,445,1.85,446,2.954,447,2.954,448,1.85,449,1.85,450,1.85,451,1.85,452,1.85,453,2.751,454,1.566,455,1.566,456,2.502,457,3.898,458,1.654,459,1.566,460,1.24,461,1.38,462,1.566,463,1.85,464,1.85,465,1.85,466,1.85,467,1.85,468,1.85,469,1.85,470,1.85,471,1.85,472,1.566,473,1.85,474,1.85,475,1.38,476,1.85,477,1.85,478,1.85,479,1.566,480,3.688,481,1.85,482,1.85,483,1.85,484,1.85,485,1.85,486,1.85,487,1.85,488,1.85,489,1.85]],["title/modules/UrlsModule.html",[31,1.241,45,2.082]],["body/modules/UrlsModule.html",[2,2.292,3,0.268,4,0.268,5,0.233,13,0.025,18,0.664,19,0.795,23,0.268,24,0.04,29,0.018,30,0.018,31,2.076,33,1.896,34,2.045,35,2.413,36,2.413,37,2.045,38,3.196,39,2.215,44,3.318,45,4.041,47,3.135,48,2.413,49,2.413,51,3.444,417,3.825,458,3.594,459,3.349,490,3.349,491,3.955,492,3.349,493,3.955,494,3.955,495,3.832,496,3.955,497,3.349]],["title/injectables/UrlsService.html",[62,0.897,458,1.911]],["body/injectables/UrlsService.html",[3,0.06,4,0.06,5,0.052,9,0.142,10,0.439,13,0.025,14,0.851,16,1.426,17,1.11,18,0.379,19,0.176,23,0.06,24,0.009,26,0.421,27,1.594,29,0.006,30,0.006,61,1.098,62,0.412,63,0.391,73,2.239,80,1.263,81,1.11,82,1.184,126,0.751,132,0.849,138,1.301,141,2.138,142,3.149,143,3.026,151,3.233,153,2.45,154,1.925,156,1.327,157,0.877,160,1.575,161,3.389,162,2.453,164,2.871,167,1.962,171,2.46,174,0.699,175,2.396,177,2.704,178,3.001,180,1.73,198,0.947,199,2.009,211,0.391,214,1.925,220,3.713,225,0.81,226,1.583,243,2.665,246,1.327,256,0.491,263,1.446,264,0.877,271,1.05,274,1.575,286,1.703,296,0.654,303,1.327,312,2.659,314,0.491,316,1.844,334,0.956,350,1.925,386,2.577,390,1.168,394,0.743,395,0.654,396,3.745,419,1.327,423,1.327,424,1.327,458,0.877,460,0.588,461,0.654,462,0.743,475,1.168,479,0.743,498,0.743,499,2.123,500,1.567,501,1.567,502,2.582,503,1.567,504,1.567,505,1.567,506,2.123,507,0.877,508,2.186,509,1.567,510,1.567,511,0.877,512,0.877,513,2.582,514,3.293,515,2.966,516,2.511,517,1.168,518,2.582,519,1.327,520,0.877,521,0.743,522,0.877,523,1.567,524,3.848,525,3.293,526,0.877,527,2.582,528,2.582,529,3.293,530,1.567,531,2.582,532,1.567,533,1.567,534,1.567,535,1.567,536,2.186,537,2.186,538,1.567,539,0.877,540,2.582,541,2.582,542,2.582,543,1.327,544,1.567,545,1.168,546,2.582,547,1.567,548,1.567,549,1.567,550,0.877,551,1.567,552,0.877,553,1.567,554,2.966,555,1.567,556,1.567,557,0.877,558,0.877,559,0.877,560,1.567,561,0.877,562,1.567,563,2.123,564,2.123,565,1.567,566,1.567,567,0.877,568,1.567,569,1.567,570,0.877,571,0.877,572,1.567,573,3.293,574,3.293,575,2.582,576,1.567,577,0.654,578,0.654,579,0.654,580,0.877,581,3.574,582,1.567,583,0.877,584,0.877,585,0.877,586,3.293,587,2.123,588,2.788,589,2.582,590,1.567,591,1.567,592,1.567,593,1.567,594,1.567,595,1.567,596,1.567,597,0.877,598,0.877,599,0.877,600,2.123,601,0.877,602,1.567,603,2.123,604,0.877,605,0.877,606,1.567,607,0.877,608,0.877,609,1.567,610,0.877,611,0.877,612,0.877,613,1.567,614,0.877,615,0.877,616,0.877,617,0.877,618,0.877,619,0.877,620,0.877,621,0.877]],["title/entities/User.html",[138,1.162,391,1.911]],["body/entities/User.html",[3,0.217,4,0.217,5,0.189,9,0.517,12,2.891,13,0.025,14,1.129,17,1.455,18,0.339,23,0.217,24,0.032,29,0.016,30,0.016,61,2.3,77,1.862,78,1.862,81,1.584,132,1.288,138,1.516,167,1.744,174,1.985,211,1.425,225,2.863,227,2.982,228,4.042,229,3.712,230,2.982,231,2.982,312,1.985,313,2.867,314,3.376,316,2.867,391,1.789,392,2.141,395,3.818,399,4.335,401,3.767,406,4.335,413,4.93,414,4.689,622,2.704,623,3.194,624,3.194,625,3.194,626,3.194,627,3.194,628,3.194,629,3.194]],["title/classes/Users1724086805338.html",[24,0.035,630,2.545]],["body/classes/Users1724086805338.html",[3,0.234,4,0.234,5,0.203,9,0.557,10,1.313,13,0.025,14,0.877,16,1.231,18,0.365,23,0.234,24,0.035,29,0.017,30,0.017,69,1.252,73,2.398,77,1.252,78,1.252,80,1.401,81,1.231,82,1.313,132,0.941,153,2.55,157,3.2,162,2.246,167,1.172,198,1.535,201,3.139,202,3.971,203,4.6,204,3.493,205,3.493,206,3.493,207,4.857,209,3.493,211,1.535,212,3.493,213,3.139,214,3.493,215,2.914,216,2.914,217,2.566,222,2.566,225,2.421,227,2.307,228,3.569,229,3.139,230,2.307,231,2.307,232,2.566,630,3.493,631,4.508,632,2.914,633,3.441,634,3.441,635,3.966,636,4.684]],["title/controllers/UsersController.html",[0,1.522,637,2.287]],["body/controllers/UsersController.html",[0,1.647,2,1.647,3,0.251,4,0.251,5,0.218,7,2.753,9,0.597,10,1.377,12,1.77,13,0.025,14,0.692,16,0.97,18,0.624,19,0.742,23,0.251,24,0.038,25,2.068,26,1.77,27,1.258,29,0.018,30,0.018,80,1.105,81,0.97,82,1.035,85,3.292,93,3.662,94,1.909,98,2.753,128,2.853,132,0.987,138,1.258,160,2.253,198,2.191,233,3.921,274,2.996,286,1.647,295,2.753,443,4.158,453,2.753,455,3.126,456,4.158,457,4.158,460,2.475,635,3.126,637,3.292,638,3.126,639,3.126,640,3.692,641,4.911,642,3.692,643,3.692,644,3.692,645,3.126,646,3.126,647,3.692,648,3.692,649,3.692,650,3.692,651,3.692]],["title/modules/UsersModule.html",[31,1.241,46,1.911]],["body/modules/UsersModule.html",[2,2.235,3,0.258,4,0.258,5,0.225,13,0.025,18,0.656,19,0.765,23,0.258,24,0.039,29,0.018,30,0.018,31,2.037,33,1.825,34,1.968,35,2.322,36,2.322,37,1.968,38,3.137,39,3.137,44,3.283,46,3.722,47,3.057,48,2.322,49,2.322,51,3.359,128,3.519,497,3.223,637,3.755,645,3.223,652,3.223,653,3.806,654,3.223,655,3.223,656,3.806,657,3.806,658,3.737,659,3.806]],["title/injectables/UsersService.html",[62,0.897,128,1.764]],["body/injectables/UsersService.html",[3,0.173,4,0.173,5,0.151,9,0.412,10,1.061,13,0.026,14,0.935,16,0.994,17,1.185,18,0.63,19,0.512,23,0.173,24,0.026,26,1.222,27,1.537,29,0.014,30,0.014,62,0.994,63,1.137,73,2.171,77,2.031,78,2.031,80,1.35,81,1.185,82,1.265,125,3.204,126,1.814,128,1.956,132,0.907,138,1.7,147,3.204,153,2.226,157,1.428,160,3.045,162,2.678,164,2.989,167,0.868,174,1.688,198,1.688,211,1.137,225,1.318,233,3.408,255,2.308,256,1.428,263,2.119,271,1.709,274,3.045,286,2.012,308,1.428,313,1.428,334,2.308,460,1.709,461,1.901,475,1.901,508,4.226,521,2.159,545,1.901,577,1.901,639,3.204,646,2.159,660,2.159,661,2.55,662,3.784,663,3.784,664,2.55,665,2.55,666,3.784,667,1.901,668,2.55,669,2.55,670,1.901,671,1.901,672,2.55,673,2.55,674,2.55,675,3.784,676,3.784,677,3.784,678,2.159,679,2.55,680,2.55,681,2.55,682,2.55,683,2.55,684,2.55,685,2.55,686,3.784,687,2.159,688,2.55]],["title/coverage.html",[689,3.943]],["body/coverage.html",[0,2.047,1,1.45,5,0.128,6,1.831,13,0.025,20,1.211,24,0.062,29,0.012,30,0.012,37,1.118,62,1.483,64,1.831,68,1.45,70,1.831,71,1.45,72,1.831,88,1.118,90,1.45,105,1.32,113,1.45,124,1.831,128,1.118,132,0.435,135,1.211,138,1.138,171,1.211,172,1.831,173,2.491,178,1.602,190,1.45,196,1.613,197,1.831,198,0.965,199,1.32,200,1.831,213,1.45,226,5.191,233,1.32,234,1.831,235,1.831,253,1.613,255,1.32,256,1.87,257,2.491,262,1.45,264,1.211,267,1.613,268,1.831,269,1.831,286,0.965,307,2.11,308,1.211,310,2.735,317,1.118,318,1.45,319,1.613,320,2.735,335,1.831,354,1.613,355,1.831,356,1.831,357,1.831,370,1.831,372,1.831,382,1.45,383,1.613,386,1.32,387,1.831,391,1.87,393,2.828,417,1.45,418,1.831,458,1.211,495,1.613,498,1.831,524,1.831,578,1.613,579,1.613,622,1.831,630,1.613,631,1.831,632,1.831,637,1.45,638,1.831,658,1.613,660,1.831,667,1.613,670,1.613,671,1.613,689,1.831,690,1.831,691,2.163,692,5.645,693,2.163,694,2.163,695,6.691,696,5.645,697,4.2,698,6.324,699,1.831,700,1.831,701,1.831,702,2.828,703,1.831,704,2.828,705,2.828,706,1.831,707,1.831,708,1.831,709,3.043,710,4.081,711,1.831,712,1.831,713,2.163,714,1.831,715,2.163,716,2.163,717,2.163,718,1.831,719,2.163,720,2.163,721,3.043,722,1.831,723,2.163]],["title/dependencies.html",[34,2.122,724,2.413]],["body/dependencies.html",[13,0.025,19,0.824,24,0.054,29,0.019,30,0.019,34,2.12,54,3.058,94,2.12,110,2.12,112,3.058,146,3.058,188,3.058,211,1.829,284,3.058,344,4.33,377,3.472,725,4.916,726,4.101,727,4.101,728,4.101,729,4.101,730,4.101,731,4.101,732,4.101,733,4.101,734,4.101,735,4.101,736,4.101,737,4.101,738,4.101,739,4.101,740,4.101,741,4.101,742,4.101,743,4.101,744,4.101,745,4.101,746,3.472,747,3.472,748,4.101,749,4.101,750,4.101,751,4.101,752,4.101,753,3.472]],["title/miscellaneous/functions.html",[754,1.91,755,3.475]],["body/miscellaneous/functions.html",[9,0.731,13,0.024,16,1.469,17,1.745,29,0.02,30,0.02,37,3.138,78,2.033,80,1.672,81,1.469,82,1.567,132,1.123,153,2.493,670,4.168,671,4.168,678,3.825,687,3.825,709,3.368,721,3.368,754,3.028,755,3.825,756,3.825,757,4.733,758,5.59]],["title/index.html",[9,0.461,759,2.85,760,2.85]],["body/index.html",[13,0.022,17,1.174,29,0.016,30,0.016,31,1.168,85,2.153,86,2.153,139,4.349,167,1.094,175,2.153,177,2.153,178,2.797,180,2.153,181,3.331,198,1.433,199,2.725,211,1.433,220,1.96,283,2.396,312,1.433,391,1.799,420,2.72,453,3.331,454,2.72,517,2.396,536,2.72,537,2.72,543,2.72,588,2.72,690,4.701,725,2.72,746,2.72,747,2.72,753,2.72,761,4.467,762,3.212,763,4.467,764,3.212,765,4.467,766,3.212,767,3.212,768,4.467,769,4.467,770,3.212,771,3.212,772,3.212,773,5.835,774,4.467,775,3.212,776,5.136,777,3.212,778,2.396,779,3.212,780,3.212,781,4.467,782,3.212,783,3.212,784,3.212,785,3.212,786,3.212,787,3.212,788,3.212,789,3.212,790,3.212,791,3.212,792,3.212,793,3.212,794,4.467,795,3.212,796,5.136,797,3.212,798,4.467,799,4.467,800,3.212,801,3.212,802,3.212,803,2.72,804,3.212,805,3.212,806,3.212,807,3.212,808,3.212,809,3.212,810,3.212,811,5.136,812,3.212,813,4.467,814,5.136,815,3.212,816,3.212,817,3.212,818,3.212,819,3.212,820,3.212,821,3.212,822,3.212,823,3.212,824,3.212,825,3.212,826,3.212,827,3.212,828,3.212,829,3.212,830,3.212,831,3.212]],["title/modules.html",[33,2.233]],["body/modules.html",[13,0.021,29,0.021,30,0.021,32,3.267,33,2.336,43,2.973,44,2.519,45,2.973,46,2.729,832,6.51,833,6.51,834,6.51,835,6.659,836,4.873,837,4.873]],["title/overview.html",[838,3.943]],["body/overview.html",[2,1.559,13,0.025,20,3.005,29,0.017,30,0.017,31,1.271,32,4.502,33,1.676,34,1.807,35,2.132,36,2.132,37,1.807,38,1.957,39,1.957,40,2.959,41,2.959,42,2.959,43,4.03,44,3.108,45,3.866,46,3.659,47,2.888,48,2.132,49,2.132,63,1.559,69,1.271,88,3.276,101,2.959,103,2.959,104,2.959,105,3.275,128,3.276,245,2.959,309,2.343,392,2.343,458,3.005,490,2.959,492,2.959,652,2.959,654,2.959,655,2.959,838,2.959,839,3.495,840,3.495,841,3.495,842,3.495,843,3.495]],["title/properties.html",[174,1.831,724,2.413]],["body/properties.html",[13,0.025,29,0.022,30,0.022,141,2.907,174,2.316,519,4.396,844,5.192,845,5.192,846,5.192,847,5.192]],["title/miscellaneous/variables.html",[754,1.91,778,3.061]],["body/miscellaneous/variables.html",[9,0.362,13,0.025,17,1.537,27,0.762,29,0.012,30,0.012,61,1.772,73,0.87,77,0.814,78,1.247,119,1.894,120,1.668,132,1.29,138,0.762,142,3.108,154,1.668,164,1.157,178,1.998,184,1.894,190,2.298,193,3.963,225,3.291,248,1.894,253,2.556,262,2.298,277,2.902,286,1.529,312,1.529,350,2.556,392,2.298,404,1.894,472,1.894,495,2.556,516,1.894,517,2.556,545,4.746,577,3.108,578,2.556,579,3.484,658,2.556,667,3.484,697,1.894,699,4.499,700,2.902,701,1.894,702,3.955,703,1.894,704,1.894,705,3.529,706,2.902,707,2.902,708,1.894,709,1.668,711,2.902,712,2.902,714,1.894,718,1.894,721,1.668,722,2.902,754,1.499,756,2.902,757,1.894,778,1.668,803,1.894,848,5.037,849,3.428,850,2.237,851,2.237,852,2.237,853,2.237,854,2.237,855,2.237,856,2.237,857,3.428,858,2.237,859,3.428,860,2.237,861,2.237,862,3.428,863,2.237,864,3.428,865,2.237,866,2.237,867,3.428,868,3.428,869,3.428,870,2.237,871,2.237,872,2.237,873,4.671,874,4.168,875,4.168,876,5.314,877,2.237,878,2.237,879,2.237,880,2.237,881,2.237,882,2.237,883,2.237,884,2.237,885,2.237,886,2.237,887,2.237,888,2.237,889,2.237,890,2.237,891,3.428,892,2.237]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"classes/URLNotFoundException.html":{},"classes/UpdateUrlDto.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":226,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"injectables/UrlsService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":844,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":740,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":750,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":753,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["0.5.1",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":743,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":695,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":692,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":696,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":720,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":715,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":719,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":713,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":563,"title":{},"body":{"injectables/UrlsService.html":{}}}],["1.0.0",{"_index":745,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":404,"title":{},"body":{"entities/Url.html":{},"miscellaneous/variables.html":{}}}],["10.0.0",{"_index":725,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["10.0.2",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":731,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":728,"title":{},"body":{"dependencies.html":{}}}],["10/13",{"_index":717,"title":{},"body":{"coverage.html":{}}}],["10m",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{}}}],["12",{"_index":842,"title":{},"body":{"overview.html":{}}}],["16",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["16.4.5",{"_index":742,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":841,"title":{},"body":{"overview.html":{}}}],["2/4",{"_index":694,"title":{},"body":{"coverage.html":{}}}],["20.x",{"_index":769,"title":{},"body":{"index.html":{}}}],["200",{"_index":431,"title":{},"body":{"controllers/UrlsController.html":{}}}],["201",{"_index":443,"title":{},"body":{"controllers/UrlsController.html":{},"controllers/UsersController.html":{}}}],["3",{"_index":843,"title":{},"body":{"overview.html":{}}}],["3.2.3",{"_index":726,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":840,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":744,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":446,"title":{},"body":{"controllers/UrlsController.html":{}}}],["404",{"_index":433,"title":{},"body":{"controllers/UrlsController.html":{}}}],["5",{"_index":839,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":693,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":546,"title":{},"body":{"injectables/UrlsService.html":{}}}],["7.4.0",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["76",{"_index":716,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["8.12.0",{"_index":747,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["8000",{"_index":885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["__dirname",{"_index":869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_jwtservice",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{}}}],["_urlrepository",{"_index":510,"title":{},"body":{"injectables/UrlsService.html":{}}}],["_urlsservice",{"_index":465,"title":{},"body":{"controllers/UrlsController.html":{}}}],["_userrepository",{"_index":663,"title":{},"body":{"injectables/UsersService.html":{}}}],["_usersservice",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["abcd1234",{"_index":250,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["abcd1234'})@isnotempty({message",{"_index":239,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789",{"_index":855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["access_token",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{}}}],["add",{"_index":361,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{}}}],["address",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["already",{"_index":516,"title":{},"body":{"injectables/UrlsService.html":{},"miscellaneous/variables.html":{}}}],["alter",{"_index":360,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{}}}],["api",{"_index":815,"title":{},"body":{"index.html":{}}}],["api_domain=http://localhost",{"_index":780,"title":{},"body":{"index.html":{}}}],["apibody",{"_index":456,"title":{},"body":{"controllers/UrlsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UrlsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":429,"title":{},"body":{"controllers/UrlsController.html":{}}}],["apiproperty",{"_index":189,"title":{},"body":{"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{}}}],["apiproperty({description",{"_index":176,"title":{},"body":{"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{}}}],["apiresponse",{"_index":457,"title":{},"body":{"controllers/UrlsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":455,"title":{},"body":{"controllers/UrlsController.html":{},"controllers/UsersController.html":{}}}],["apitags('urls",{"_index":463,"title":{},"body":{"controllers/UrlsController.html":{}}}],["apitags('users",{"_index":647,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":8,"title":{},"body":{"controllers/AppController.html":{}}}],["app.controller",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_port=3001",{"_index":779,"title":{},"body":{"index.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":763,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":32,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":20,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":278,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["associated",{"_index":528,"title":{},"body":{"injectables/UrlsService.html":{}}}],["async",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalStrategy.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"classes/Users1724086805338.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":68,"title":{"classes/Auth.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["auth.controller",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UrlsController.html":{}}}],["auth.guard.ts",{"_index":320,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:10",{"_index":326,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:14",{"_index":329,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:6",{"_index":384,"title":{},"body":{"injectables/OptionalAuthGuard.html":{}}}],["auth.service",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":71,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":332,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalAuthGuard.html":{}}}],["authguard('jwt",{"_index":321,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalAuthGuard.html":{}}}],["authguard('local",{"_index":371,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":43,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":847,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":88,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["autor",{"_index":831,"title":{},"body":{"index.html":{}}}],["available",{"_index":837,"title":{},"body":{"modules.html":{}}}],["await",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalStrategy.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"classes/Users1724086805338.html":{},"injectables/UsersService.html":{}}}],["backend",{"_index":762,"title":{},"body":{"index.html":{}}}],["base62",{"_index":544,"title":{},"body":{"injectables/UrlsService.html":{}}}],["base62_characters",{"_index":578,"title":{},"body":{"injectables/UrlsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["bearer",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["between",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["body",{"_index":453,"title":{},"body":{"controllers/UrlsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["bootstrap",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["break",{"_index":608,"title":{},"body":{"injectables/UrlsService.html":{}}}],["browse",{"_index":835,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":832,"title":{},"body":{"modules.html":{}}}],["canactivate",{"_index":322,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalAuthGuard.html":{}}}],["canactivate(context",{"_index":324,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalAuthGuard.html":{}}}],["catch",{"_index":271,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"injectables/UsersService.html":{}}}],["catch(exception",{"_index":275,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":285,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["characters",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UrlsService.html":{}}}],["check",{"_index":559,"title":{},"body":{"injectables/UrlsService.html":{}}}],["checks",{"_index":558,"title":{},"body":{"injectables/UrlsService.html":{}}}],["class",{"_index":24,"title":{"classes/Auth.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/URLNotFoundException.html":{},"classes/UpdateUrlDto.html":{},"classes/Users1724086805338.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"classes/URLNotFoundException.html":{},"classes/UpdateUrlDto.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":69,"title":{},"body":{"classes/Auth.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/URLNotFoundException.html":{},"classes/UpdateUrlDto.html":{},"classes/Users1724086805338.html":{},"overview.html":{}}}],["click",{"_index":536,"title":{},"body":{"injectables/UrlsService.html":{},"index.html":{}}}],["click_count",{"_index":224,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"entities/Url.html":{}}}],["clickcount",{"_index":394,"title":{},"body":{"entities/Url.html":{},"injectables/UrlsService.html":{}}}],["clone",{"_index":791,"title":{},"body":{"index.html":{}}}],["clone:example",{"_index":789,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_urlsmodule",{"_index":490,"title":{},"body":{"modules/UrlsModule.html":{},"overview.html":{}}}],["cluster_urlsmodule_imports",{"_index":491,"title":{},"body":{"modules/UrlsModule.html":{}}}],["cluster_urlsmodule_providers",{"_index":492,"title":{},"body":{"modules/UrlsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":652,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":655,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":653,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":654,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":413,"title":{},"body":{"entities/Url.html":{},"entities/User.html":{}}}],["column({length",{"_index":403,"title":{},"body":{"entities/Url.html":{}}}],["column({name",{"_index":397,"title":{},"body":{"entities/Url.html":{}}}],["column({type",{"_index":410,"title":{},"body":{"entities/Url.html":{}}}],["common/constants/constants",{"_index":580,"title":{},"body":{"injectables/UrlsService.html":{}}}],["common/constants/validation",{"_index":191,"title":{},"body":{"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{}}}],["comparepassword",{"_index":670,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["comparepassword(password",{"_index":687,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["complete",{"_index":828,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":814,"title":{},"body":{"index.html":{}}}],["compose",{"_index":787,"title":{},"body":{"index.html":{}}}],["config",{"_index":706,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["configmodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configservice",{"_index":875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('database_host",{"_index":877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('database_name",{"_index":879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('database_password",{"_index":882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('database_port",{"_index":878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('database_schema",{"_index":880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('database_user",{"_index":881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conflictexception",{"_index":259,"title":{},"body":{"classes/EmailIsRegisteredException.html":{},"classes/URLNotFoundException.html":{}}}],["console.log(process.env.jwt_secret",{"_index":345,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["const",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalStrategy.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constraint",{"_index":362,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{}}}],["constructor",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"classes/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/URLNotFoundException.html":{},"injectables/UrlsService.html":{},"injectables/UsersService.html":{}}}],["constructor(_urlrepository",{"_index":507,"title":{},"body":{"injectables/UrlsService.html":{}}}],["constructor(_userrepository",{"_index":661,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(_usersservice",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(authservice",{"_index":373,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(logger",{"_index":272,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["constructor(private",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalStrategy.html":{},"controllers/UrlsController.html":{},"controllers/UsersController.html":{}}}],["containing",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UrlsService.html":{}}}],["context",{"_index":327,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalAuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UrlsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UrlsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('/app",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["controller('auth",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":648,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["count",{"_index":537,"title":{},"body":{"injectables/UrlsService.html":{},"index.html":{}}}],["coverage",{"_index":689,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":198,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/UpdateUrlDto.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["create(@body",{"_index":650,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(createuserdto",{"_index":639,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(undefined",{"_index":511,"title":{},"body":{"injectables/UrlsService.html":{}}}],["createbyuser",{"_index":499,"title":{},"body":{"injectables/UrlsService.html":{}}}],["createbyuser(userid",{"_index":520,"title":{},"body":{"injectables/UrlsService.html":{}}}],["created_at",{"_index":227,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"entities/Url.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{}}}],["createdat",{"_index":313,"title":{},"body":{"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"entities/Url.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["createdatecolumn",{"_index":414,"title":{},"body":{"entities/Url.html":{},"entities/User.html":{}}}],["createdatecolumn({type",{"_index":399,"title":{},"body":{"entities/Url.html":{},"entities/User.html":{}}}],["creates",{"_index":513,"title":{},"body":{"injectables/UrlsService.html":{}}}],["createurldto",{"_index":171,"title":{"classes/CreateUrlDto.html":{}},"body":{"classes/CreateUrlDto.html":{},"classes/UpdateUrlDto.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"coverage.html":{}}}],["createurldto})@apiresponse({status",{"_index":442,"title":{},"body":{"controllers/UrlsController.html":{}}}],["createurlstable1724011503102",{"_index":196,"title":{"classes/CreateUrlsTable1724011503102.html":{}},"body":{"classes/CreateUrlsTable1724011503102.html":{},"coverage.html":{}}}],["createuserdto",{"_index":233,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto})@apiresponse({status",{"_index":643,"title":{},"body":{"controllers/UsersController.html":{}}}],["creating",{"_index":585,"title":{},"body":{"injectables/UrlsService.html":{}}}],["credentials",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["ctx",{"_index":288,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":291,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":290,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["currently",{"_index":553,"title":{},"body":{"injectables/UrlsService.html":{}}}],["data",{"_index":574,"title":{},"body":{"injectables/UrlsService.html":{}}}],["data_source",{"_index":699,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":517,"title":{},"body":{"injectables/UrlsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["database.providers",{"_index":254,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["database_host",{"_index":781,"title":{},"body":{"index.html":{}}}],["database_name",{"_index":783,"title":{},"body":{"index.html":{}}}],["database_password",{"_index":785,"title":{},"body":{"index.html":{}}}],["database_port=5432",{"_index":782,"title":{},"body":{"index.html":{}}}],["database_schema=public",{"_index":786,"title":{},"body":{"index.html":{}}}],["database_user",{"_index":784,"title":{},"body":{"index.html":{}}}],["databasemodule",{"_index":44,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseproviders",{"_index":253,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasource(config",{"_index":872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasource.getrepository(url",{"_index":889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasource.getrepository(user",{"_index":890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasource.initialize",{"_index":883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasourceoptions",{"_index":856,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":314,"title":{},"body":{"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"entities/Url.html":{},"injectables/UrlsService.html":{},"entities/User.html":{}}}],["date().toisostring",{"_index":304,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["db",{"_index":788,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":225,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"entities/Url.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":548,"title":{},"body":{"injectables/UrlsService.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"classes/URLNotFoundException.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":367,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{},"controllers/UrlsController.html":{}}}],["delete('url/:id",{"_index":484,"title":{},"body":{"controllers/UrlsController.html":{}}}],["deleted",{"_index":531,"title":{},"body":{"injectables/UrlsService.html":{}}}],["deleted_at",{"_index":231,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"entities/Url.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{}}}],["deletedat",{"_index":316,"title":{},"body":{"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"entities/Url.html":{},"injectables/UrlsService.html":{},"entities/User.html":{}}}],["dependencies",{"_index":34,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependencies:example",{"_index":795,"title":{},"body":{"index.html":{}}}],["description",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"properties.html":{}}}],["desired",{"_index":547,"title":{},"body":{"injectables/UrlsService.html":{}}}],["detailed",{"_index":533,"title":{},"body":{"injectables/UrlsService.html":{}}}],["details",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["doc",{"_index":816,"title":{},"body":{"index.html":{}}}],["doc/json",{"_index":817,"title":{},"body":{"index.html":{}}}],["docker",{"_index":776,"title":{},"body":{"index.html":{}}}],["docs",{"_index":823,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":690,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["domain_default",{"_index":711,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["don't",{"_index":805,"title":{},"body":{"index.html":{}}}],["dotenv",{"_index":741,"title":{},"body":{"dependencies.html":{}}}],["down",{"_index":204,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/Users1724086805338.html":{}}}],["down(queryrunner",{"_index":206,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/Users1724086805338.html":{}}}],["drop",{"_index":232,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/Users1724086805338.html":{}}}],["dto/create",{"_index":460,"title":{},"body":{"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":462,"title":{},"body":{"controllers/UrlsController.html":{},"injectables/UrlsService.html":{}}}],["email",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"classes/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["email_is_registered",{"_index":887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emailisregisteredexception",{"_index":255,"title":{"classes/EmailIsRegisteredException.html":{}},"body":{"classes/EmailIsRegisteredException.html":{},"classes/URLNotFoundException.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["encriptedpassword",{"_index":758,"title":{},"body":{"miscellaneous/functions.html":{}}}],["entities",{"_index":392,"title":{},"body":{"entities/Url.html":{},"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/url.entity",{"_index":583,"title":{},"body":{"injectables/UrlsService.html":{}}}],["entities/url.providers",{"_index":496,"title":{},"body":{"modules/UrlsModule.html":{}}}],["entities/user.entity",{"_index":669,"title":{},"body":{"injectables/UsersService.html":{}}}],["entities/user.providers",{"_index":659,"title":{},"body":{"modules/UsersModule.html":{}}}],["entity",{"_index":391,"title":{"entities/Url.html":{},"entities/User.html":{}},"body":{"entities/Url.html":{},"entities/User.html":{},"coverage.html":{},"index.html":{}}}],["entity('urls",{"_index":416,"title":{},"body":{"entities/Url.html":{}}}],["entity('users",{"_index":629,"title":{},"body":{"entities/User.html":{}}}],["entity.{js,ts",{"_index":870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entitynotfounderror",{"_index":582,"title":{},"body":{"injectables/UrlsService.html":{}}}],["env",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{}}}],["envfilepath",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{}}}],["environment",{"_index":777,"title":{},"body":{"index.html":{}}}],["er",{"_index":826,"title":{},"body":{"index.html":{}}}],["err",{"_index":330,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":263,"title":{},"body":{"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"classes/URLNotFoundException.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"injectables/UsersService.html":{}}}],["error_messages",{"_index":262,"title":{},"body":{"classes/EmailIsRegisteredException.html":{},"classes/URLNotFoundException.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":461,"title":{},"body":{"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"injectables/UsersService.html":{}}}],["errors.ts",{"_index":257,"title":{},"body":{"classes/EmailIsRegisteredException.html":{},"classes/URLNotFoundException.html":{},"coverage.html":{}}}],["errors.ts:10",{"_index":260,"title":{},"body":{"classes/EmailIsRegisteredException.html":{}}}],["errors.ts:4",{"_index":385,"title":{},"body":{"classes/URLNotFoundException.html":{}}}],["example",{"_index":181,"title":{},"body":{"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{},"index.html":{}}}],["example@example.com",{"_index":249,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["example@example.com'})@isnotempty({message",{"_index":236,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["exception",{"_index":280,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":269,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:12",{"_index":273,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:15",{"_index":279,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse()['message",{"_index":292,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":297,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":270,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["execute",{"_index":802,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":325,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalAuthGuard.html":{}}}],["existing",{"_index":518,"title":{},"body":{"injectables/UrlsService.html":{}}}],["exists",{"_index":214,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"injectables/UrlsService.html":{},"classes/Users1724086805338.html":{}}}],["expiresin",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"classes/URLNotFoundException.html":{},"classes/UpdateUrlDto.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":284,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/UrlsController.html":{},"dependencies.html":{}}}],["extends",{"_index":258,"title":{},"body":{"classes/EmailIsRegisteredException.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"classes/URLNotFoundException.html":{},"classes/UpdateUrlDto.html":{}}}],["extractjwt",{"_index":342,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":348,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["false",{"_index":350,"title":{},"body":{"classes/JwtStrategy.html":{},"injectables/UrlsService.html":{},"miscellaneous/variables.html":{}}}],["features",{"_index":772,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"classes/URLNotFoundException.html":{},"classes/UpdateUrlDto.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findbyuserid",{"_index":419,"title":{},"body":{"controllers/UrlsController.html":{},"injectables/UrlsService.html":{}}}],["findbyuserid(@param('id",{"_index":482,"title":{},"body":{"controllers/UrlsController.html":{}}}],["findbyuserid(userid",{"_index":424,"title":{},"body":{"controllers/UrlsController.html":{},"injectables/UrlsService.html":{}}}],["fk_user_url",{"_index":363,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{}}}],["folder",{"_index":824,"title":{},"body":{"index.html":{}}}],["foreign",{"_index":364,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{}}}],["found",{"_index":472,"title":{},"body":{"controllers/UrlsController.html":{},"miscellaneous/variables.html":{}}}],["found.'})@get(':hash",{"_index":434,"title":{},"body":{"controllers/UrlsController.html":{}}}],["function",{"_index":710,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":755,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["future",{"_index":829,"title":{},"body":{"index.html":{}}}],["generate",{"_index":812,"title":{},"body":{"index.html":{}}}],["generated",{"_index":821,"title":{},"body":{"index.html":{}}}],["generatehash",{"_index":500,"title":{},"body":{"injectables/UrlsService.html":{}}}],["generatehash(length",{"_index":538,"title":{},"body":{"injectables/UrlsService.html":{}}}],["generatehashpassword",{"_index":671,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["generatehashpassword(password",{"_index":678,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["generates",{"_index":540,"title":{},"body":{"injectables/UrlsService.html":{}}}],["get(':hash",{"_index":473,"title":{},"body":{"controllers/UrlsController.html":{}}}],["get('url/user/:id",{"_index":481,"title":{},"body":{"controllers/UrlsController.html":{}}}],["gethello",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getoriginalurlbyhash",{"_index":501,"title":{},"body":{"injectables/UrlsService.html":{}}}],["getoriginalurlbyhash(hash",{"_index":549,"title":{},"body":{"injectables/UrlsService.html":{}}}],["getting",{"_index":759,"title":{"index.html":{}},"body":{}}],["getvalidhash",{"_index":502,"title":{},"body":{"injectables/UrlsService.html":{}}}],["git",{"_index":790,"title":{},"body":{"index.html":{}}}],["given",{"_index":515,"title":{},"body":{"injectables/UrlsService.html":{}}}],["graph",{"_index":836,"title":{},"body":{"modules.html":{}}}],["guards/local",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["handler",{"_index":612,"title":{},"body":{"injectables/UrlsService.html":{}}}],["handler(url",{"_index":617,"title":{},"body":{"injectables/UrlsService.html":{}}}],["handlerequest",{"_index":323,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":328,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["hash",{"_index":220,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"index.html":{}}}],["hash.length",{"_index":596,"title":{},"body":{"injectables/UrlsService.html":{}}}],["hashexists",{"_index":609,"title":{},"body":{"injectables/UrlsService.html":{}}}],["hashinuse",{"_index":503,"title":{},"body":{"injectables/UrlsService.html":{}}}],["hashinuse(hash",{"_index":556,"title":{},"body":{"injectables/UrlsService.html":{}}}],["hashpassword",{"_index":677,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashvalid",{"_index":603,"title":{},"body":{"injectables/UrlsService.html":{}}}],["hashvalid.length",{"_index":604,"title":{},"body":{"injectables/UrlsService.html":{}}}],["haven't",{"_index":530,"title":{},"body":{"injectables/UrlsService.html":{}}}],["headers",{"_index":810,"title":{},"body":{"index.html":{}}}],["hello",{"_index":66,"title":{},"body":{"injectables/AppService.html":{}}}],["host",{"_index":277,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":289,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["http://localhost",{"_index":884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpexception",{"_index":276,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":267,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://github.com/jonlima/url",{"_index":792,"title":{},"body":{"index.html":{}}}],["https://google.com/very/long/url",{"_index":182,"title":{},"body":{"classes/CreateUrlDto.html":{}}}],["https://jonlima.github.io/url",{"_index":819,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":282,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":298,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["icreateuser",{"_index":308,"title":{"interfaces/ICreateUser.html":{}},"body":{"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["id",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUrlsTable1724011503102.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"classes/JwtStrategy.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["identifier",{"_index":524,"title":{},"body":{"injectables/UrlsService.html":{},"coverage.html":{}}}],["ignoreexpiration",{"_index":349,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["implements",{"_index":201,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/HttpExceptionFilter.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/Users1724086805338.html":{}}}],["import",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"classes/URLNotFoundException.html":{},"classes/UpdateUrlDto.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{}}}],["including",{"_index":535,"title":{},"body":{"injectables/UrlsService.html":{}}}],["increaseclickcount",{"_index":504,"title":{},"body":{"injectables/UrlsService.html":{}}}],["increaseclickcount(urlid",{"_index":560,"title":{},"body":{"injectables/UrlsService.html":{}}}],["incremented",{"_index":565,"title":{},"body":{"injectables/UrlsService.html":{}}}],["increments",{"_index":562,"title":{},"body":{"injectables/UrlsService.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index('urls_hash_index",{"_index":415,"title":{},"body":{"entities/Url.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"classes/URLNotFoundException.html":{},"classes/UpdateUrlDto.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":534,"title":{},"body":{"injectables/UrlsService.html":{}}}],["inject",{"_index":577,"title":{},"body":{"injectables/UrlsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["inject(urls_repository",{"_index":584,"title":{},"body":{"injectables/UrlsService.html":{}}}],["inject(users_repository",{"_index":674,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectable",{"_index":62,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"injectables/UrlsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"injectables/UrlsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":63,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"injectables/UrlsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["install",{"_index":794,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":296,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{}}}],["int",{"_index":219,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{}}}],["integer",{"_index":411,"title":{},"body":{"entities/Url.html":{}}}],["interface",{"_index":307,"title":{"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{}},"body":{"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"coverage.html":{}}}],["interfaces",{"_index":309,"title":{},"body":{"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"overview.html":{}}}],["interfaces/user.interface",{"_index":673,"title":{},"body":{"injectables/UsersService.html":{}}}],["invalid",{"_index":447,"title":{},"body":{"controllers/UrlsController.html":{}}}],["ipayloaduser",{"_index":317,"title":{"interfaces/IPayloadUser.html":{}},"body":{"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"classes/JwtStrategy.html":{},"controllers/UrlsController.html":{},"coverage.html":{}}}],["isemail",{"_index":237,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["isinuse",{"_index":606,"title":{},"body":{"injectables/UrlsService.html":{}}}],["isnotempty",{"_index":187,"title":{},"body":{"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{}}}],["isnull",{"_index":581,"title":{},"body":{"injectables/UrlsService.html":{}}}],["isregisteredemail",{"_index":675,"title":{},"body":{"injectables/UsersService.html":{}}}],["isstring",{"_index":248,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["isstring({message",{"_index":240,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":184,"title":{},"body":{"classes/CreateUrlDto.html":{},"miscellaneous/variables.html":{}}}],["isvalid",{"_index":686,"title":{},"body":{"injectables/UsersService.html":{}}}],["item",{"_index":613,"title":{},"body":{"injectables/UrlsService.html":{}}}],["item['url",{"_index":615,"title":{},"body":{"injectables/UrlsService.html":{}}}],["iuser",{"_index":135,"title":{"interfaces/IUser.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"coverage.html":{}}}],["json.stringify(message",{"_index":300,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["jwt",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":318,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/UrlsController.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":700,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":347,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["jwtmodule",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":113,"title":{"classes/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"classes/JwtStrategy.html":{},"coverage.html":{}}}],["key",{"_index":217,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/Users1724086805338.html":{}}}],["legend",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Url.html":{},"injectables/UrlsService.html":{}}}],["length(8",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":845,"title":{},"body":{"properties.html":{}}}],["link",{"_index":356,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{},"coverage.html":{}}}],["linkusertourl1724098604809",{"_index":354,"title":{"classes/LinkUserToUrl1724098604809.html":{}},"body":{"classes/LinkUserToUrl1724098604809.html":{},"coverage.html":{}}}],["list",{"_index":532,"title":{},"body":{"injectables/UrlsService.html":{}}}],["local",{"_index":377,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":90,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":105,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logger",{"_index":274,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["logger('urlsservice",{"_index":576,"title":{},"body":{"injectables/UrlsService.html":{}}}],["logger(httpexceptionfilter.name",{"_index":287,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["logger(urlscontroller.name",{"_index":464,"title":{},"body":{"controllers/UrlsController.html":{}}}],["logger(userscontroller.name",{"_index":649,"title":{},"body":{"controllers/UsersController.html":{}}}],["logger(usersservice.name",{"_index":666,"title":{},"body":{"injectables/UsersService.html":{}}}],["logging",{"_index":868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@request",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["logs",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{}}}],["marks",{"_index":568,"title":{},"body":{"injectables/UrlsService.html":{}}}],["matching",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"classes/URLNotFoundException.html":{},"classes/UpdateUrlDto.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":185,"title":{},"body":{"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{}}}],["messages",{"_index":192,"title":{},"body":{"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailIsRegisteredException.html":{},"classes/URLNotFoundException.html":{}}}],["messages.ts",{"_index":702,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":749,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":809,"title":{},"body":{"index.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["migrationinterface",{"_index":202,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/Users1724086805338.html":{}}}],["migrations",{"_index":803,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["migrations/*.{js,ts",{"_index":871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":754,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":801,"title":{},"body":{"index.html":{}}}],["model",{"_index":827,"title":{},"body":{"index.html":{}}}],["module",{"_index":31,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":33,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["name",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["needs",{"_index":179,"title":{},"body":{"classes/CreateUrlDto.html":{}}}],["nestjs",{"_index":770,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"classes/URLNotFoundException.html":{},"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"injectables/UrlsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":729,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUrlDto.html":{},"controllers/UrlsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":286,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newurl",{"_index":591,"title":{},"body":{"injectables/UrlsService.html":{}}}],["newuser",{"_index":679,"title":{},"body":{"injectables/UsersService.html":{}}}],["nodejs",{"_index":768,"title":{},"body":{"index.html":{}}}],["none",{"_index":811,"title":{},"body":{"index.html":{}}}],["note",{"_index":799,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":261,"title":{},"body":{"classes/EmailIsRegisteredException.html":{},"classes/URLNotFoundException.html":{}}}],["now",{"_index":229,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"entities/Url.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{}}}],["npm",{"_index":796,"title":{},"body":{"index.html":{}}}],["null",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/UrlsService.html":{},"classes/Users1724086805338.html":{},"injectables/UsersService.html":{}}}],["nullable",{"_index":401,"title":{},"body":{"entities/Url.html":{},"entities/User.html":{}}}],["number",{"_index":312,"title":{},"body":{"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["number(process.env.database_port",{"_index":860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UrlsService.html":{},"miscellaneous/variables.html":{}}}],["occurred",{"_index":294,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["one",{"_index":523,"title":{},"body":{"injectables/UrlsService.html":{}}}],["online",{"_index":818,"title":{},"body":{"index.html":{}}}],["optional",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["optionalauthguard",{"_index":382,"title":{"injectables/OptionalAuthGuard.html":{}},"body":{"injectables/OptionalAuthGuard.html":{},"controllers/UrlsController.html":{},"coverage.html":{}}}],["original",{"_index":177,"title":{},"body":{"classes/CreateUrlDto.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"index.html":{}}}],["original_url",{"_index":223,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"entities/Url.html":{}}}],["originalurl",{"_index":175,"title":{},"body":{"classes/CreateUrlDto.html":{},"entities/Url.html":{},"injectables/UrlsService.html":{},"index.html":{}}}],["otherwise",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UrlsService.html":{}}}],["out",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":838,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":724,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{}}}],["param('id",{"_index":488,"title":{},"body":{"controllers/UrlsController.html":{}}}],["parameters",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["part",{"_index":551,"title":{},"body":{"injectables/UrlsService.html":{}}}],["partialtype",{"_index":389,"title":{},"body":{"classes/UpdateUrlDto.html":{}}}],["partialtype(createurldto",{"_index":388,"title":{},"body":{"classes/UpdateUrlDto.html":{}}}],["pass",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":344,"title":{},"body":{"classes/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":341,"title":{},"body":{"classes/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":336,"title":{},"body":{"classes/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":380,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["password",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["passwordfield",{"_index":379,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["path",{"_index":305,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["payload",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtStrategy.html":{}}}],["payload.email",{"_index":353,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["payload.id",{"_index":352,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["pg",{"_index":746,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["pick",{"_index":311,"title":{},"body":{"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{}}}],["please",{"_index":892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["port",{"_index":859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["port_default",{"_index":712,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UrlsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["post('/login",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apioperation({summary",{"_index":640,"title":{},"body":{"controllers/UsersController.html":{}}}],["postgres",{"_index":857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["postgresql",{"_index":771,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["prerequisites",{"_index":775,"title":{},"body":{"index.html":{}}}],["primary",{"_index":216,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/Users1724086805338.html":{}}}],["primarygeneratedcolumn",{"_index":406,"title":{},"body":{"entities/Url.html":{},"entities/User.html":{}}}],["private",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process.env.api_domain}:${process.env.app_port}/${hash",{"_index":589,"title":{},"body":{"injectables/UrlsService.html":{}}}],["process.env.api_domain}:${process.env.app_port}/${item.hash",{"_index":614,"title":{},"body":{"injectables/UrlsService.html":{}}}],["process.env.database_host",{"_index":858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.database_name",{"_index":861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.database_password",{"_index":866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.database_schema",{"_index":863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.database_user",{"_index":865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.jwt_secret",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{},"classes/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["project",{"_index":774,"title":{},"body":{"index.html":{}}}],["promise",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalStrategy.html":{},"injectables/UrlsService.html":{},"classes/Users1724086805338.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":174,"title":{"properties.html":{}},"body":{"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"entities/Url.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["property",{"_index":193,"title":{},"body":{"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["provide",{"_index":873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":467,"title":{},"body":{"controllers/UrlsController.html":{}}}],["provided.'})@post",{"_index":448,"title":{},"body":{"controllers/UrlsController.html":{}}}],["providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["provides",{"_index":764,"title":{},"body":{"index.html":{}}}],["public",{"_index":203,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/Users1724086805338.html":{}}}],["put",{"_index":454,"title":{},"body":{"controllers/UrlsController.html":{},"index.html":{}}}],["put('url/:id",{"_index":487,"title":{},"body":{"controllers/UrlsController.html":{}}}],["queryrunner",{"_index":207,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/Users1724086805338.html":{}}}],["queryrunner.query",{"_index":212,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/Users1724086805338.html":{}}}],["queryrunner.query(`alter",{"_index":369,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{}}}],["random",{"_index":541,"title":{},"body":{"injectables/UrlsService.html":{}}}],["readonly",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["redirect",{"_index":420,"title":{},"body":{"controllers/UrlsController.html":{},"index.html":{}}}],["redirect(@param('hash",{"_index":474,"title":{},"body":{"controllers/UrlsController.html":{}}}],["redirect(hash",{"_index":427,"title":{},"body":{"controllers/UrlsController.html":{}}}],["references",{"_index":365,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{}}}],["reflect",{"_index":748,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":641,"title":{},"body":{"controllers/UsersController.html":{}}}],["registered",{"_index":888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["relationship",{"_index":825,"title":{},"body":{"index.html":{}}}],["remove",{"_index":421,"title":{},"body":{"controllers/UrlsController.html":{}}}],["remove(@param('id",{"_index":485,"title":{},"body":{"controllers/UrlsController.html":{}}}],["remove(id",{"_index":436,"title":{},"body":{"controllers/UrlsController.html":{}}}],["removebyuserid",{"_index":505,"title":{},"body":{"injectables/UrlsService.html":{}}}],["removebyuserid(userid",{"_index":566,"title":{},"body":{"injectables/UrlsService.html":{}}}],["removed",{"_index":569,"title":{},"body":{"injectables/UrlsService.html":{}}}],["repository",{"_index":508,"title":{},"body":{"injectables/UrlsService.html":{},"injectables/UsersService.html":{}}}],["req",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"controllers/UrlsController.html":{}}}],["req.user",{"_index":468,"title":{},"body":{"controllers/UrlsController.html":{}}}],["req.user?.id",{"_index":469,"title":{},"body":{"controllers/UrlsController.html":{}}}],["request",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/UrlsController.html":{},"index.html":{}}}],["request.url",{"_index":306,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["required",{"_index":891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res",{"_index":428,"title":{},"body":{"controllers/UrlsController.html":{}}}],["res.redirect(result.url",{"_index":478,"title":{},"body":{"controllers/UrlsController.html":{}}}],["reset",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":283,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/UrlsController.html":{},"index.html":{}}}],["response.status(status).json",{"_index":301,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["result",{"_index":476,"title":{},"body":{"controllers/UrlsController.html":{}}}],["results",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"classes/URLNotFoundException.html":{},"classes/UpdateUrlDto.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":527,"title":{},"body":{"injectables/UrlsService.html":{}}}],["return",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["route",{"_index":808,"title":{},"body":{"index.html":{}}}],["routes",{"_index":807,"title":{},"body":{"index.html":{}}}],["run",{"_index":773,"title":{},"body":{"index.html":{}}}],["run:example",{"_index":797,"title":{},"body":{"index.html":{}}}],["running",{"_index":800,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":751,"title":{},"body":{"dependencies.html":{}}}],["salt_rounds",{"_index":722,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["saved",{"_index":822,"title":{},"body":{"index.html":{}}}],["saveduser",{"_index":681,"title":{},"body":{"injectables/UsersService.html":{}}}],["saveduser.createdat",{"_index":685,"title":{},"body":{"injectables/UsersService.html":{}}}],["saveduser.email",{"_index":684,"title":{},"body":{"injectables/UsersService.html":{}}}],["saveduser.id",{"_index":683,"title":{},"body":{"injectables/UsersService.html":{}}}],["schema",{"_index":862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scope",{"_index":830,"title":{},"body":{"index.html":{}}}],["secret",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":351,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["select",{"_index":611,"title":{},"body":{"injectables/UrlsService.html":{}}}],["serial",{"_index":215,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/Users1724086805338.html":{}}}],["service",{"_index":766,"title":{},"body":{"index.html":{}}}],["set",{"_index":368,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{}}}],["short",{"_index":514,"title":{},"body":{"injectables/UrlsService.html":{}}}],["shorten",{"_index":422,"title":{},"body":{"controllers/UrlsController.html":{}}}],["shorten(createurldto",{"_index":439,"title":{},"body":{"controllers/UrlsController.html":{}}}],["shortene",{"_index":820,"title":{},"body":{"index.html":{}}}],["shortened",{"_index":180,"title":{},"body":{"classes/CreateUrlDto.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"index.html":{}}}],["shortener",{"_index":761,"title":{},"body":{"index.html":{}}}],["shortener.git",{"_index":793,"title":{},"body":{"index.html":{}}}],["shortening",{"_index":765,"title":{},"body":{"index.html":{}}}],["shorturl",{"_index":588,"title":{},"body":{"injectables/UrlsService.html":{},"index.html":{}}}],["signoptions",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailIsRegisteredException.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"classes/URLNotFoundException.html":{},"classes/UpdateUrlDto.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["source.ts",{"_index":705,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["specific",{"_index":529,"title":{},"body":{"injectables/UrlsService.html":{}}}],["specified",{"_index":542,"title":{},"body":{"injectables/UrlsService.html":{}}}],["src/.../constants.ts",{"_index":848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../data",{"_index":849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.providers.ts",{"_index":850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../error",{"_index":851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":756,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../password.utils.ts",{"_index":757,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../url.providers.ts",{"_index":852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.providers.ts",{"_index":853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../validation",{"_index":854,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":64,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":65,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:13",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:19",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:28",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:7",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/entities/auth.entity.ts",{"_index":70,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":319,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/UrlsController.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":370,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/optional",{"_index":383,"title":{},"body":{"injectables/OptionalAuthGuard.html":{},"controllers/UrlsController.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":335,"title":{},"body":{"classes/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:15",{"_index":340,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:5",{"_index":338,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":372,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:16",{"_index":376,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:7",{"_index":374,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/common/constants/constants",{"_index":668,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/common/constants/constants.ts",{"_index":697,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/constants/validation",{"_index":701,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/errors/custom",{"_index":256,"title":{},"body":{"classes/EmailIsRegisteredException.html":{},"classes/URLNotFoundException.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/common/errors/error",{"_index":703,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/filters/http",{"_index":268,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/database/data",{"_index":704,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/database.module",{"_index":497,"title":{},"body":{"modules/UrlsModule.html":{},"modules/UsersModule.html":{}}}],["src/database/database.module.ts",{"_index":252,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/database.providers.ts",{"_index":708,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/1724011503102",{"_index":197,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"coverage.html":{}}}],["src/database/migrations/1724086805338",{"_index":631,"title":{},"body":{"classes/Users1724086805338.html":{},"coverage.html":{}}}],["src/database/migrations/1724098604809",{"_index":355,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":709,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/urls/dto/create",{"_index":172,"title":{},"body":{"classes/CreateUrlDto.html":{},"coverage.html":{}}}],["src/urls/dto/update",{"_index":387,"title":{},"body":{"classes/UpdateUrlDto.html":{},"coverage.html":{}}}],["src/urls/entities/url.entity.ts",{"_index":393,"title":{},"body":{"entities/Url.html":{},"coverage.html":{}}}],["src/urls/entities/url.entity.ts:13",{"_index":407,"title":{},"body":{"entities/Url.html":{}}}],["src/urls/entities/url.entity.ts:16",{"_index":412,"title":{},"body":{"entities/Url.html":{}}}],["src/urls/entities/url.entity.ts:19",{"_index":405,"title":{},"body":{"entities/Url.html":{}}}],["src/urls/entities/url.entity.ts:22",{"_index":408,"title":{},"body":{"entities/Url.html":{}}}],["src/urls/entities/url.entity.ts:25",{"_index":398,"title":{},"body":{"entities/Url.html":{}}}],["src/urls/entities/url.entity.ts:32",{"_index":400,"title":{},"body":{"entities/Url.html":{}}}],["src/urls/entities/url.entity.ts:39",{"_index":409,"title":{},"body":{"entities/Url.html":{}}}],["src/urls/entities/url.entity.ts:46",{"_index":402,"title":{},"body":{"entities/Url.html":{}}}],["src/urls/entities/url.providers.ts",{"_index":714,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/urls/urls.controller.ts",{"_index":418,"title":{},"body":{"controllers/UrlsController.html":{},"coverage.html":{}}}],["src/urls/urls.controller.ts:42",{"_index":449,"title":{},"body":{"controllers/UrlsController.html":{}}}],["src/urls/urls.controller.ts:58",{"_index":435,"title":{},"body":{"controllers/UrlsController.html":{}}}],["src/urls/urls.controller.ts:75",{"_index":426,"title":{},"body":{"controllers/UrlsController.html":{}}}],["src/urls/urls.controller.ts:81",{"_index":438,"title":{},"body":{"controllers/UrlsController.html":{}}}],["src/urls/urls.controller.ts:88",{"_index":452,"title":{},"body":{"controllers/UrlsController.html":{}}}],["src/urls/urls.module.ts",{"_index":493,"title":{},"body":{"modules/UrlsModule.html":{}}}],["src/urls/urls.service.ts",{"_index":498,"title":{},"body":{"injectables/UrlsService.html":{},"coverage.html":{}}}],["src/urls/urls.service.ts:107",{"_index":552,"title":{},"body":{"injectables/UrlsService.html":{}}}],["src/urls/urls.service.ts:128",{"_index":539,"title":{},"body":{"injectables/UrlsService.html":{}}}],["src/urls/urls.service.ts:14",{"_index":509,"title":{},"body":{"injectables/UrlsService.html":{}}}],["src/urls/urls.service.ts:147",{"_index":557,"title":{},"body":{"injectables/UrlsService.html":{}}}],["src/urls/urls.service.ts:162",{"_index":526,"title":{},"body":{"injectables/UrlsService.html":{}}}],["src/urls/urls.service.ts:185",{"_index":522,"title":{},"body":{"injectables/UrlsService.html":{}}}],["src/urls/urls.service.ts:223",{"_index":567,"title":{},"body":{"injectables/UrlsService.html":{}}}],["src/urls/urls.service.ts:239",{"_index":571,"title":{},"body":{"injectables/UrlsService.html":{}}}],["src/urls/urls.service.ts:28",{"_index":512,"title":{},"body":{"injectables/UrlsService.html":{}}}],["src/urls/urls.service.ts:65",{"_index":550,"title":{},"body":{"injectables/UrlsService.html":{}}}],["src/urls/urls.service.ts:89",{"_index":561,"title":{},"body":{"injectables/UrlsService.html":{}}}],["src/users/dto/create",{"_index":234,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":622,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:11",{"_index":626,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:14",{"_index":625,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:17",{"_index":627,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:24",{"_index":623,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:31",{"_index":628,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:38",{"_index":624,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.providers.ts",{"_index":718,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/interfaces/user.interface",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtStrategy.html":{},"controllers/UrlsController.html":{}}}],["src/users/interfaces/user.interface.ts",{"_index":310,"title":{},"body":{"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"coverage.html":{}}}],["src/users/users.controller.ts",{"_index":638,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:17",{"_index":644,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":656,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/users.service.ts",{"_index":660,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:15",{"_index":662,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:22",{"_index":664,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:50",{"_index":665,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/password.utils",{"_index":672,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/password.utils.ts",{"_index":721,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["stack",{"_index":767,"title":{},"body":{"index.html":{}}}],["start:docker",{"_index":798,"title":{},"body":{"index.html":{}}}],["started",{"_index":760,"title":{"index.html":{}},"body":{}}],["statements",{"_index":691,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":295,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/UrlsController.html":{},"controllers/UsersController.html":{}}}],["statuscode",{"_index":302,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["strategies/jwt.strategy",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":343,"title":{},"body":{"classes/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["string})@apiresponse({status",{"_index":445,"title":{},"body":{"controllers/UrlsController.html":{}}}],["string})@isnotempty({message",{"_index":183,"title":{},"body":{"classes/CreateUrlDto.html":{}}}],["successfully",{"_index":444,"title":{},"body":{"controllers/UrlsController.html":{}}}],["summary",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UrlsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":346,"title":{},"body":{"classes/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super(error_messages.email_is_registered",{"_index":266,"title":{},"body":{"classes/EmailIsRegisteredException.html":{},"classes/URLNotFoundException.html":{}}}],["super(error_messages.url_not_found",{"_index":265,"title":{},"body":{"classes/EmailIsRegisteredException.html":{},"classes/URLNotFoundException.html":{}}}],["super.canactivate(context",{"_index":333,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalAuthGuard.html":{}}}],["support",{"_index":833,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":834,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":813,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":213,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/Users1724086805338.html":{},"coverage.html":{}}}],["table.ts",{"_index":200,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"coverage.html":{}}}],["table.ts:19",{"_index":208,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{}}}],["table.ts:4",{"_index":210,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{}}}],["tables",{"_index":804,"title":{},"body":{"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["this._jwtservice.sign(payload",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["this._urlrepository.create",{"_index":592,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this._urlrepository.find",{"_index":610,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this._urlrepository.findone",{"_index":587,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this._urlrepository.findoneorfail",{"_index":600,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this._urlrepository.findoneorfail(where",{"_index":597,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this._urlrepository.preload",{"_index":620,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this._urlrepository.save(newurl",{"_index":594,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this._urlrepository.save(updatebody",{"_index":621,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this._urlrepository.save(url",{"_index":602,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this._urlsservice.create(createurldto",{"_index":471,"title":{},"body":{"controllers/UrlsController.html":{}}}],["this._urlsservice.createbyuser(userid",{"_index":470,"title":{},"body":{"controllers/UrlsController.html":{}}}],["this._urlsservice.findbyuserid(userid",{"_index":483,"title":{},"body":{"controllers/UrlsController.html":{}}}],["this._urlsservice.getoriginalurlbyhash(hash",{"_index":477,"title":{},"body":{"controllers/UrlsController.html":{}}}],["this._urlsservice.removebyuserid(req.user.id",{"_index":486,"title":{},"body":{"controllers/UrlsController.html":{}}}],["this._urlsservice.updatebyuserid(req.user.id",{"_index":489,"title":{},"body":{"controllers/UrlsController.html":{}}}],["this._userrepository.create",{"_index":680,"title":{},"body":{"injectables/UsersService.html":{}}}],["this._userrepository.findone",{"_index":676,"title":{},"body":{"injectables/UsersService.html":{}}}],["this._userrepository.save(newuser",{"_index":682,"title":{},"body":{"injectables/UsersService.html":{}}}],["this._usersservice.validateuser(email",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.appservice.gethello",{"_index":28,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(req.user",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":381,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.generatehash",{"_index":605,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this.getvalidhash",{"_index":590,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this.hashinuse(hash",{"_index":607,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this.increaseclickcount(url.id",{"_index":598,"title":{},"body":{"injectables/UrlsService.html":{}}}],["this.logger.error",{"_index":299,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["this.logger.error(error",{"_index":479,"title":{},"body":{"controllers/UrlsController.html":{},"injectables/UrlsService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":651,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":334,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"injectables/UsersService.html":{}}}],["timestamp",{"_index":303,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/UrlsService.html":{}}}],["timestamptz",{"_index":228,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"entities/Url.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{}}}],["token",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["transfer",{"_index":575,"title":{},"body":{"injectables/UrlsService.html":{}}}],["transformer",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"entities/Url.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":475,"title":{},"body":{"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"injectables/UsersService.html":{}}}],["type",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUrlDto.html":{},"classes/CreateUrlsTable1724011503102.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtStrategy.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalAuthGuard.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":211,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"entities/Url.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormdatasource",{"_index":707,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":331,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":521,"title":{},"body":{"injectables/UrlsService.html":{},"injectables/UsersService.html":{}}}],["unexpected",{"_index":293,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["unique",{"_index":222,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"entities/Url.html":{},"classes/Users1724086805338.html":{}}}],["unknown",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UrlsController.html":{}}}],["unlicensed",{"_index":846,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":555,"title":{},"body":{"injectables/UrlsService.html":{}}}],["up",{"_index":205,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/Users1724086805338.html":{}}}],["up(queryrunner",{"_index":209,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"classes/Users1724086805338.html":{}}}],["update",{"_index":423,"title":{},"body":{"controllers/UrlsController.html":{},"injectables/UrlsService.html":{}}}],["update(id",{"_index":450,"title":{},"body":{"controllers/UrlsController.html":{}}}],["updateat",{"_index":315,"title":{},"body":{"interfaces/ICreateUser.html":{},"interfaces/IPayloadUser.html":{},"interfaces/IUser.html":{}}}],["updatebody",{"_index":619,"title":{},"body":{"injectables/UrlsService.html":{}}}],["updatebyuserid",{"_index":506,"title":{},"body":{"injectables/UrlsService.html":{}}}],["updatebyuserid(userid",{"_index":570,"title":{},"body":{"injectables/UrlsService.html":{}}}],["updated",{"_index":573,"title":{},"body":{"injectables/UrlsService.html":{}}}],["updated_at",{"_index":230,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"entities/Url.html":{},"entities/User.html":{},"classes/Users1724086805338.html":{}}}],["updatedat",{"_index":395,"title":{},"body":{"entities/Url.html":{},"injectables/UrlsService.html":{},"entities/User.html":{}}}],["updates",{"_index":572,"title":{},"body":{"injectables/UrlsService.html":{}}}],["updateurldto",{"_index":386,"title":{"classes/UpdateUrlDto.html":{}},"body":{"classes/UpdateUrlDto.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"coverage.html":{}}}],["url",{"_index":178,"title":{"entities/Url.html":{}},"body":{"classes/CreateUrlDto.html":{},"entities/Url.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["url's",{"_index":525,"title":{},"body":{"injectables/UrlsService.html":{}}}],["url'})@apibody({type",{"_index":441,"title":{},"body":{"controllers/UrlsController.html":{}}}],["url'})@apiresponse({status",{"_index":430,"title":{},"body":{"controllers/UrlsController.html":{}}}],["url.'})@apiresponse({status",{"_index":432,"title":{},"body":{"controllers/UrlsController.html":{}}}],["url.clickcount",{"_index":601,"title":{},"body":{"injectables/UrlsService.html":{}}}],["url.deletedat",{"_index":618,"title":{},"body":{"injectables/UrlsService.html":{}}}],["url.dto",{"_index":390,"title":{},"body":{"classes/UpdateUrlDto.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{}}}],["url.dto.ts",{"_index":173,"title":{},"body":{"classes/CreateUrlDto.html":{},"classes/UpdateUrlDto.html":{},"coverage.html":{}}}],["url.dto.ts:15",{"_index":186,"title":{},"body":{"classes/CreateUrlDto.html":{}}}],["url.originalurl",{"_index":599,"title":{},"body":{"injectables/UrlsService.html":{}}}],["url.ts",{"_index":357,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{},"coverage.html":{}}}],["url.ts:10",{"_index":358,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{}}}],["url.ts:4",{"_index":359,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{}}}],["url_not_found",{"_index":886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urlexists",{"_index":586,"title":{},"body":{"injectables/UrlsService.html":{}}}],["urlid",{"_index":564,"title":{},"body":{"injectables/UrlsService.html":{}}}],["urlnotfoundexception",{"_index":264,"title":{"classes/URLNotFoundException.html":{}},"body":{"classes/EmailIsRegisteredException.html":{},"classes/URLNotFoundException.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"coverage.html":{}}}],["urlproviders",{"_index":495,"title":{},"body":{"modules/UrlsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["urls",{"_index":199,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/UrlsService.html":{},"coverage.html":{},"index.html":{}}}],["urls.controller",{"_index":494,"title":{},"body":{"modules/UrlsModule.html":{}}}],["urls.foreach((url",{"_index":616,"title":{},"body":{"injectables/UrlsService.html":{}}}],["urls.service",{"_index":459,"title":{},"body":{"controllers/UrlsController.html":{},"modules/UrlsModule.html":{}}}],["urls/urls.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["urls_repository",{"_index":579,"title":{},"body":{"injectables/UrlsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["urlsaved",{"_index":593,"title":{},"body":{"injectables/UrlsService.html":{}}}],["urlsaved.id",{"_index":595,"title":{},"body":{"injectables/UrlsService.html":{}}}],["urlscontroller",{"_index":417,"title":{"controllers/UrlsController.html":{}},"body":{"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"coverage.html":{}}}],["urlsmodule",{"_index":45,"title":{"modules/UrlsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UrlsModule.html":{},"modules.html":{},"overview.html":{}}}],["urlsservice",{"_index":458,"title":{"injectables/UrlsService.html":{}},"body":{"controllers/UrlsController.html":{},"modules/UrlsModule.html":{},"injectables/UrlsService.html":{},"coverage.html":{},"overview.html":{}}}],["use",{"_index":554,"title":{},"body":{"injectables/UrlsService.html":{}}}],["usefactory",{"_index":874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UrlsController.html":{}}}],["useguards(jwtauthguard",{"_index":480,"title":{},"body":{"controllers/UrlsController.html":{}}}],["useguards(jwtauthguard)@delete('url/:id",{"_index":437,"title":{},"body":{"controllers/UrlsController.html":{}}}],["useguards(jwtauthguard)@get('url/user/:id",{"_index":425,"title":{},"body":{"controllers/UrlsController.html":{}}}],["useguards(jwtauthguard)@put('url/:id')@apioperation({summary",{"_index":451,"title":{},"body":{"controllers/UrlsController.html":{}}}],["useguards(localauthguard",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('/login')@apioperation({summary",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(optionalauthguard",{"_index":466,"title":{},"body":{"controllers/UrlsController.html":{}}}],["useguards(optionalauthguard)@post()@apioperation({summary",{"_index":440,"title":{},"body":{"controllers/UrlsController.html":{}}}],["user",{"_index":138,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"classes/LinkUserToUrl1724098604809.html":{},"injectables/LocalStrategy.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UrlsService.html":{}}}],["user'})@apibody({type",{"_index":642,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.dto",{"_index":646,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":235,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":238,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:23",{"_index":247,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":688,"title":{},"body":{"injectables/UsersService.html":{}}}],["user_id",{"_index":218,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{},"classes/LinkUserToUrl1724098604809.html":{},"entities/Url.html":{}}}],["userid",{"_index":396,"title":{},"body":{"entities/Url.html":{},"controllers/UrlsController.html":{},"injectables/UrlsService.html":{}}}],["username",{"_index":864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usernamefield",{"_index":378,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userproviders",{"_index":658,"title":{},"body":{"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":635,"title":{},"body":{"classes/Users1724086805338.html":{},"controllers/UsersController.html":{}}}],["users\"(\"id",{"_index":366,"title":{},"body":{"classes/LinkUserToUrl1724098604809.html":{}}}],["users.controller",{"_index":657,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":645,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users.ts",{"_index":632,"title":{},"body":{"classes/Users1724086805338.html":{},"coverage.html":{}}}],["users.ts:17",{"_index":633,"title":{},"body":{"classes/Users1724086805338.html":{}}}],["users.ts:4",{"_index":634,"title":{},"body":{"classes/Users1724086805338.html":{}}}],["users/users.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["users1724086805338",{"_index":630,"title":{"classes/Users1724086805338.html":{}},"body":{"classes/Users1724086805338.html":{},"coverage.html":{}}}],["users_repository",{"_index":667,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":637,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":46,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":128,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":543,"title":{},"body":{"injectables/UrlsService.html":{},"index.html":{}}}],["valid",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UrlsService.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":337,"title":{},"body":{"classes/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":339,"title":{},"body":{"classes/JwtStrategy.html":{}}}],["validate(req",{"_index":375,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validates",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["validateuser(email",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["validationmessages",{"_index":190,"title":{},"body":{"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["validationmessages.isstring(property",{"_index":251,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validationmessages.isurl(property",{"_index":195,"title":{},"body":{"classes/CreateUrlDto.html":{}}}],["validationmessages.required(property",{"_index":194,"title":{},"body":{"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{}}}],["validator",{"_index":188,"title":{},"body":{"classes/CreateUrlDto.html":{},"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":545,"title":{},"body":{"injectables/UrlsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":221,"title":{},"body":{"classes/CreateUrlsTable1724011503102.html":{}}}],["varchar(255",{"_index":636,"title":{},"body":{"classes/Users1724086805338.html":{}}}],["variable",{"_index":698,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":778,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":519,"title":{},"body":{"injectables/UrlsService.html":{},"properties.html":{}}}],["void",{"_index":281,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["world",{"_index":67,"title":{},"body":{"injectables/AppService.html":{}}}],["worry",{"_index":806,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UrlsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /app\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller('/app')\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nUrlsModule\n\nUrlsModule\n\nAppModule -->\n\nUrlsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            UrlsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { UrlsModule } from './urls/urls.module';\nimport { DatabaseModule } from './database/database.module';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [\n    DatabaseModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    UrlsModule,\n    UsersModule,\n    AuthModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/auth.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Auth {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('/login')@ApiOperation({summary: 'Login (email, password)'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Request, UseGuards } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\nimport { ApiOperation } from '@nestjs/swagger';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @UseGuards(LocalAuthGuard)\n  @Post('/login')\n  @ApiOperation({ summary: 'Login (email, password)' })\n  async login(@Request() req) {\n    return this.authService.login(req.user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from 'src/users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    ConfigModule.forRoot({ isGlobal: true, envFilePath: '.env' }),\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: '10m' },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_usersService: UsersService, _jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Logs in a user and returns an access token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user object containing user details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { access_token: string; }\n\n                        \n                            \n                                \nAn object containing the JWT access token.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:19\n                        \n                    \n\n\n            \n                \n                        Validates a user's email and password.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user's email address.\n\n\n                                            \n                                        \n                                        \n                                                pass\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user's password.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe user object if valid credentials; otherwise null.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/users.service';\nimport { IUser } from 'src/users/interfaces/user.interface';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private _usersService: UsersService,\n    private _jwtService: JwtService,\n  ) {}\n\n  /**\n   * Validates a user's email and password.\n   * @param {string} email - The user's email address.\n   * @param {string} pass - The user's password.\n   * @returns {Promise} - The user object if valid credentials; otherwise null.\n   */\n  async validateUser(email: string, pass: string): Promise {\n    return await this._usersService.validateUser(email, pass);\n  }\n\n  /**\n   * Logs in a user and returns an access token.\n   * @param {IUser} user - The user object containing user details.\n   * @returns {{ access_token: string }} - An object containing the JWT access token.\n   */\n  login(user: IUser) {\n    const payload = { email: user.email, id: user.id };\n    return {\n      access_token: `Bearer ${this._jwtService.sign(payload)}`,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUrlDto.html":{"url":"classes/CreateUrlDto.html","title":"class - CreateUrlDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUrlDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/urls/dto/create-url.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                originalUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        originalUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The original URL that needs to be shortened', example: 'https://google.com/very/long/url', type: String})@IsNotEmpty({message:  => })@IsUrl({}, {message:  => })\n                        \n                    \n                \n                    \n                        \n                                Defined in src/urls/dto/create-url.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsUrl } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { ValidationMessages } from '../../common/constants/validation-messages';\n\nexport class CreateUrlDto {\n  @ApiProperty({\n    description: 'The original URL that needs to be shortened',\n    example: 'https://google.com/very/long/url',\n    type: String,\n  })\n  @IsNotEmpty({\n    message: ({ property }) => ValidationMessages.required(property),\n  })\n  @IsUrl({}, { message: ({ property }) => ValidationMessages.isUrl(property) })\n  originalUrl: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUrlsTable1724011503102.html":{"url":"classes/CreateUrlsTable1724011503102.html","title":"class - CreateUrlsTable1724011503102","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUrlsTable1724011503102\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1724011503102-create-urls-table.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1724011503102-create-urls-table.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1724011503102-create-urls-table.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class CreateUrlsTable1724011503102 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`\n            CREATE TABLE IF NOT EXISTS urls (\n                id SERIAL PRIMARY KEY,\n                user_id INT NULL, \n                hash VARCHAR UNIQUE NOT NULL,\n                original_url VARCHAR NOT NULL,\n                click_count INT NOT NULL DEFAULT 0,\n                created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n                updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n                deleted_at TIMESTAMPTZ\n            )\n        `);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`\n            DROP TABLE IF EXISTS \"urls\"; \n        `);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email to user', example: 'example@example.com'})@IsNotEmpty({message:  => })@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Password to user', example: 'abcd1234'})@IsNotEmpty({message:  => })@IsString({message:  => })@Length(8, 16, {message: 'Password length should be between 8 and 16 characters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsEmail, IsString, Length } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { ValidationMessages } from '../../common/constants/validation-messages';\n\nexport class CreateUserDto {\n  @ApiProperty({ description: 'Email to user', example: 'example@example.com' })\n  @IsNotEmpty({\n    message: ({ property }) => ValidationMessages.required(property),\n  })\n  @IsEmail()\n  readonly email: string;\n\n  @ApiProperty({ description: 'Password to user', example: 'abcd1234' })\n  @IsNotEmpty({\n    message: ({ property }) => ValidationMessages.required(property),\n  })\n  @IsString({\n    message: ({ property }) => ValidationMessages.isString(property),\n  })\n  @Length(8, 16, {\n    message: 'Password length should be between 8 and 16 characters',\n  })\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { databaseProviders } from './database.providers';\n\n@Module({\n  providers: [...databaseProviders],\n  exports: [...databaseProviders],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailIsRegisteredException.html":{"url":"classes/EmailIsRegisteredException.html","title":"class - EmailIsRegisteredException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailIsRegisteredException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors/custom-errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ConflictException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/errors/custom-errors.ts:10\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ConflictException, NotFoundException } from '@nestjs/common';\nimport { ERROR_MESSAGES } from './error-messages';\n\nexport class URLNotFoundException extends NotFoundException {\n  constructor() {\n    super(ERROR_MESSAGES.URL_NOT_FOUND);\n  }\n}\n\nexport class EmailIsRegisteredException extends ConflictException {\n  constructor() {\n    super(ERROR_MESSAGES.EMAIL_IS_REGISTERED);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger)\n                    \n                \n                        \n                            \n                                Defined in src/common/filters/http-exception.filter.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/http-exception.filter.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  constructor(private readonly logger = new Logger(HttpExceptionFilter.name)) {}\n\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const message =\n      exception.getResponse()['message'] || 'Unexpected error occurred';\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    this.logger.error(\n      `Status: ${status}, Error Message: ${JSON.stringify(message)}`,\n    );\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      message,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICreateUser.html":{"url":"interfaces/ICreateUser.html","title":"interface - ICreateUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICreateUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/user.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Pick\n            \n\n\n\n\n    \n\n\n    \n        export interface IUser {\n  id?: number;\n  email: string;\n  password: string;\n  createdAt: Date;\n  updateAt: Date;\n  deletedAt: Date;\n}\n\nexport interface ICreateUser\n  extends Pick {}\n\nexport interface IPayloadUser extends Pick {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPayloadUser.html":{"url":"interfaces/IPayloadUser.html","title":"interface - IPayloadUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPayloadUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/user.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Pick\n            \n\n\n\n\n    \n\n\n    \n        export interface IUser {\n  id?: number;\n  email: string;\n  password: string;\n  createdAt: Date;\n  updateAt: Date;\n  deletedAt: Date;\n}\n\nexport interface ICreateUser\n  extends Pick {}\n\nexport interface IPayloadUser extends Pick {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUser.html":{"url":"interfaces/IUser.html","title":"interface - IUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/user.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            deletedAt\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            updateAt\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deletedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deletedAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IUser {\n  id?: number;\n  email: string;\n  password: string;\n  createdAt: Date;\n  updateAt: Date;\n  deletedAt: Date;\n}\n\nexport interface ICreateUser\n  extends Pick {}\n\nexport interface IPayloadUser extends Pick {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/jwt-auth.guard.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/jwt-auth.guard.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  canActivate(context: ExecutionContext) {\n    return super.canActivate(context);\n  }\n\n  handleRequest(err, user) {\n    if (err || !user) {\n      throw err || new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtStrategy.html":{"url":"classes/JwtStrategy.html","title":"class - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:5\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt.strategy.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { IPayloadUser } from 'src/users/interfaces/user.interface';\n\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    console.log(process.env.JWT_SECRET);\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  async validate(payload: any): Promise {\n    return { id: payload.id, email: payload.email };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LinkUserToUrl1724098604809.html":{"url":"classes/LinkUserToUrl1724098604809.html","title":"class - LinkUserToUrl1724098604809","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LinkUserToUrl1724098604809\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1724098604809-link-user-to-url.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1724098604809-link-user-to-url.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1724098604809-link-user-to-url.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class LinkUserToUrl1724098604809 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `ALTER TABLE \"urls\" ADD CONSTRAINT \"FK_user_url\" FOREIGN KEY (\"user_id\") REFERENCES \"users\"(\"id\") ON DELETE SET NULL`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`ALTER TABLE \"urls\" DROP CONSTRAINT \"FK_user_url\"`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard('local')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(req: any, email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/local.strategy.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({\n      usernameField: 'email',\n      passwordField: 'password',\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(req: any, email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OptionalAuthGuard.html":{"url":"injectables/OptionalAuthGuard.html","title":"injectable - OptionalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OptionalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/optional-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/optional-auth.guard.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class OptionalAuthGuard extends AuthGuard('jwt') {\n  canActivate(context: ExecutionContext) {\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/URLNotFoundException.html":{"url":"classes/URLNotFoundException.html","title":"class - URLNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  URLNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors/custom-errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/errors/custom-errors.ts:4\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ConflictException, NotFoundException } from '@nestjs/common';\nimport { ERROR_MESSAGES } from './error-messages';\n\nexport class URLNotFoundException extends NotFoundException {\n  constructor() {\n    super(ERROR_MESSAGES.URL_NOT_FOUND);\n  }\n}\n\nexport class EmailIsRegisteredException extends ConflictException {\n  constructor() {\n    super(ERROR_MESSAGES.EMAIL_IS_REGISTERED);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUrlDto.html":{"url":"classes/UpdateUrlDto.html","title":"class - UpdateUrlDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUrlDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/urls/dto/update-url.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUrlDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUrlDto } from './create-url.dto';\n\nexport class UpdateUrlDto extends PartialType(CreateUrlDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Url.html":{"url":"entities/Url.html","title":"entity - Url","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Url\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/urls/entities/url.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                clickCount\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                hash\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                originalUrl\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        clickCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'click_count'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/urls/entities/url.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamptz', name: 'created_at', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/urls/entities/url.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamptz', name: 'deleted_at', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/urls/entities/url.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        hash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 10, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/urls/entities/url.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/urls/entities/url.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        originalUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'original_url'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/urls/entities/url.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamptz', name: 'updated_at', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/urls/entities/url.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'integer', nullable: true, name: 'user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/urls/entities/url.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  Index,\n} from 'typeorm';\n\n@Index('urls_hash_index', ['hash'], { unique: true })\n@Entity('urls')\nexport class Url {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'integer', nullable: true, name: 'user_id' })\n  userId: number;\n\n  @Column({ length: 10, unique: true })\n  hash: string;\n\n  @Column({ name: 'original_url' })\n  originalUrl: string;\n\n  @Column({ name: 'click_count' })\n  clickCount: number;\n\n  @CreateDateColumn({\n    type: 'timestamptz',\n    name: 'created_at',\n    default: () => 'now()',\n  })\n  createdAt: Date;\n\n  @CreateDateColumn({\n    type: 'timestamptz',\n    name: 'updated_at',\n    default: () => 'now()',\n  })\n  updatedAt: Date;\n\n  @CreateDateColumn({\n    type: 'timestamptz',\n    name: 'deleted_at',\n    nullable: true,\n  })\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UrlsController.html":{"url":"controllers/UrlsController.html","title":"controller - UrlsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UrlsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/urls/urls.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                findByUserId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                redirect\n                            \n                            \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                shorten\n                            \n                            \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUserId(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('url/user/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/urls/urls.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        redirect\n                        \n                    \n                \n            \n            \n                \n                        \n                    redirect(hash: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Redirect to the original URL'})@ApiResponse({status: 200, description: 'Redirect to the original URL.'})@ApiResponse({status: 404, description: 'URL not found.'})@Get(':hash')\n                \n            \n\n                    \n                        \n                            Defined in src/urls/urls.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                hash\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete('url/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/urls/urls.controller.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        shorten\n                        \n                    \n                \n            \n            \n                \n                        \n                    shorten(createUrlDto: CreateUrlDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(OptionalAuthGuard)@Post()@ApiOperation({summary: 'Create a shortened URL'})@ApiBody({type: CreateUrlDto})@ApiResponse({status: 201, description: 'The URL has been successfully shortened.', type: String})@ApiResponse({status: 400, description: 'Invalid URL provided.'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/urls/urls.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUrlDto\n                                            \n                                                            CreateUrlDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateUrlDto: UpdateUrlDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Put('url/:id')@ApiOperation({summary: 'Update url by id'})\n                \n            \n\n                    \n                        \n                            Defined in src/urls/urls.controller.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUrlDto\n                                            \n                                                            UpdateUrlDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Logger,\n  Res,\n  UseGuards,\n  Req,\n  Delete,\n  Put,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody, ApiResponse } from '@nestjs/swagger';\nimport { UrlsService } from './urls.service';\nimport { CreateUrlDto } from './dto/create-url.dto';\nimport { URLNotFoundException } from 'src/common/errors/custom-errors';\nimport { Response, Request } from 'express';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\nimport { OptionalAuthGuard } from 'src/auth/guards/optional-auth.guard';\nimport { IPayloadUser } from 'src/users/interfaces/user.interface';\nimport { UpdateUrlDto } from './dto/update-url.dto';\n\n@ApiTags('URLs')\n@Controller('')\nexport class UrlsController {\n  private logger = new Logger(UrlsController.name);\n\n  constructor(private readonly _urlsService: UrlsService) {}\n\n  @UseGuards(OptionalAuthGuard)\n  @Post()\n  @ApiOperation({ summary: 'Create a shortened URL' })\n  @ApiBody({ type: CreateUrlDto })\n  @ApiResponse({\n    status: 201,\n    description: 'The URL has been successfully shortened.',\n    type: String,\n  })\n  @ApiResponse({ status: 400, description: 'Invalid URL provided.' })\n  @Post()\n  shorten(\n    @Body() createUrlDto: CreateUrlDto,\n    @Req() req: Request & { user?: IPayloadUser },\n  ) {\n    if (req.user) {\n      const userId = req.user?.id;\n      return this._urlsService.createByUser(userId, createUrlDto);\n    } else {\n      return this._urlsService.create(createUrlDto);\n    }\n  }\n\n  @ApiOperation({ summary: 'Redirect to the original URL' })\n  @ApiResponse({ status: 200, description: 'Redirect to the original URL.' })\n  @ApiResponse({ status: 404, description: 'URL not found.' })\n  @Get(':hash')\n  async redirect(@Param('hash') hash: string, @Res() res: Response) {\n    try {\n      const result = await this._urlsService.getOriginalUrlByHash(hash);\n      return res.redirect(result.url);\n    } catch (error) {\n      this.logger.error(error);\n\n      if (error instanceof URLNotFoundException) {\n        throw new URLNotFoundException();\n      }\n\n      throw error;\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('url/user/:id')\n  async findByUserId(@Param('id') userId: number) {\n    return await this._urlsService.findByUserId(userId);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete('url/:id')\n  remove(@Param('id') id: number, @Req() req) {\n    return this._urlsService.removeByUserId(req.user.id, id);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Put('url/:id')\n  @ApiOperation({ summary: 'Update url by id' })\n  update(\n    @Param('id') id: number,\n    @Body() updateUrlDto: UpdateUrlDto,\n    @Req() req,\n  ) {\n    return this._urlsService.updateByUserId(req.user.id, id, updateUrlDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UrlsModule.html":{"url":"modules/UrlsModule.html","title":"module - UrlsModule","body":"\n                   \n\n\n\n\n    Modules\n    UrlsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UrlsModule\n\n\n\ncluster_UrlsModule_imports\n\n\n\ncluster_UrlsModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nUrlsModule\n\nUrlsModule\n\nUrlsModule -->\n\nDatabaseModule->UrlsModule\n\n\n\n\n\nUrlsService\n\nUrlsService\n\nUrlsModule -->\n\nUrlsService->UrlsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/urls/urls.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UrlsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UrlsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UrlsService } from './urls.service';\nimport { UrlsController } from './urls.controller';\nimport { urlProviders } from './entities/url.providers';\nimport { DatabaseModule } from 'src/database/database.module';\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [UrlsController],\n  providers: [...urlProviders, UrlsService],\n})\nexport class UrlsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UrlsService.html":{"url":"injectables/UrlsService.html","title":"injectable - UrlsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UrlsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/urls/urls.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createByUser\n                            \n                            \n                                    Async\n                                findByUserId\n                            \n                            \n                                generateHash\n                            \n                            \n                                    Async\n                                getOriginalUrlByHash\n                            \n                            \n                                    Async\n                                getValidHash\n                            \n                            \n                                    Async\n                                hashInUse\n                            \n                            \n                                    Async\n                                increaseClickCount\n                            \n                            \n                                    Async\n                                removeByUserId\n                            \n                            \n                                    Async\n                                updateByUserId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_urlRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/urls/urls.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _urlRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(undefined: CreateUrlDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/urls/urls.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Creates a short URL from a given original URL. If the URL already exists in the database,\nit returns the existing shortened version.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            CreateUrlDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nAn object containing the ID and the shortened URL.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createByUser(userId: number, undefined: CreateUrlDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/urls/urls.service.ts:185\n                        \n                    \n\n\n            \n                \n                        Creates a new URL for a user. If the URL already exists, it returns the existing one.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user's identifier.\n\n\n                                            \n                                        \n                                        \n                                            \n                                                            CreateUrlDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe new URL's ID and short URL.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUserId(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/urls/urls.service.ts:162\n                        \n                    \n\n\n            \n                \n                        Retrieves all URLs associated with a specific user that haven't been deleted.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user's identifier.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nA list of URLs with detailed information including ID, hash, original URL, click count, and update timestamp.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateHash\n                        \n                    \n                \n            \n            \n                \ngenerateHash(length: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/urls/urls.service.ts:128\n                        \n                    \n\n\n            \n                \n                        Generates a random hash of a specified length using base62 characters.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                length\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    6\n                                            \n\n                                            \n                                                    \nThe desired length of the hash. Defaults to 6 if not specified.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nA random hash.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOriginalUrlByHash\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOriginalUrlByHash(hash: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/urls/urls.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Retrieves the original URL associated with a given hash.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                hash\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe hash part of the short URL.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nAn object containing the original URL.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getValidHash\n                        \n                    \n                \n            \n            \n                \n                        \n                    getValidHash()\n                \n            \n\n\n                    \n                        \n                            Defined in src/urls/urls.service.ts:107\n                        \n                    \n\n\n            \n                \n                        Generates a valid hash that is not currently in use.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nA valid unused hash.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hashInUse\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashInUse(hash: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/urls/urls.service.ts:147\n                        \n                    \n\n\n            \n                \n                        Checks if a given hash is already in use.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                hash\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe hash to check.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nTrue if the hash is in use, otherwise false.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        increaseClickCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    increaseClickCount(urlId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/urls/urls.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Increments the click count of a URL by 1.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                urlId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the URL to be incremented.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeByUserId(userId: number, id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/urls/urls.service.ts:223\n                        \n                    \n\n\n            \n                \n                        Marks a URL as deleted for a specific user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user's identifier.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe URL's identifier to be removed.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateByUserId(userId: number, id: number, updateUrlDto: UpdateUrlDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/urls/urls.service.ts:239\n                        \n                    \n\n\n            \n                \n                        Updates a URL for a specific user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user's identifier.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe URL's identifier to be updated.\n\n\n                                            \n                                        \n                                        \n                                                updateUrlDto\n                                            \n                                                            UpdateUrlDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData Transfer Object containing the updated URL data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe updated URL object.\n\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('UrlsService')\n                    \n                \n                    \n                        \n                                Defined in src/urls/urls.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger } from '@nestjs/common';\nimport { CreateUrlDto } from './dto/create-url.dto';\nimport {\n  BASE62_CHARACTERS,\n  URLS_REPOSITORY,\n} from '../common/constants/constants';\nimport { Repository, IsNull, EntityNotFoundError } from 'typeorm';\nimport { Url } from './entities/url.entity';\nimport { URLNotFoundException } from 'src/common/errors/custom-errors';\nimport { UpdateUrlDto } from './dto/update-url.dto';\n\n@Injectable()\nexport class UrlsService {\n  private logger = new Logger('UrlsService');\n\n  constructor(\n    @Inject(URLS_REPOSITORY)\n    private readonly _urlRepository: Repository,\n  ) {}\n\n  /**\n   * Creates a short URL from a given original URL. If the URL already exists in the database,\n   * it returns the existing shortened version.\n   *\n   * @param {CreateUrlDto} createUrlDto - Data Transfer Object for creating a URL.\n   * @returns {Promise} - An object containing the ID and the shortened URL.\n   */\n  async create({\n    originalUrl,\n  }: CreateUrlDto): Promise {\n    const urlExists = await this._urlRepository.findOne({\n      where: {\n        originalUrl,\n        userId: IsNull(),\n        deletedAt: IsNull(),\n      },\n    });\n\n    if (urlExists) {\n      const { id, hash } = urlExists;\n      return {\n        id,\n        shortUrl: `${process.env.API_DOMAIN}:${process.env.APP_PORT}/${hash}`,\n      };\n    }\n\n    const hash = await this.getValidHash();\n    const newUrl = this._urlRepository.create({\n      originalUrl,\n      hash,\n    });\n\n    const urlSaved = await this._urlRepository.save(newUrl);\n    const shortUrl = `${process.env.API_DOMAIN}:${process.env.APP_PORT}/${hash}`;\n\n    return { shortUrl, id: urlSaved.id };\n  }\n\n  /**\n   * Retrieves the original URL associated with a given hash.\n   *\n   * @param {string} hash - The hash part of the short URL.\n   * @returns {Promise} - An object containing the original URL.\n   */\n  async getOriginalUrlByHash(hash: string): Promise {\n    try {\n      if (!hash || hash.length === 0) return null;\n\n      const where = { where: { hash, deletedAt: IsNull() } };\n      const url = await this._urlRepository.findOneOrFail(where);\n\n      this.increaseClickCount(url.id);\n\n      return { url: url.originalUrl };\n    } catch (error) {\n      if (error instanceof EntityNotFoundError) {\n        throw new URLNotFoundException();\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Increments the click count of a URL by 1.\n   *\n   * @param {number} urlId - The ID of the URL to be incremented.\n   */\n  async increaseClickCount(urlId: number): Promise {\n    try {\n      const url = await this._urlRepository.findOneOrFail({\n        where: { id: urlId },\n      });\n\n      url.clickCount += 1;\n      await this._urlRepository.save(url);\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  /**\n   * Generates a valid hash that is not currently in use.\n   *\n   * @returns {Promise} - A valid unused hash.\n   */\n  async getValidHash(): Promise {\n    let hashValid = '';\n\n    while (hashValid.length === 0) {\n      const hash = this.generateHash();\n      const isInUse = await this.hashInUse(hash);\n      if (!isInUse) {\n        hashValid = hash;\n        break;\n      }\n    }\n\n    return hashValid;\n  }\n\n  /**\n   * Generates a random hash of a specified length using base62 characters.\n   *\n   * @param {number} length - The desired length of the hash. Defaults to 6 if not specified.\n   * @returns {string} - A random hash.\n   */\n  generateHash(length: number = 6): string {\n    if (length } - True if the hash is in use, otherwise false.\n   */\n  async hashInUse(hash: string): Promise {\n    if (!hash || hash.length === 0) return false;\n\n    const hashExists = await this._urlRepository.findOne({ where: { hash } });\n\n    if (hashExists) return true;\n\n    return false;\n  }\n\n  /**\n   * Retrieves all URLs associated with a specific user that haven't been deleted.\n   * @param {number} userId - The user's identifier.\n   * @returns {Promise} - A list of URLs with detailed information including ID, hash, original URL, click count, and update timestamp.\n   */\n  async findByUserId(userId: number): Promise {\n    const urls = await this._urlRepository.find({\n      where: { userId, deletedAt: null },\n      select: ['id', 'hash', 'originalUrl', 'clickCount', 'updatedAt'],\n    });\n\n    const handler = (item) => {\n      const url = `${process.env.API_DOMAIN}:${process.env.APP_PORT}/${item.hash}`;\n      item['url'] = url;\n      return item;\n    };\n\n    urls.forEach((url) => handler(url));\n\n    return urls;\n  }\n\n  /**\n   * Creates a new URL for a user. If the URL already exists, it returns the existing one.\n   * @param {number} userId - The user's identifier.\n   * @param {CreateUrlDto} createUrlDto - Data Transfer Object containing the original URL.\n   * @returns {Promise} - The new URL's ID and short URL.\n   */\n  async createByUser(\n    userId: number,\n    { originalUrl }: CreateUrlDto,\n  ): Promise {\n    const urlExists = await this._urlRepository.findOne({\n      where: {\n        originalUrl,\n        userId,\n        deletedAt: IsNull(),\n      },\n    });\n\n    if (urlExists) {\n      const { id, hash } = urlExists;\n      return {\n        id,\n        shortUrl: `${process.env.API_DOMAIN}:${process.env.APP_PORT}/${hash}`,\n      };\n    }\n\n    const hash = await this.getValidHash();\n    const newUrl = this._urlRepository.create({\n      originalUrl,\n      hash,\n      userId,\n    });\n\n    const urlSaved = await this._urlRepository.save(newUrl);\n    const shortUrl = `${process.env.API_DOMAIN}:${process.env.APP_PORT}/${hash}`;\n\n    return { shortUrl, id: urlSaved.id };\n  }\n\n  /**\n   * Marks a URL as deleted for a specific user.\n   * @param {number} userId - The user's identifier.\n   * @param {number} id - The URL's identifier to be removed.\n   */\n  async removeByUserId(userId: number, id: number) {\n    const url = await this._urlRepository.findOneOrFail({\n      where: { deletedAt: IsNull(), id, userId },\n    });\n\n    url.deletedAt = new Date();\n    await this._urlRepository.save(url);\n  }\n\n  /**\n   * Updates a URL for a specific user.\n   * @param {number} userId - The user's identifier.\n   * @param {number} id - The URL's identifier to be updated.\n   * @param {UpdateUrlDto} updateUrlDto - Data Transfer Object containing the updated URL data.\n   * @returns {Promise} - The updated URL object.\n   */\n  async updateByUserId(\n    userId: number,\n    id: number,\n    updateUrlDto: UpdateUrlDto,\n  ): Promise {\n    await this._urlRepository.findOneOrFail({\n      where: { id, userId, deletedAt: IsNull() },\n    });\n\n    const updateBody = await this._urlRepository.preload({\n      id,\n      ...updateUrlDto,\n    });\n\n    return await this._urlRepository.save(updateBody);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamptz', name: 'created_at', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamptz', name: 'deleted_at', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamptz', name: 'updated_at', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n} from 'typeorm';\n\n@Entity('users')\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  email: string;\n\n  @Column()\n  password: string;\n\n  @CreateDateColumn({\n    type: 'timestamptz',\n    name: 'created_at',\n    default: () => 'now()',\n  })\n  createdAt: Date;\n\n  @CreateDateColumn({\n    type: 'timestamptz',\n    name: 'updated_at',\n    default: () => 'now()',\n  })\n  updatedAt: Date;\n\n  @CreateDateColumn({\n    type: 'timestamptz',\n    name: 'deleted_at',\n    nullable: true,\n  })\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Users1724086805338.html":{"url":"classes/Users1724086805338.html","title":"class - Users1724086805338","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Users1724086805338\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1724086805338-users.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1724086805338-users.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1724086805338-users.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class Users1724086805338 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`\n            CREATE TABLE IF NOT EXISTS users (\n                id SERIAL PRIMARY KEY,\n                email VARCHAR(255) NOT null unique,\n                password VARCHAR(255) NOT NULL,\n                created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n                updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n                deleted_at TIMESTAMPTZ\n            );\n        `);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`\n            DROP TABLE IF EXISTS \"users\"; \n        `);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Register a user'})@ApiBody({type: CreateUserDto})@ApiResponse({status: 201})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Logger } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiBody, ApiResponse } from '@nestjs/swagger';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\n\n@ApiTags('Users')\n@Controller('users')\nexport class UsersController {\n  private logger = new Logger(UsersController.name);\n\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Register a user' })\n  @ApiBody({ type: CreateUserDto })\n  @ApiResponse({ status: 201 })\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nDatabaseModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { userProviders } from './entities/user.providers';\nimport { DatabaseModule } from 'src/database/database.module';\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [UsersController],\n  providers: [UsersService, ...userProviders],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(email: string, password)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(UsersService.name)\n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { USERS_REPOSITORY } from 'src/common/constants/constants';\nimport { Repository } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { EmailIsRegisteredException } from 'src/common/errors/custom-errors';\nimport {\n  comparePassword,\n  generateHashPassword,\n} from 'src/utils/password.utils';\nimport { ICreateUser } from './interfaces/user.interface';\n\n@Injectable()\nexport class UsersService {\n  private logger = new Logger(UsersService.name);\n\n  constructor(\n    @Inject(USERS_REPOSITORY)\n    private readonly _userRepository: Repository,\n  ) {}\n\n  async create(createUserDto: CreateUserDto): Promise {\n    try {\n      const { email, password } = createUserDto;\n      const isRegisteredEmail = await this._userRepository.findOne({\n        where: { email },\n      });\n\n      if (isRegisteredEmail) throw new EmailIsRegisteredException();\n\n      const hashPassword = await generateHashPassword(password);\n\n      const newUser = await this._userRepository.create({\n        email,\n        password: hashPassword,\n      });\n\n      const savedUser = await this._userRepository.save(newUser);\n\n      return {\n        id: savedUser.id,\n        email: savedUser.email,\n        createdAt: savedUser.createdAt,\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async validateUser(email: string, password): Promise {\n    const user = await this._userRepository.findOne({\n      where: { email },\n    });\n\n    if (user) {\n      const isValid = await comparePassword(password, user.password);\n      if (isValid) return { ...user, password: undefined };\n    }\n\n    return null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/auth/entities/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/optional-auth.guard.ts\n            \n            injectable\n            OptionalAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            class\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/constants/constants.ts\n            \n            variable\n            BASE62_CHARACTERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/constants/constants.ts\n            \n            variable\n            DATA_SOURCE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/constants/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/constants/constants.ts\n            \n            variable\n            URLS_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/constants/constants.ts\n            \n            variable\n            USERS_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/constants/validation-messages.ts\n            \n            variable\n            ValidationMessages\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/errors/custom-errors.ts\n            \n            class\n            EmailIsRegisteredException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/errors/custom-errors.ts\n            \n            class\n            URLNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/errors/error-messages.ts\n            \n            variable\n            ERROR_MESSAGES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/data-source.ts\n            \n            variable\n            config\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/data-source.ts\n            \n            variable\n            TypeormDataSource\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/database.providers.ts\n            \n            variable\n            databaseProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1724011503102-create-urls-table.ts\n            \n            class\n            CreateUrlsTable1724011503102\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1724086805338-users.ts\n            \n            class\n            Users1724086805338\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1724098604809-link-user-to-url.ts\n            \n            class\n            LinkUserToUrl1724098604809\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            DOMAIN_DEFAULT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            PORT_DEFAULT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/urls/dto/create-url.dto.ts\n            \n            class\n            CreateUrlDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/urls/dto/update-url.dto.ts\n            \n            class\n            UpdateUrlDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/urls/entities/url.entity.ts\n            \n            entity\n            Url\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/urls/entities/url.entity.ts\n            \n            class\n            Url\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/urls/entities/url.providers.ts\n            \n            variable\n            urlProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/urls/urls.controller.ts\n            \n            controller\n            UrlsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/urls/urls.service.ts\n            \n            injectable\n            UrlsService\n            \n                76 %\n                (10/13)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.providers.ts\n            \n            variable\n            userProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/interfaces/user.interface.ts\n            \n            interface\n            ICreateUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/interfaces/user.interface.ts\n            \n            interface\n            IPayloadUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/interfaces/user.interface.ts\n            \n            interface\n            IUser\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/password.utils.ts\n            \n            function\n            comparePassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/password.utils.ts\n            \n            function\n            generateHashPassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/password.utils.ts\n            \n            variable\n            SALT_ROUNDS\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            dotenv : ^16.4.5\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.12.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            comparePassword   (src/.../password.utils.ts)\n                        \n                        \n                            generateHashPassword   (src/.../password.utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/password.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        comparePassword\n                        \n                    \n                \n            \n            \n                \ncomparePassword(password: string, encriptedPassword: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encriptedPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateHashPassword\n                        \n                    \n                \n            \n            \n                \ngenerateHashPassword(password: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nurl-shortener\n\nAbout\nURL Shortener is a backend application that provides a URL shortening service.\n\n\nStack\n\nNodeJS: 20.x\nNestJs: ^10.0.0\nTypeOrm: ^0.3.20\nPostgreSQL: ^8.12.0\n\nFeatures\n\nURL shortening\nClick count on shortened URLs\n\nHow to Run the Project\nPrerequisites\n\nNodeJS: 20.x\nDocker\n\nEnvironment variables\nExample :APP_PORT=3001\nAPI_DOMAIN=http://localhost\nDATABASE_HOST=\nDATABASE_PORT=5432\nDATABASE_NAME=\nDATABASE_USER=\nDATABASE_PASSWORD=\nDATABASE_SCHEMA=public\nWhen using docker-compose, put db-pg in DATABASE_HOST\n\nRun in Docker\n\nClone:Example :git clone https://github.com/jonlima/url-shortener.git\nInstall the dependencies:Example :npm install\nRun:Example :npm run start:docker\n\n\n[!NOTE]  \nWhen running in start:docker mode, the application will execute the migrations and create the tables, so don't worry about the database.\n\nRoutes\nURLs Module\n\n\n\nRoute\nMethod\nRequest Body\nResponse Body\nHeaders\n\n\n\n\n/\nPOST\n{ \"originalUrl\": \"string\" }\n{ \"id\": \"number\", \"shortUrl\": \"string\" }\nNone\n\n\n/:hash\nGET\nNone\nRedirect to original URL\nNone\n\n\n\nDocumentation\nHow to access and generate project documentation (Swagger and Compodoc).\n\nAccess the API documentation (Swagger) at: /doc or /doc/json\nOnline access (https://jonlima.github.io/url-shortene)\n\nCompodoc:\nRun\nExample :npm run compodoc\n[!NOTE]\nThe generated documentation will be saved in the docs folder\n\nEntity-Relationship (ER) model (Complete)\n\n\nFuture Scope\n\n\nAutor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UrlsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UrlsModule\n\n\n\ncluster_UrlsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nUrlsModule\n\nUrlsModule\n\nUrlsModule -->\n\nDatabaseModule->UrlsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nDatabaseModule->UsersModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nUrlsModule->AppModule\n\n\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nUrlsService\n\nUrlsService\n\nUrlsModule -->\n\nUrlsService->UrlsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BASE62_CHARACTERS   (src/.../constants.ts)\n                        \n                        \n                            config   (src/.../data-source.ts)\n                        \n                        \n                            DATA_SOURCE   (src/.../constants.ts)\n                        \n                        \n                            databaseProviders   (src/.../database.providers.ts)\n                        \n                        \n                            DOMAIN_DEFAULT   (src/.../main.ts)\n                        \n                        \n                            ERROR_MESSAGES   (src/.../error-messages.ts)\n                        \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            PORT_DEFAULT   (src/.../main.ts)\n                        \n                        \n                            SALT_ROUNDS   (src/.../password.utils.ts)\n                        \n                        \n                            TypeormDataSource   (src/.../data-source.ts)\n                        \n                        \n                            urlProviders   (src/.../url.providers.ts)\n                        \n                        \n                            URLS_REPOSITORY   (src/.../constants.ts)\n                        \n                        \n                            userProviders   (src/.../user.providers.ts)\n                        \n                        \n                            USERS_REPOSITORY   (src/.../constants.ts)\n                        \n                        \n                            ValidationMessages   (src/.../validation-messages.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/constants/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BASE62_CHARACTERS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATA_SOURCE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'DATA_SOURCE'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env.JWT_SECRET,\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        URLS_REPOSITORY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'URLS_REPOSITORY'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USERS_REPOSITORY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_REPOSITORY'\n                    \n                \n\n\n        \n    \n\n    src/database/data-source.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DataSourceOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'postgres',\n  host: process.env.DATABASE_HOST,\n  port: Number(process.env.DATABASE_PORT),\n  database: process.env.DATABASE_NAME,\n  schema: process.env.DATABASE_SCHEMA,\n  username: process.env.DATABASE_USER,\n  password: process.env.DATABASE_PASSWORD,\n  synchronize: false,\n  logging: true,\n  entities: [__dirname + '/../**/*.entity.{js,ts}'],\n  migrations: [__dirname + '/migrations/*.{js,ts}'],\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TypeormDataSource\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DataSource(config)\n                    \n                \n\n\n        \n    \n\n    src/database/database.providers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        databaseProviders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    provide: DATA_SOURCE,\n    useFactory: async (configService: ConfigService) => {\n      const dataSource = new DataSource({\n        type: 'postgres',\n        host: configService.get('DATABASE_HOST'),\n        port: configService.get('DATABASE_PORT'),\n        database: configService.get('DATABASE_NAME'),\n        schema: configService.get('DATABASE_SCHEMA'),\n        username: configService.get('DATABASE_USER'),\n        password: configService.get('DATABASE_PASSWORD'),\n        synchronize: false,\n        logging: true,\n        entities: [Url, User],\n      });\n\n      return dataSource.initialize();\n    },\n    inject: [ConfigService],\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DOMAIN_DEFAULT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'http://localhost'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PORT_DEFAULT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 8000\n                    \n                \n\n\n        \n    \n\n    src/common/errors/error-messages.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ERROR_MESSAGES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  URL_NOT_FOUND: 'URL not found',\n  EMAIL_IS_REGISTERED: 'Email is Already Registered',\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/password.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SALT_ROUNDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n\n\n        \n    \n\n    src/urls/entities/url.providers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        urlProviders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    provide: URLS_REPOSITORY,\n    useFactory: (dataSource: DataSource) => dataSource.getRepository(Url),\n    inject: [DATA_SOURCE],\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/users/entities/user.providers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userProviders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    provide: USERS_REPOSITORY,\n    useFactory: (dataSource: DataSource) => dataSource.getRepository(User),\n    inject: [DATA_SOURCE],\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/common/constants/validation-messages.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ValidationMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  required: (property: string) => `${property} is required.`,\n  isUrl: (property: string) => `Please provide a valid URL for ${property}.`,\n  isString: (property: string) => `${property} should be a string`,\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
